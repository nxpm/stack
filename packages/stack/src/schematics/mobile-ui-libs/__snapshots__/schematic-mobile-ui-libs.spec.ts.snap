// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`mobile-ui-libs schematic should run successfully 1`] = `
"import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestUiButtonComponent } from './test-ui-button.component'

@NgModule({
  declarations: [TestUiButtonComponent],
  exports: [TestUiButtonComponent],
  imports: [CommonModule, RouterModule],
})
export class TestUiButtonModule {}
"
`;

exports[`mobile-ui-libs schematic should run successfully 2`] = `
"import { Component, EventEmitter, Input, Output } from '@angular/core'

@Component({
  selector: 'ui-button',
  template: \`
    <ng-container *ngIf=\\"routerLink\\">
      <ion-button [routerLink]=\\"routerLink\\" fill=\\"outline\\" [class]=\\"classes\\">{{ label }}</ion-button>
    </ng-container>
    <ng-container *ngIf=\\"!routerLink\\">
      <ion-button (click)=\\"handler.emit($event)\\" [disabled]=\\"disabled\\" [type]=\\"type\\" [class]=\\"classes\\" fill=\\"outline\\">{{
        label
      }}</ion-button>
    </ng-container>
  \`,
})
export class TestUiButtonComponent {
  @Input() routerLink?: string
  @Input() disabled?: boolean
  @Input() label: string
  @Input() type = 'button'
  @Output() handler = new EventEmitter()

  get classes(): string {
    return ' '
  }
}
"
`;

exports[`mobile-ui-libs schematic should run successfully 3`] = `
"import { AbstractControl, ValidationErrors, Validators } from '@angular/forms'
import { FormlyFieldConfig } from '@ngx-formly/core'

export function minlengthValidationMessage(err, field: FormlyFieldConfig): string {
  return \`Should have at least \${field.templateOptions?.minLength} characters\`
}

export function maxlengthValidationMessage(err, field: FormlyFieldConfig): string {
  return \`This value should be less than \${field.templateOptions?.maxLength} characters\`
}

export function minValidationMessage(err, field: FormlyFieldConfig): string {
  return \`This value should be more than \${field.templateOptions?.min}\`
}

export function maxValidationMessage(err, field: FormlyFieldConfig): string {
  return \`This value should be less than \${field.templateOptions?.max}\`
}

export function emailValidatorMessage(err, field: FormlyFieldConfig): string {
  return \`\\"\${field.formControl?.value}\\" is not a valid email address\`
}

export function emailValidator(control: AbstractControl): ValidationErrors {
  return Validators.email(control) as ValidationErrors
}
"
`;

exports[`mobile-ui-libs schematic should run successfully 4`] = `
"import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { ReactiveFormsModule } from '@angular/forms'
import { FormlyModule } from '@ngx-formly/core'

import {
  emailValidator,
  emailValidatorMessage,
  maxlengthValidationMessage,
  maxValidationMessage,
  minlengthValidationMessage,
  minValidationMessage,
} from './index'

@NgModule({
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormlyModule.forChild({
      validationMessages: [
        { name: 'required', message: 'This field is required' },
        { name: 'minlength', message: minlengthValidationMessage },
        { name: 'maxlength', message: maxlengthValidationMessage },
        { name: 'min', message: minValidationMessage },
        { name: 'max', message: maxValidationMessage },
        { name: 'email', message: emailValidatorMessage },
      ],
      validators: [{ name: 'email', validation: emailValidator }],
    }),
  ],
})
export class UiFormValidatorsModule {}
"
`;

exports[`mobile-ui-libs schematic should run successfully 5`] = `
"import { NgModule } from '@angular/core'
import { ReactiveFormsModule } from '@angular/forms'
import { FormlyModule } from '@ngx-formly/core'
import { FormlyIonicModule } from '@ngx-formly/ionic'

import { TestUiFormComponent } from './test-ui-form.component'
import { UiFormValidatorsModule } from './validators/ui-form-validators.module'

@NgModule({
  declarations: [TestUiFormComponent],
  exports: [TestUiFormComponent],
  imports: [ReactiveFormsModule, FormlyModule.forRoot(), FormlyIonicModule, UiFormValidatorsModule],
})
export class TestUiFormModule {}
"
`;

exports[`mobile-ui-libs schematic should run successfully 6`] = `
"import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { FormlyFieldConfig, FormlyFormBuilder, FormlyFormOptions } from '@ngx-formly/core'

@Component({
  selector: 'ui-form',
  template: \`
    <form [formGroup]=\\"form\\" novalidate (ngSubmit)=\\"submitForm.emit(model)\\">
      <div>
        <formly-form [fields]=\\"fields\\" [form]=\\"form\\" [model]=\\"model\\" [options]=\\"options\\"></formly-form>
        <button type=\\"submit\\" style=\\"display: none;\\" [disabled]=\\"form.touched && !form.valid\\">submit</button>
      </div>
      <ng-content></ng-content>
    </form>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class TestUiFormComponent implements OnInit {
  @Input() fields: FormlyFieldConfig[] = []
  @Input() form = new FormGroup({})
  @Input() model?: any = {}
  @Input() options: FormlyFormOptions = {}
  @Output() submitForm = new EventEmitter()

  constructor(private builder: FormlyFormBuilder) {}

  ngOnInit(): void {
    this.builder.buildForm(this.form, this.fields, this.model, this.options)
  }

  submit() {
    this.submitForm.emit(this.model)
  }
}
"
`;

exports[`mobile-ui-libs schematic should run successfully 7`] = `
"import { FormlyFieldConfig, FormlyTemplateOptions } from '@ngx-formly/core'

export class TestUiFormField implements FormlyFieldConfig {
  static checkbox(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.field(key, 'checkbox', templateOptions, options)
  }

  static date(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.input(key, { ...templateOptions, type: 'date' }, { ...options })
  }

  static datetime(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.input(key, { ...templateOptions, type: 'datetime-local' }, { ...options })
  }

  static email(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    const defaults = {
      type: 'email',
      label: 'Email',
    }
    const defaultOptions = { validators: { validation: ['email'] } }

    return this.input(key, { ...defaults, ...templateOptions }, { ...defaultOptions, ...options })
  }

  static fieldRow(
    fieldGroup: FormlyFieldConfig[] = [],
    fieldGroupClassName: string = 'flex',
    options?: any,
  ): FormlyFieldConfig {
    return {
      fieldGroup,
      fieldGroupClassName,
      ...options,
    }
  }

  static field(
    key: string,
    type?: string,
    templateOptions: FormlyTemplateOptions = {},
    config: FormlyFieldConfig = {},
  ): FormlyFieldConfig {
    return {
      key,
      type,
      templateOptions: {
        ...templateOptions,
      },
      ...config,
    }
  }

  static input(
    key: string,
    templateOptions: FormlyTemplateOptions = {},
    config: FormlyFieldConfig = {},
  ): FormlyFieldConfig {
    return this.field(key, 'input', templateOptions, config)
  }

  static multicheckbox(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.field(key, 'multicheckbox', templateOptions, options)
  }

  static number(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.input(key, { ...templateOptions, type: 'number' }, { ...options })
  }

  static password(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    const defaults = {
      label: 'Password',
      type: 'password',
      minLength: 8,
      required: true,
    }

    return this.input(key, { ...defaults, ...templateOptions }, options)
  }

  static radio(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.field(key, 'radio', templateOptions, options)
  }

  static select(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.field(key, 'select', templateOptions, options)
  }
  static textarea(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    const defaultTemplateOptions = { rows: 5 }

    return this.field(key, 'textarea', { ...defaultTemplateOptions, ...templateOptions }, options)
  }

  static template(template: string): FormlyFieldConfig {
    return { type: 'formly-template', template }
  }

  static time(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.input(key, { ...templateOptions, type: 'time' }, { ...options })
  }
}
"
`;

exports[`mobile-ui-libs schematic should run successfully 8`] = `
"import { NgModule } from '@angular/core'
import { SvgIconRegistry, SvgIconsModule } from '@ngneat/svg-icon'
import { uiIconMap } from './constants/ui-icon.map'
import { TestUiIconComponent } from './test-ui-icon.component'

@NgModule({
  imports: [SvgIconsModule.forRoot()],
  declarations: [TestUiIconComponent],
  exports: [TestUiIconComponent],
})
export class TestUiIconModule {
  constructor(readonly registry: SvgIconRegistry) {
    uiIconMap.forEach((data, name) => this.registry.register({ name, data }))
  }
}
"
`;

exports[`mobile-ui-libs schematic should run successfully 9`] = `
"import { ChangeDetectionStrategy, Component, Input } from '@angular/core'
import { UiIcon } from './enums/ui-icon.enum'

@Component({
  selector: 'ui-icon',
  templateUrl: './test-ui-icon.component.html',
  styles: [
    \`
      :host {
        display: block;
      }
    \`,
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class TestUiIconComponent {
  @Input() icon!: UiIcon | string
  @Input() size: 'lg' | 'md' | 'sm' | 'xs' = 'md'
}
"
`;

exports[`mobile-ui-libs schematic should run successfully 10`] = `
"import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'
import { TestUiLoaderComponent } from './test-ui-loader.component'

@NgModule({
  declarations: [TestUiLoaderComponent],
  exports: [TestUiLoaderComponent],
  imports: [CommonModule],
})
export class TestUiLoaderModule {}
"
`;

exports[`mobile-ui-libs schematic should run successfully 11`] = `
"import { ChangeDetectionStrategy, Component, Input } from '@angular/core'

@Component({
  selector: 'ui-loader',
  template: \`
    <div class=\\"\\" *ngIf=\\"loading\\">
      <div class=\\"\\">
        <div class=\\"\\"></div>
        <div class=\\"\\"></div>
        <div class=\\"\\"></div>
      </div>
    </div>
  \`,
  styles: [
    \`
      :host {
        display: block;
      }
    \`,
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class TestUiLoaderComponent {
  @Input() loading = true
}
"
`;

exports[`mobile-ui-libs schematic should run successfully 12`] = `
"import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'
import { IonicModule } from '@ionic/angular'
import { TestUiPageComponent } from './test-ui-page.component'

@NgModule({
  declarations: [TestUiPageComponent],
  exports: [TestUiPageComponent],
  imports: [CommonModule, IonicModule, RouterModule],
})
export class TestUiPageModule {}
"
`;

exports[`mobile-ui-libs schematic should run successfully 13`] = `
"import { Component, Input } from '@angular/core'

@Component({
  selector: 'ui-page',
  template: \`
    <ion-header [translucent]=\\"true\\">
      <ion-toolbar>
        <ion-buttons slot=\\"start\\">
          <ion-menu-button></ion-menu-button>
        </ion-buttons>
        <ion-title>{{ pageTitle }}</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content [fullscreen]=\\"true\\">
      <ion-header collapse=\\"condense\\">
        <ion-toolbar>
          <ion-title size=\\"large\\">{{ pageTitle }}</ion-title>
        </ion-toolbar>
      </ion-header>
      <ng-content></ng-content>
    </ion-content>
  \`,
})
export class TestUiPageComponent {
  @Input() pageTitle: string = 'ui-page'
}
"
`;

exports[`mobile-ui-libs schematic should run successfully 14`] = `
"import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { MobileUiButtonModule } from '@nxpm/mobile/ui/button'
import { TestUiPageHeaderComponent } from './test-ui-page-header.component'

@NgModule({
  declarations: [TestUiPageHeaderComponent],
  imports: [CommonModule, RouterModule, MobileUiButtonModule],
  exports: [TestUiPageHeaderComponent],
})
export class TestUiPageHeaderModule {}
"
`;

exports[`mobile-ui-libs schematic should run successfully 15`] = `
"import { Component, Input } from '@angular/core'

@Component({
  selector: 'ui-page-header',
  template: \`
    <div class=\\"\\">
      <div class=\\"\\">
        {{ title }}
      </div>
      <ui-button [label]=\\"linkTitle\\" [routerLink]=\\"linkPath\\"></ui-button>
    </div>
  \`,
})
export class TestUiPageHeaderComponent {
  @Input() title?: string
  @Input() linkPath?: string
  @Input() linkTitle?: string
}
"
`;

exports[`mobile-ui-libs schematic should run successfully 16`] = `
"import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { MobileUiPageModule } from '@nxpm/mobile/ui/page'
import { TestUiSidebarPageComponent } from './test-ui-sidebar-page.component'

@NgModule({
  declarations: [TestUiSidebarPageComponent],
  exports: [TestUiSidebarPageComponent],
  imports: [CommonModule, RouterModule, MobileUiPageModule],
})
export class TestUiSidebarPageModule {}
"
`;

exports[`mobile-ui-libs schematic should run successfully 17`] = `
"import { Component, Input } from '@angular/core'

export interface TestUiSidebarPageLink {
  label: string
  icon: string
  path: string
}

@Component({
  selector: 'ui-sidebar-page',
  template: \`
    <ui-page [pageTitle]=\\"headerTitle\\">
      <div>
        <aside>
          <nav>
            <ng-container *ngFor=\\"let link of links\\">
              <ion-button [routerLink]=\\"link.path\\" fill=\\"outline\\" slot=\\"end\\">{{ link.label }}</ion-button>
            </ng-container>
          </nav>
        </aside>

        <div>
          <ng-content></ng-content>
        </div>
      </div>
    </ui-page>
  \`,
})
export class TestUiSidebarPageComponent {
  @Input() headerTitle: string
  @Input() links: TestUiSidebarPageLink[] = []
}
"
`;
