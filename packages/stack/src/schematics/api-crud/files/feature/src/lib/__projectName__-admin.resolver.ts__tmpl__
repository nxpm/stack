import { Args, Mutation, Query, Resolver } from '@nestjs/graphql'
import { UseGuards } from '@nestjs/common'
import {
  AdminCreate<%= classify(modelName) %>Input,
  AdminList<%= classify(modelName) %>Input,
  AdminUpdate<%= classify(modelName) %>Input,
  <%= classify(apiAppName) %><%= classify(modelName) %>DataAccessService,
  <%= classify(modelName) %>,
} from '@<%= npmScope %>/<%= apiAppName %>/<%= dasherize(modelName) %>/data-access'
import { CorePaging } from '@<%= npmScope %>/<%= apiAppName %>/core/data-access'
import {
  CtxUser,
  GqlAuthAdminGuard,
} from '@<%= npmScope %>/<%= apiAppName %>/auth/util'
import { User } from '@<%= npmScope %>/<%= apiAppName %>/user/data-access'

@Resolver()
@UseGuards(GqlAuthAdminGuard)
export class <%= classify(projectName) %>AdminResolver {
  constructor(private readonly service: <%= classify(apiAppName) %><%= classify(modelName) %>DataAccessService) {}

  @Query(() => [<%= classify(modelName) %>], { nullable: true })
  admin<%= classify(pluralModelName) %>(
    @CtxUser() admin: User,
    @Args({ name: 'input', type: () => AdminList<%= classify(modelName) %>Input, nullable: true }) input?: AdminList<%= classify(modelName) %>Input,
  ) {
    return this.service.admin<%= classify(pluralModelName) %>(admin.id, input)
  }

  @Query(() => CorePaging, { nullable: true })
  adminCount<%= classify(pluralModelName) %>(
    @CtxUser() admin: User,
    @Args({ name: 'input', type: () => AdminList<%= classify(modelName) %>Input, nullable: true }) input?: AdminList<%= classify(modelName) %>Input,
  ) {
    return this.service.adminCount<%= classify(pluralModelName) %>(admin.id, input)
  }

  @Query(() => <%= classify(modelName) %>, { nullable: true })
  admin<%= classify(modelName) %>(@CtxUser() admin: User, @Args('<%= camelize(modelName) %>Id') <%= camelize(modelName) %>Id: string) {
    return this.service.admin<%= classify(modelName) %>(admin.id, <%= camelize(modelName) %>Id)
  }

  @Mutation(() => <%= classify(modelName) %>, { nullable: true })
  adminCreate<%= classify(modelName) %>(@CtxUser() admin: User,@Args('input') input: AdminCreate<%= classify(modelName) %>Input,) {
    return this.service.adminCreate<%= classify(modelName) %>(admin.id, input)
  }

  @Mutation(() => <%= classify(modelName) %>, { nullable: true })
  adminUpdate<%= classify(modelName) %>(
    @CtxUser() admin: User,
    @Args('<%= camelize(modelName) %>Id') <%= camelize(modelName) %>Id: string,
    @Args('input') input: AdminUpdate<%= classify(modelName) %>Input,
  ) {
    return this.service.adminUpdate<%= classify(modelName) %>(admin.id, <%= camelize(modelName) %>Id, input)
  }

  @Mutation(() => <%= classify(modelName) %>, { nullable: true })
  adminDelete<%= classify(modelName) %>(@CtxUser() admin: User, @Args('<%= camelize(modelName) %>Id') <%= camelize(modelName) %>Id: string) {
    return this.service.adminDelete<%= classify(modelName) %>(admin.id, <%= camelize(modelName) %>Id)
  }
}
