import { Injectable } from '@nestjs/common'
import { <%= classify(apiAppName) %>CoreDataAccessService, CorePaging, CorePagingInput } from '@<%= npmScope %>/<%= apiAppName %>/core/data-access'

import { AdminCreate<%= classify(modelName) %>Input } from './dto/admin-create-<%= dasherize(modelName) %>.input'
import { AdminList<%= classify(modelName) %>Input } from './dto/admin-list-<%= dasherize(modelName) %>.input'
import { AdminUpdate<%= classify(modelName) %>Input } from './dto/admin-update-<%= dasherize(modelName) %>.input'

@Injectable()
export class <%= classify(projectName) %>AdminService {
  constructor(private readonly data: <%= classify(apiAppName) %>CoreDataAccessService) {}

  admin<%= classify(pluralModelName) %>(adminId: string, input?: AdminList<%= classify(modelName) %>Input) {
    return this.data.<%= camelize(modelName) %>.findMany({
      take: input?.limit,
      skip: input?.skip,
    })
  }

  async adminCount<%= classify(pluralModelName) %>(adminId: string, input?: AdminList<%= classify(modelName) %>Input): Promise<CorePaging> {
    const total = await this.data.<%= camelize(modelName) %>.count()
    return {
      limit: input?.limit,
      skip: input?.skip,
      total,
    }
  }

  admin<%= classify(modelName) %>(adminId: string, <%= camelize(modelName) %>Id) {
    return this.data.<%= camelize(modelName) %>.findUnique({ where: { id: <%= camelize(modelName) %>Id } })
  }

  adminCreate<%= classify(modelName) %>(adminId: string, input: AdminCreate<%= classify(modelName) %>Input) {
    return this.data.<%= camelize(modelName) %>.create({
      data: { <%= nameField %>: input.<%= nameField %> },
    })
  }

  adminUpdate<%= classify(modelName) %>(adminId: string, <%= camelize(modelName) %>Id, input: AdminUpdate<%= classify(modelName) %>Input) {
    return this.data.<%= camelize(modelName) %>.update({
      where: { id: <%= camelize(modelName) %>Id },
      data: { <%= nameField %>: input.<%= nameField %> },
    })
  }

  adminDelete<%= classify(modelName) %>(adminId: string, <%= camelize(modelName) %>Id) {
    return this.data.<%= camelize(modelName) %>.delete({ where: { id: <%= camelize(modelName) %>Id } })
  }
}
