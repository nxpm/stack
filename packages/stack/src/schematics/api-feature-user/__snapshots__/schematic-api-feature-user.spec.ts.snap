// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`api-feature-user schematic should run successfully 1`] = `
"import { Module } from '@nestjs/common'
import { TestUserDataAccessModule } from '@nxpm/test/user/data-access'

import { TestUserFeatureResolver } from './test-user-feature.resolver'
import { TestUserFeatureAdminResolver } from './test-user-feature-admin.resolver'

@Module({
  imports: [TestUserDataAccessModule],
  providers: [TestUserFeatureResolver, TestUserFeatureAdminResolver],
})
export class TestUserFeatureModule {}
"
`;

exports[`api-feature-user schematic should run successfully 2`] = `
"import { Parent, ResolveField, Resolver } from '@nestjs/graphql'
import { User } from '@nxpm/test/user/data-access'

@Resolver(() => User)
export class TestUserFeatureResolver {
  @ResolveField(() => String, { nullable: true })
  name(@Parent() user: User) {
    const name = [user?.firstName, user?.lastName].join(' ').trim()
    return name.length ? name : user?.username
  }

  @ResolveField(() => String, { nullable: true })
  email(@Parent() user: User) {
    const hasPrimary = user.emails?.find((email) => email.primary)

    return hasPrimary ? hasPrimary.email : user.emails?.find((e) => e).email
  }
}
"
`;

exports[`api-feature-user schematic should run successfully 3`] = `
"import { Args, Mutation, Query, Resolver } from '@nestjs/graphql'
import { UseGuards } from '@nestjs/common'
import {
  AdminCreateUserInput,
  AdminUpdateUserInput,
  ApiUserDataAccessService,
  User,
} from '@nxpm/test/user/data-access'
import { CorePaging, CorePagingInput } from '@nxpm/test/core/data-access'
import {
  CtxUser,
  GqlAuthAdminGuard,
} from '@nxpm/test/auth/util'

@Resolver()
@UseGuards(GqlAuthAdminGuard)
export class TestUserFeatureAdminResolver {
  constructor(private readonly service: TestUserDataAccessService) {}

  @Query(() => [User], { nullable: true })
  adminUsers(
    @CtxUser() admin: User,
    @Args({ name: 'paging', type: () => CorePagingInput, nullable: true }) paging?: CorePagingInput,
  ) {
    return this.service.adminUsers(admin.id, paging)
  }

  @Query(() => CorePaging, { nullable: true })
  adminCountUsers(
    @CtxUser() admin: User,
    @Args({ name: 'paging', type: () => CorePagingInput, nullable: true }) paging?: CorePagingInput,
  ) {
    return this.service.adminCountUsers(admin.id, paging)
  }

  @Query(() => User, { nullable: true })
  adminUser(@CtxUser() admin: User, @Args('userId') userId: string) {
    return this.service.adminUser(admin.id, userId)
  }

  @Mutation(() => User, { nullable: true })
  adminCreateUser(@CtxUser() admin: User, @Args('input') input: AdminCreateUserInput) {
    return this.service.adminCreateUser(admin.id, input)
  }

  @Mutation(() => User, { nullable: true })
  adminUpdateUser(@CtxUser() admin: User, @Args('userId') userId: string, @Args('input') input: AdminUpdateUserInput) {
    return this.service.adminUpdateUser(admin.id, userId, input)
  }

  @Mutation(() => User, { nullable: true })
  adminSetUserPassword(@CtxUser() admin: User, @Args('userId') userId: string, @Args('password') password: string) {
    return this.service.adminSetUserPassword(admin.id, userId, password)
  }

  @Mutation(() => User, { nullable: true })
  adminDeleteUser(@CtxUser() admin: User, @Args('userId') userId: string) {
    return this.service.adminDeleteUser(admin.id, userId)
  }
}
"
`;
