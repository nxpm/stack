import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UserCreateInput } from '@prisma/client';
import { ApiCoreDataAccessService } from '@<%= npmScope %>/<%= appName %>/core/data-access';
import { ApiCoreFeatureService } from '@<%= npmScope %>/<%= appName %>/core/feature'
import { Response } from 'express'
import { getGravatarUrl, hashPassword, validatePassword } from './<%= projectName %>.helper';
import { LoginInput } from './dto/login.input';
import { RegisterInput } from './dto/register.input';
import { UserToken } from './models/user-token';
import { Role } from './models/role';

@Injectable()
export class ApiAuthDataAccessService {
  constructor(
    private readonly data: ApiCoreDataAccessService,
    private readonly core: ApiCoreFeatureService,
    private readonly jwtService: JwtService
  ) {}

  async register(payload: RegisterInput) {
    const user = await this.createUser({
      ...payload,
    });

    return this.signUser(user);
  }

  async login(input: LoginInput) {
    const email = input.email.trim();
    const password = input.password.trim();
    const user = await this.findUserByEmail(email);

    if (!user) {
      throw new NotFoundException(`No user found for email: ${email}`);
    }

    const passwordValid = await validatePassword(password, user.password);

    if (!passwordValid) {
      throw new BadRequestException('Invalid password');
    }

    return this.signUser(user);
  }

  signUser(user): UserToken {
    const token = this.jwtService.sign({ userId: user?.id });
    return { token, user };
  }

  validateUser(userId: string) {
    return this.findUserById(userId);
  }

  getUserFromToken(token: string) {
    const userId = this.jwtService.decode(token)['userId'];

    return this.findUserById(userId);
  }

  public findUserByEmail(email: string) {
    return this.data.user.findUnique({ where: { email } });
  }

  public findUserById(userId: string) {
    return this.data.user.findUnique({ where: { id: userId } });
  }

  public findUserByUsername(username: string) {
    return this.data.user.findUnique({ where: { username } });
  }


  async createUser(input: Partial<UserCreateInput>) {
    const submittedPassword = !!input.password
    const password = input.password
    const hashedPassword = hashPassword(password)
    const email = input.email.trim()
    const username = input.username || email

    return this.data.user.create({
      data: {
        firstName: input.firstName,
        lastName: input.lastName,
        email,
        phone: input.phone,
        username,
        avatarUrl: input.avatarUrl || getGravatarUrl(input.email.toLowerCase()),
        password: hashedPassword,
        role: Role.User,
      },
    })
  }

  public setCookie(res: Response, token: string) {
    return res?.cookie(this.core.cookie.name, token, this.core.cookie.options)
  }

  public clearCookie(res: Response) {
    return res.clearCookie(this.core.cookie.name, this.core.cookie.options)
  }
}
