// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`init generator should run successfully with default options 1`] = `
Object {
  "affected": Object {
    "defaultBase": "master",
  },
  "npmScope": "proj",
  "projects": Object {
    "shared-util-sdk": Object {
      "tags": Array [],
    },
    "test-api": Object {
      "tags": Array [],
    },
    "test-api-account-data-access": Object {
      "tags": Array [],
    },
    "test-api-account-feature": Object {
      "tags": Array [],
    },
    "test-api-auth-data-access": Object {
      "tags": Array [],
    },
    "test-api-auth-feature": Object {
      "tags": Array [],
    },
    "test-api-auth-util": Object {
      "tags": Array [],
    },
    "test-api-core-data-access": Object {
      "tags": Array [],
    },
    "test-api-core-feature": Object {
      "tags": Array [],
    },
    "test-api-core-util": Object {
      "tags": Array [],
    },
    "test-api-e2e": Object {
      "tags": Array [],
    },
    "test-api-user-data-access": Object {
      "tags": Array [],
    },
    "test-api-user-feature": Object {
      "tags": Array [],
    },
    "test-web": Object {
      "tags": Array [],
    },
    "test-web-about-feature": Object {
      "tags": Array [],
    },
    "test-web-account-feature": Object {
      "tags": Array [],
    },
    "test-web-account-ui": Object {
      "tags": Array [],
    },
    "test-web-admin-feature": Object {
      "tags": Array [],
    },
    "test-web-admin-ui": Object {
      "tags": Array [],
    },
    "test-web-assets": Object {
      "tags": Array [],
    },
    "test-web-auth-data-access": Object {
      "tags": Array [],
    },
    "test-web-auth-feature": Object {
      "tags": Array [],
    },
    "test-web-auth-ui": Object {
      "tags": Array [],
    },
    "test-web-core-data-access": Object {
      "tags": Array [],
    },
    "test-web-core-feature": Object {
      "tags": Array [],
    },
    "test-web-dashboard-feature": Object {
      "tags": Array [],
    },
    "test-web-e2e": Object {
      "implicitDependencies": Array [
        "test-web",
      ],
      "tags": Array [],
    },
    "test-web-environments": Object {
      "tags": Array [],
    },
    "test-web-layout-feature": Object {
      "tags": Array [],
    },
    "test-web-shell-feature": Object {
      "tags": Array [],
    },
    "test-web-style": Object {
      "tags": Array [],
    },
    "test-web-ui-button": Object {
      "tags": Array [],
    },
    "test-web-ui-form": Object {
      "tags": Array [],
    },
    "test-web-ui-icon": Object {
      "tags": Array [],
    },
    "test-web-ui-loader": Object {
      "tags": Array [],
    },
    "test-web-ui-page": Object {
      "tags": Array [],
    },
    "test-web-ui-page-header": Object {
      "tags": Array [],
    },
    "test-web-ui-sidebar-page": Object {
      "tags": Array [],
    },
    "test-web-ui-table": Object {
      "tags": Array [],
    },
    "test-web-ui-toast": Object {
      "tags": Array [],
    },
  },
  "tasksRunnerOptions": Object {
    "default": Object {
      "options": Object {
        "cacheableOperations": Array [
          "build",
          "lint",
          "test",
          "e2e",
        ],
      },
      "runner": "@nrwl/workspace/tasks-runners/default",
    },
  },
}
`;

exports[`init generator should run successfully with default options 2`] = `
Object {
  "projects": Object {
    "api": Object {
      "name": "test-api",
      "type": "nest",
    },
    "mobile": Object {
      "name": "mobile",
      "type": "ionic-angular",
    },
    "web": Object {
      "name": "test-web",
      "type": "angular",
    },
  },
}
`;

exports[`init generator should run successfully with default options 3`] = `
Array [
  "workspace.json",
  ".prettierrc",
  "package.json",
  "nx.json",
  "tsconfig.base.json",
  "jest.config.js",
  "jest.preset.js",
  "apps",
  ".eslintrc.json",
  "libs",
  ".env",
  ".env.example",
  ".gitignore",
  "tailwind.config.js",
  "Dockerfile",
  ".dockerignore",
  "docker-compose.yml",
  ".prettierignore",
  "nxpm.json",
  "README.md",
]
`;

exports[`init generator should run successfully with default options 4`] = `
"{
  \\"name\\": \\"test-name\\",
  \\"dependencies\\": {
    \\"@angular/animations\\": \\"^12.0.0\\",
    \\"@angular/cdk\\": \\"12.1.2\\",
    \\"@angular/common\\": \\"^12.0.0\\",
    \\"@angular/compiler\\": \\"^12.0.0\\",
    \\"@angular/core\\": \\"^12.0.0\\",
    \\"@angular/forms\\": \\"^12.0.0\\",
    \\"@angular/platform-browser\\": \\"^12.0.0\\",
    \\"@angular/platform-browser-dynamic\\": \\"^12.0.0\\",
    \\"@angular/router\\": \\"^12.0.0\\",
    \\"@apollo/client\\": \\"3.3.21\\",
    \\"@kikstart-playground/graphql-intercom\\": \\"1.4.1\\",
    \\"@nestjs/common\\": \\"^7.0.0\\",
    \\"@nestjs/config\\": \\"0.5.0\\",
    \\"@nestjs/core\\": \\"^7.0.0\\",
    \\"@nestjs/graphql\\": \\"7.11.0\\",
    \\"@nestjs/jwt\\": \\"7.2.0\\",
    \\"@nestjs/passport\\": \\"7.1.5\\",
    \\"@nestjs/platform-express\\": \\"^7.0.0\\",
    \\"@nestjs/serve-static\\": \\"2.2.2\\",
    \\"@ngneat/hot-toast\\": \\"2.0.1\\",
    \\"@ngneat/overview\\": \\"1.0.0\\",
    \\"@ngneat/svg-icon\\": \\"2.2.2\\",
    \\"@ngrx/component-store\\": \\"12.2.0\\",
    \\"@ngx-formly/core\\": \\"5.10.13\\",
    \\"@prisma/client\\": \\"2.27.0\\",
    \\"@tailwindcss/forms\\": \\"0.3.3\\",
    \\"apollo-angular\\": \\"2.6.0\\",
    \\"apollo-server-express\\": \\"2.18.0\\",
    \\"bcryptjs\\": \\"2.4.3\\",
    \\"class-transformer\\": \\"0.3.1\\",
    \\"class-validator\\": \\"0.12.2\\",
    \\"cookie-parser\\": \\"1.4.5\\",
    \\"fs-extra\\": \\"10.0.0\\",
    \\"graphql\\": \\"15.3.0\\",
    \\"graphql-subscriptions\\": \\"1.2.1\\",
    \\"graphql-tools\\": \\"6.2.3\\",
    \\"graphql-type-json\\": \\"0.3.2\\",
    \\"joi\\": \\"17.2.1\\",
    \\"passport\\": \\"0.4.1\\",
    \\"passport-jwt\\": \\"4.0.0\\",
    \\"reflect-metadata\\": \\"^0.1.13\\",
    \\"rxjs\\": \\"~6.6.3\\",
    \\"tailwindcss\\": \\"2.2.4\\",
    \\"tslib\\": \\"^2.0.0\\",
    \\"zone.js\\": \\"~0.11.4\\"
  },
  \\"devDependencies\\": {
    \\"@angular-devkit/build-angular\\": \\"^12.0.0\\",
    \\"@angular-eslint/eslint-plugin\\": \\"~12.0.0\\",
    \\"@angular-eslint/eslint-plugin-template\\": \\"~12.0.0\\",
    \\"@angular-eslint/template-parser\\": \\"~12.0.0\\",
    \\"@angular/compiler-cli\\": \\"^12.0.0\\",
    \\"@angular/language-service\\": \\"^12.0.0\\",
    \\"@graphql-codegen/cli\\": \\"1.21.7\\",
    \\"@graphql-codegen/introspection\\": \\"1.18.2\\",
    \\"@graphql-codegen/typescript\\": \\"1.23.0\\",
    \\"@graphql-codegen/typescript-apollo-angular\\": \\"2.3.8\\",
    \\"@graphql-codegen/typescript-operations\\": \\"1.18.4\\",
    \\"@nestjs/schematics\\": \\"^7.0.0\\",
    \\"@nestjs/testing\\": \\"^7.0.0\\",
    \\"@ngneat/spectator\\": \\"7.0.0\\",
    \\"@nrwl/cypress\\": \\"12.5.8\\",
    \\"@nrwl/eslint-plugin-nx\\": \\"12.5.8\\",
    \\"@nrwl/jest\\": \\"12.5.8\\",
    \\"@nrwl/linter\\": \\"12.5.8\\",
    \\"@nrwl/nest\\": \\"12.5.8\\",
    \\"@nrwl/node\\": \\"12.5.8\\",
    \\"@types/fs-extra\\": \\"9.0.12\\",
    \\"@types/jest\\": \\"26.0.8\\",
    \\"@typescript-eslint/eslint-plugin\\": \\"4.19.0\\",
    \\"@typescript-eslint/parser\\": \\"4.19.0\\",
    \\"cypress\\": \\"^7.3.0\\",
    \\"eslint\\": \\"7.22.0\\",
    \\"eslint-config-prettier\\": \\"8.1.0\\",
    \\"eslint-plugin-cypress\\": \\"^2.10.3\\",
    \\"jest\\": \\"27.0.3\\",
    \\"jest-preset-angular\\": \\"9.0.3\\",
    \\"prisma\\": \\"2.27.0\\",
    \\"supertest\\": \\"6.1.3\\",
    \\"ts-jest\\": \\"27.0.3\\",
    \\"typescript\\": \\"~4.3.2\\"
  },
  \\"prisma\\": {
    \\"schema\\": \\"libs/test-api/core/data-access/src/prisma/schema.prisma\\"
  },
  \\"scripts\\": {
    \\"build\\": \\"yarn build:test-web && yarn prisma:generate && yarn build:test-api\\",
    \\"build:sdk\\": \\"graphql-codegen --config libs/shared/util/sdk/src/codegen.yml\\",
    \\"build:test-api\\": \\"nx build test-api --prod\\",
    \\"build:test-web\\": \\"nx build test-web --prod\\",
    \\"dev:sdk\\": \\"yarn build:sdk --watch\\",
    \\"dev:services\\": \\"docker-compose up\\",
    \\"dev:test-api\\": \\"nx serve test-api\\",
    \\"dev:test-web\\": \\"nx serve test-web --hmr\\",
    \\"docker:build\\": \\"docker build . -t proj/test-api\\",
    \\"docker:push\\": \\"docker push proj/test-api\\",
    \\"docker:run\\": \\"docker run -it -p 8000:3000 proj/test-api\\",
    \\"postinstall\\": \\"ngcc --properties es2015 browser module main\\",
    \\"prisma:apply\\": \\"yarn prisma:format && yarn prisma:db-push\\",
    \\"prisma:db-push\\": \\"yarn prisma db push\\",
    \\"prisma:format\\": \\"yarn prisma format\\",
    \\"prisma:generate\\": \\"yarn prisma generate\\",
    \\"prisma:migrate\\": \\"yarn prisma migrate\\",
    \\"prisma:seed\\": \\"yarn nx workspace-generator prisma-seed\\",
    \\"prisma:studio\\": \\"yarn prisma studio\\",
    \\"setup\\": \\"yarn nx workspace-generator workspace-setup\\",
    \\"start\\": \\"yarn prisma:db-push && node dist/apps/api/main.js\\",
    \\"test:ci\\": \\"yarn prisma:apply && yarn e2e api-e2e\\"
  }
}"
`;

exports[`init generator should run successfully with default options 5`] = `
Object {
  "prefix": "util",
  "projectType": "library",
  "root": "libs/shared/util/sdk",
  "sourceRoot": "libs/shared/util/sdk/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/shared/util/sdk/src/**/*.ts",
          "libs/shared/util/sdk/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/shared/util/sdk/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/shared/util/sdk",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 6`] = `
Object {
  "root": "libs/shared/util/sdk",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/codegen.yml",
    "/src/generated/graphql.ts",
    "/src/graphql/feature-account.graphql",
    "/src/graphql/feature-auth.graphql",
    "/src/graphql/feature-core.graphql",
    "/src/graphql/feature-user.graphql",
    "/src/index.ts",
    "/src/lib/shared-util-sdk.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 7`] = `
Object {
  "content": Array [
    Object {
      "content": "overwrite: true
schema: \\"test-api-schema.graphql\\"
documents:
  - \\"libs/shared/util/sdk/src/graphql/**/*.graphql\\"
generates:
  libs/shared/util/sdk/src/generated/graphql.ts:
    config:
      sdkClass: true
    plugins:
      - \\"typescript\\"
      - \\"typescript-operations\\"
      - \\"typescript-apollo-angular\\"
  ./graphql.schema.json:
    plugins:
      - \\"introspection\\"

hooks:
  afterAllFileWrite:
    - prettier --write
",
      "file": "/codegen.yml",
    },
    Object {
      "content": "import { gql } from 'apollo-angular'
import { Injectable } from '@angular/core'
import * as Apollo from 'apollo-angular'
import * as ApolloCore from '@apollo/client/core'
export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: any
  /** The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any
}

export type AccountCreateEmailInput = {
  email: Scalars['String']
}

export type AccountUpdatePasswordInput = {
  currentPassword: Scalars['String']
  password: Scalars['String']
  verified: Scalars['String']
}

export type AccountUpdateProfileInput = {
  avatarUrl?: Maybe<Scalars['String']>
  bio?: Maybe<Scalars['String']>
  dob?: Maybe<Scalars['DateTime']>
  firstName?: Maybe<Scalars['String']>
  lastName?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
}

export type AdminCreateUserInput = {
  email: Scalars['String']
  firstName?: Maybe<Scalars['String']>
  lastName?: Maybe<Scalars['String']>
  role: Role
  username?: Maybe<Scalars['String']>
}

export type AdminUpdateUserInput = {
  avatarUrl?: Maybe<Scalars['String']>
  bio?: Maybe<Scalars['String']>
  firstName?: Maybe<Scalars['String']>
  lastName?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
  role?: Maybe<Role>
  username?: Maybe<Scalars['String']>
}

export type AuthToken = {
  __typename?: 'AuthToken'
  /** JWT Bearer token */
  token: Scalars['String']
}

export type CorePaging = {
  __typename?: 'CorePaging'
  limit?: Maybe<Scalars['Int']>
  skip?: Maybe<Scalars['Int']>
  total?: Maybe<Scalars['Int']>
}

export type CorePagingInput = {
  limit?: Maybe<Scalars['Int']>
  skip?: Maybe<Scalars['Int']>
}

export type Email = {
  __typename?: 'Email'
  createdAt?: Maybe<Scalars['DateTime']>
  email?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['String']>
  primary?: Maybe<Scalars['Boolean']>
  public?: Maybe<Scalars['Boolean']>
  updatedAt?: Maybe<Scalars['DateTime']>
  verified?: Maybe<Scalars['Boolean']>
}

export type IntercomMessage = {
  __typename?: 'IntercomMessage'
  payload?: Maybe<Scalars['JSON']>
  scope?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type LoginInput = {
  email: Scalars['String']
  password: Scalars['String']
}

export type Mutation = {
  __typename?: 'Mutation'
  accountCreateEmail?: Maybe<Email>
  accountDeleteEmail?: Maybe<Email>
  accountMarkEmailPrimary?: Maybe<Email>
  accountMarkEmailPrivate?: Maybe<Email>
  accountMarkEmailPublic?: Maybe<Email>
  accountResetPassword?: Maybe<Scalars['Boolean']>
  accountUpdatePassword?: Maybe<Scalars['Boolean']>
  accountUpdateProfile?: Maybe<User>
  accountUpdateUsername?: Maybe<User>
  adminCreateUser?: Maybe<User>
  adminDeleteUser?: Maybe<User>
  adminSetUserPassword?: Maybe<User>
  adminUpdateUser?: Maybe<User>
  intercomPub?: Maybe<IntercomMessage>
  login?: Maybe<AuthToken>
  logout?: Maybe<Scalars['Boolean']>
  register?: Maybe<AuthToken>
}

export type MutationAccountCreateEmailArgs = {
  input: AccountCreateEmailInput
}

export type MutationAccountDeleteEmailArgs = {
  emailId: Scalars['String']
}

export type MutationAccountMarkEmailPrimaryArgs = {
  emailId: Scalars['String']
}

export type MutationAccountMarkEmailPrivateArgs = {
  emailId: Scalars['String']
}

export type MutationAccountMarkEmailPublicArgs = {
  emailId: Scalars['String']
}

export type MutationAccountUpdatePasswordArgs = {
  input: AccountUpdatePasswordInput
}

export type MutationAccountUpdateProfileArgs = {
  input: AccountUpdateProfileInput
}

export type MutationAccountUpdateUsernameArgs = {
  username: Scalars['String']
}

export type MutationAdminCreateUserArgs = {
  input: AdminCreateUserInput
}

export type MutationAdminDeleteUserArgs = {
  userId: Scalars['String']
}

export type MutationAdminSetUserPasswordArgs = {
  password: Scalars['String']
  userId: Scalars['String']
}

export type MutationAdminUpdateUserArgs = {
  input: AdminUpdateUserInput
  userId: Scalars['String']
}

export type MutationIntercomPubArgs = {
  payload?: Maybe<Scalars['JSON']>
  scope?: Maybe<Scalars['String']>
  type: Scalars['String']
}

export type MutationLoginArgs = {
  input: LoginInput
}

export type MutationRegisterArgs = {
  input: RegisterInput
}

export type Query = {
  __typename?: 'Query'
  accountEmails?: Maybe<Array<Email>>
  accountProfile?: Maybe<User>
  accountUsernameAvailable?: Maybe<Scalars['Boolean']>
  adminCountUsers?: Maybe<CorePaging>
  adminUser?: Maybe<User>
  adminUsers?: Maybe<Array<User>>
  me?: Maybe<User>
  uptime?: Maybe<Scalars['Float']>
}

export type QueryAccountUsernameAvailableArgs = {
  username: Scalars['String']
}

export type QueryAdminCountUsersArgs = {
  paging?: Maybe<CorePagingInput>
}

export type QueryAdminUserArgs = {
  userId: Scalars['String']
}

export type QueryAdminUsersArgs = {
  paging?: Maybe<CorePagingInput>
}

export type RegisterInput = {
  avatarUrl?: Maybe<Scalars['String']>
  email: Scalars['String']
  firstName?: Maybe<Scalars['String']>
  lastName?: Maybe<Scalars['String']>
  password: Scalars['String']
  phone?: Maybe<Scalars['String']>
  username?: Maybe<Scalars['String']>
}

export enum Role {
  Admin = 'Admin',
  User = 'User',
}

export type Subscription = {
  __typename?: 'Subscription'
  intercomSub?: Maybe<IntercomMessage>
}

export type SubscriptionIntercomSubArgs = {
  scope?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type User = {
  __typename?: 'User'
  avatarUrl?: Maybe<Scalars['String']>
  bio?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  email?: Maybe<Scalars['String']>
  emails?: Maybe<Array<Email>>
  firstName?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['String']>
  lastName?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
  role?: Maybe<Role>
  updatedAt?: Maybe<Scalars['DateTime']>
  username?: Maybe<Scalars['String']>
}

export type AccountEmailsQueryVariables = Exact<{ [key: string]: never }>

export type AccountEmailsQuery = { __typename?: 'Query' } & {
  accountEmails?: Maybe<Array<{ __typename?: 'Email' } & EmailDetailsFragment>>
}

export type AccountProfileQueryVariables = Exact<{ [key: string]: never }>

export type AccountProfileQuery = { __typename?: 'Query' } & {
  accountProfile?: Maybe<
    { __typename?: 'User' } & {
      emails?: Maybe<Array<{ __typename?: 'Email' } & EmailDetailsFragment>>
    } & UserDetailsFragment
  >
}

export type AccountUsernameAvailableQueryVariables = Exact<{
  username: Scalars['String']
}>

export type AccountUsernameAvailableQuery = { __typename?: 'Query' } & Pick<Query, 'accountUsernameAvailable'>

export type AccountCreateEmailMutationVariables = Exact<{
  input: AccountCreateEmailInput
}>

export type AccountCreateEmailMutation = { __typename?: 'Mutation' } & {
  accountCreateEmail?: Maybe<{ __typename?: 'Email' } & EmailDetailsFragment>
}

export type AccountDeleteEmailMutationVariables = Exact<{
  emailId: Scalars['String']
}>

export type AccountDeleteEmailMutation = { __typename?: 'Mutation' } & {
  accountDeleteEmail?: Maybe<{ __typename?: 'Email' } & EmailDetailsFragment>
}

export type AccountMarkEmailPrimaryMutationVariables = Exact<{
  emailId: Scalars['String']
}>

export type AccountMarkEmailPrimaryMutation = { __typename?: 'Mutation' } & {
  accountMarkEmailPrimary?: Maybe<{ __typename?: 'Email' } & EmailDetailsFragment>
}

export type AccountMarkEmailPrivateMutationVariables = Exact<{
  emailId: Scalars['String']
}>

export type AccountMarkEmailPrivateMutation = { __typename?: 'Mutation' } & {
  accountMarkEmailPrivate?: Maybe<{ __typename?: 'Email' } & EmailDetailsFragment>
}

export type AccountMarkEmailPublicMutationVariables = Exact<{
  emailId: Scalars['String']
}>

export type AccountMarkEmailPublicMutation = { __typename?: 'Mutation' } & {
  accountMarkEmailPublic?: Maybe<{ __typename?: 'Email' } & EmailDetailsFragment>
}

export type AccountUpdateProfileMutationVariables = Exact<{
  input: AccountUpdateProfileInput
}>

export type AccountUpdateProfileMutation = { __typename?: 'Mutation' } & {
  accountUpdateProfile?: Maybe<{ __typename?: 'User' } & UserDetailsFragment>
}

export type AccountUpdateUsernameMutationVariables = Exact<{
  username: Scalars['String']
}>

export type AccountUpdateUsernameMutation = { __typename?: 'Mutation' } & {
  accountUpdateUsername?: Maybe<{ __typename?: 'User' } & UserDetailsFragment>
}

export type AccountUpdatePasswordMutationVariables = Exact<{
  input: AccountUpdatePasswordInput
}>

export type AccountUpdatePasswordMutation = { __typename?: 'Mutation' } & Pick<Mutation, 'accountUpdatePassword'>

export type AuthTokenDetailsFragment = { __typename?: 'AuthToken' } & Pick<AuthToken, 'token'>

export type MeQueryVariables = Exact<{ [key: string]: never }>

export type MeQuery = { __typename?: 'Query' } & { me?: Maybe<{ __typename?: 'User' } & UserDetailsFragment> }

export type LogoutMutationVariables = Exact<{ [key: string]: never }>

export type LogoutMutation = { __typename?: 'Mutation' } & Pick<Mutation, 'logout'>

export type LoginMutationVariables = Exact<{
  input: LoginInput
}>

export type LoginMutation = { __typename?: 'Mutation' } & {
  login?: Maybe<{ __typename?: 'AuthToken' } & AuthTokenDetailsFragment>
}

export type RegisterMutationVariables = Exact<{
  input: RegisterInput
}>

export type RegisterMutation = { __typename?: 'Mutation' } & {
  register?: Maybe<{ __typename?: 'AuthToken' } & AuthTokenDetailsFragment>
}

export type UptimeQueryVariables = Exact<{ [key: string]: never }>

export type UptimeQuery = { __typename?: 'Query' } & Pick<Query, 'uptime'>

export type CorePagingDetailsFragment = { __typename?: 'CorePaging' } & Pick<CorePaging, 'limit' | 'skip' | 'total'>

export type IntercomDetailsFragment = { __typename?: 'IntercomMessage' } & Pick<
  IntercomMessage,
  'type' | 'scope' | 'payload'
>

export type IntercomPubMutationVariables = Exact<{
  type: Scalars['String']
  scope?: Maybe<Scalars['String']>
  payload?: Maybe<Scalars['JSON']>
}>

export type IntercomPubMutation = { __typename?: 'Mutation' } & {
  intercomPub?: Maybe<{ __typename?: 'IntercomMessage' } & IntercomDetailsFragment>
}

export type IntercomSubSubscriptionVariables = Exact<{ [key: string]: never }>

export type IntercomSubSubscription = { __typename?: 'Subscription' } & {
  intercomSub?: Maybe<{ __typename?: 'IntercomMessage' } & IntercomDetailsFragment>
}

export type UserDetailsFragment = { __typename?: 'User' } & Pick<
  User,
  'id' | 'firstName' | 'lastName' | 'name' | 'username' | 'avatarUrl' | 'email' | 'location' | 'phone' | 'bio' | 'role'
>

export type EmailDetailsFragment = { __typename?: 'Email' } & Pick<
  Email,
  'id' | 'createdAt' | 'updatedAt' | 'email' | 'public' | 'primary' | 'verified'
>

export type AdminUsersQueryVariables = Exact<{
  paging?: Maybe<CorePagingInput>
}>

export type AdminUsersQuery = { __typename?: 'Query' } & {
  users?: Maybe<Array<{ __typename?: 'User' } & UserDetailsFragment>>
  count?: Maybe<{ __typename?: 'CorePaging' } & CorePagingDetailsFragment>
}

export type AdminUserQueryVariables = Exact<{
  userId: Scalars['String']
}>

export type AdminUserQuery = { __typename?: 'Query' } & {
  adminUser?: Maybe<
    { __typename?: 'User' } & {
      emails?: Maybe<Array<{ __typename?: 'Email' } & EmailDetailsFragment>>
    } & UserDetailsFragment
  >
}

export type AdminCreateUserMutationVariables = Exact<{
  input: AdminCreateUserInput
}>

export type AdminCreateUserMutation = { __typename?: 'Mutation' } & {
  adminCreateUser?: Maybe<{ __typename?: 'User' } & UserDetailsFragment>
}

export type AdminUpdateUserMutationVariables = Exact<{
  userId: Scalars['String']
  input: AdminUpdateUserInput
}>

export type AdminUpdateUserMutation = { __typename?: 'Mutation' } & {
  adminUpdateUser?: Maybe<{ __typename?: 'User' } & UserDetailsFragment>
}

export type AdminSetUserPasswordMutationVariables = Exact<{
  userId: Scalars['String']
  password: Scalars['String']
}>

export type AdminSetUserPasswordMutation = { __typename?: 'Mutation' } & {
  adminSetUserPassword?: Maybe<{ __typename?: 'User' } & UserDetailsFragment>
}

export type AdminDeleteUserMutationVariables = Exact<{
  userId: Scalars['String']
}>

export type AdminDeleteUserMutation = { __typename?: 'Mutation' } & {
  adminDeleteUser?: Maybe<{ __typename?: 'User' } & UserDetailsFragment>
}

export const AuthTokenDetailsFragmentDoc = gql\`
  fragment AuthTokenDetails on AuthToken {
    token
  }
\`
export const CorePagingDetailsFragmentDoc = gql\`
  fragment CorePagingDetails on CorePaging {
    limit
    skip
    total
  }
\`
export const IntercomDetailsFragmentDoc = gql\`
  fragment IntercomDetails on IntercomMessage {
    type
    scope
    payload
  }
\`
export const UserDetailsFragmentDoc = gql\`
  fragment UserDetails on User {
    id
    firstName
    lastName
    name
    username
    avatarUrl
    email
    location
    phone
    bio
    role
  }
\`
export const EmailDetailsFragmentDoc = gql\`
  fragment EmailDetails on Email {
    id
    createdAt
    updatedAt
    email
    public
    primary
    verified
  }
\`
export const AccountEmailsDocument = gql\`
  query AccountEmails {
    accountEmails {
      ...EmailDetails
    }
  }
  \${EmailDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AccountEmailsGQL extends Apollo.Query<AccountEmailsQuery, AccountEmailsQueryVariables> {
  document = AccountEmailsDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AccountProfileDocument = gql\`
  query AccountProfile {
    accountProfile {
      ...UserDetails
      emails {
        ...EmailDetails
      }
    }
  }
  \${UserDetailsFragmentDoc}
  \${EmailDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AccountProfileGQL extends Apollo.Query<AccountProfileQuery, AccountProfileQueryVariables> {
  document = AccountProfileDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AccountUsernameAvailableDocument = gql\`
  query AccountUsernameAvailable($username: String!) {
    accountUsernameAvailable(username: $username)
  }
\`

@Injectable({
  providedIn: 'root',
})
export class AccountUsernameAvailableGQL extends Apollo.Query<
  AccountUsernameAvailableQuery,
  AccountUsernameAvailableQueryVariables
> {
  document = AccountUsernameAvailableDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AccountCreateEmailDocument = gql\`
  mutation AccountCreateEmail($input: AccountCreateEmailInput!) {
    accountCreateEmail(input: $input) {
      ...EmailDetails
    }
  }
  \${EmailDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AccountCreateEmailGQL extends Apollo.Mutation<
  AccountCreateEmailMutation,
  AccountCreateEmailMutationVariables
> {
  document = AccountCreateEmailDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AccountDeleteEmailDocument = gql\`
  mutation AccountDeleteEmail($emailId: String!) {
    accountDeleteEmail(emailId: $emailId) {
      ...EmailDetails
    }
  }
  \${EmailDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AccountDeleteEmailGQL extends Apollo.Mutation<
  AccountDeleteEmailMutation,
  AccountDeleteEmailMutationVariables
> {
  document = AccountDeleteEmailDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AccountMarkEmailPrimaryDocument = gql\`
  mutation AccountMarkEmailPrimary($emailId: String!) {
    accountMarkEmailPrimary(emailId: $emailId) {
      ...EmailDetails
    }
  }
  \${EmailDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AccountMarkEmailPrimaryGQL extends Apollo.Mutation<
  AccountMarkEmailPrimaryMutation,
  AccountMarkEmailPrimaryMutationVariables
> {
  document = AccountMarkEmailPrimaryDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AccountMarkEmailPrivateDocument = gql\`
  mutation AccountMarkEmailPrivate($emailId: String!) {
    accountMarkEmailPrivate(emailId: $emailId) {
      ...EmailDetails
    }
  }
  \${EmailDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AccountMarkEmailPrivateGQL extends Apollo.Mutation<
  AccountMarkEmailPrivateMutation,
  AccountMarkEmailPrivateMutationVariables
> {
  document = AccountMarkEmailPrivateDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AccountMarkEmailPublicDocument = gql\`
  mutation AccountMarkEmailPublic($emailId: String!) {
    accountMarkEmailPublic(emailId: $emailId) {
      ...EmailDetails
    }
  }
  \${EmailDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AccountMarkEmailPublicGQL extends Apollo.Mutation<
  AccountMarkEmailPublicMutation,
  AccountMarkEmailPublicMutationVariables
> {
  document = AccountMarkEmailPublicDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AccountUpdateProfileDocument = gql\`
  mutation AccountUpdateProfile($input: AccountUpdateProfileInput!) {
    accountUpdateProfile(input: $input) {
      ...UserDetails
    }
  }
  \${UserDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AccountUpdateProfileGQL extends Apollo.Mutation<
  AccountUpdateProfileMutation,
  AccountUpdateProfileMutationVariables
> {
  document = AccountUpdateProfileDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AccountUpdateUsernameDocument = gql\`
  mutation AccountUpdateUsername($username: String!) {
    accountUpdateUsername(username: $username) {
      ...UserDetails
    }
  }
  \${UserDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AccountUpdateUsernameGQL extends Apollo.Mutation<
  AccountUpdateUsernameMutation,
  AccountUpdateUsernameMutationVariables
> {
  document = AccountUpdateUsernameDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AccountUpdatePasswordDocument = gql\`
  mutation AccountUpdatePassword($input: AccountUpdatePasswordInput!) {
    accountUpdatePassword(input: $input)
  }
\`

@Injectable({
  providedIn: 'root',
})
export class AccountUpdatePasswordGQL extends Apollo.Mutation<
  AccountUpdatePasswordMutation,
  AccountUpdatePasswordMutationVariables
> {
  document = AccountUpdatePasswordDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const MeDocument = gql\`
  query me {
    me {
      ...UserDetails
    }
  }
  \${UserDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class MeGQL extends Apollo.Query<MeQuery, MeQueryVariables> {
  document = MeDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const LogoutDocument = gql\`
  mutation Logout {
    logout
  }
\`

@Injectable({
  providedIn: 'root',
})
export class LogoutGQL extends Apollo.Mutation<LogoutMutation, LogoutMutationVariables> {
  document = LogoutDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const LoginDocument = gql\`
  mutation Login($input: LoginInput!) {
    login(input: $input) {
      ...AuthTokenDetails
    }
  }
  \${AuthTokenDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class LoginGQL extends Apollo.Mutation<LoginMutation, LoginMutationVariables> {
  document = LoginDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const RegisterDocument = gql\`
  mutation Register($input: RegisterInput!) {
    register(input: $input) {
      ...AuthTokenDetails
    }
  }
  \${AuthTokenDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class RegisterGQL extends Apollo.Mutation<RegisterMutation, RegisterMutationVariables> {
  document = RegisterDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const UptimeDocument = gql\`
  query Uptime {
    uptime
  }
\`

@Injectable({
  providedIn: 'root',
})
export class UptimeGQL extends Apollo.Query<UptimeQuery, UptimeQueryVariables> {
  document = UptimeDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const IntercomPubDocument = gql\`
  mutation IntercomPub($type: String!, $scope: String, $payload: JSON) {
    intercomPub(type: $type, scope: $scope, payload: $payload) {
      ...IntercomDetails
    }
  }
  \${IntercomDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class IntercomPubGQL extends Apollo.Mutation<IntercomPubMutation, IntercomPubMutationVariables> {
  document = IntercomPubDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const IntercomSubDocument = gql\`
  subscription IntercomSub {
    intercomSub {
      ...IntercomDetails
    }
  }
  \${IntercomDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class IntercomSubGQL extends Apollo.Subscription<IntercomSubSubscription, IntercomSubSubscriptionVariables> {
  document = IntercomSubDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AdminUsersDocument = gql\`
  query AdminUsers($paging: CorePagingInput) {
    users: adminUsers(paging: $paging) {
      ...UserDetails
    }
    count: adminCountUsers(paging: $paging) {
      ...CorePagingDetails
    }
  }
  \${UserDetailsFragmentDoc}
  \${CorePagingDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AdminUsersGQL extends Apollo.Query<AdminUsersQuery, AdminUsersQueryVariables> {
  document = AdminUsersDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AdminUserDocument = gql\`
  query AdminUser($userId: String!) {
    adminUser(userId: $userId) {
      ...UserDetails
      emails {
        ...EmailDetails
      }
    }
  }
  \${UserDetailsFragmentDoc}
  \${EmailDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AdminUserGQL extends Apollo.Query<AdminUserQuery, AdminUserQueryVariables> {
  document = AdminUserDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AdminCreateUserDocument = gql\`
  mutation AdminCreateUser($input: AdminCreateUserInput!) {
    adminCreateUser(input: $input) {
      ...UserDetails
    }
  }
  \${UserDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AdminCreateUserGQL extends Apollo.Mutation<AdminCreateUserMutation, AdminCreateUserMutationVariables> {
  document = AdminCreateUserDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AdminUpdateUserDocument = gql\`
  mutation AdminUpdateUser($userId: String!, $input: AdminUpdateUserInput!) {
    adminUpdateUser(userId: $userId, input: $input) {
      ...UserDetails
    }
  }
  \${UserDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AdminUpdateUserGQL extends Apollo.Mutation<AdminUpdateUserMutation, AdminUpdateUserMutationVariables> {
  document = AdminUpdateUserDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AdminSetUserPasswordDocument = gql\`
  mutation AdminSetUserPassword($userId: String!, $password: String!) {
    adminSetUserPassword(userId: $userId, password: $password) {
      ...UserDetails
    }
  }
  \${UserDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AdminSetUserPasswordGQL extends Apollo.Mutation<
  AdminSetUserPasswordMutation,
  AdminSetUserPasswordMutationVariables
> {
  document = AdminSetUserPasswordDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}
export const AdminDeleteUserDocument = gql\`
  mutation AdminDeleteUser($userId: String!) {
    adminDeleteUser(userId: $userId) {
      ...UserDetails
    }
  }
  \${UserDetailsFragmentDoc}
\`

@Injectable({
  providedIn: 'root',
})
export class AdminDeleteUserGQL extends Apollo.Mutation<AdminDeleteUserMutation, AdminDeleteUserMutationVariables> {
  document = AdminDeleteUserDocument

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>

interface WatchQueryOptionsAlone<V> extends Omit<ApolloCore.WatchQueryOptions<V>, 'query' | 'variables'> {}

interface QueryOptionsAlone<V> extends Omit<ApolloCore.QueryOptions<V>, 'query' | 'variables'> {}

interface MutationOptionsAlone<T, V> extends Omit<ApolloCore.MutationOptions<T, V>, 'mutation' | 'variables'> {}

interface SubscriptionOptionsAlone<V> extends Omit<ApolloCore.SubscriptionOptions<V>, 'query' | 'variables'> {}

@Injectable({ providedIn: 'root' })
export class ApolloAngularSDK {
  constructor(
    private accountEmailsGql: AccountEmailsGQL,
    private accountProfileGql: AccountProfileGQL,
    private accountUsernameAvailableGql: AccountUsernameAvailableGQL,
    private accountCreateEmailGql: AccountCreateEmailGQL,
    private accountDeleteEmailGql: AccountDeleteEmailGQL,
    private accountMarkEmailPrimaryGql: AccountMarkEmailPrimaryGQL,
    private accountMarkEmailPrivateGql: AccountMarkEmailPrivateGQL,
    private accountMarkEmailPublicGql: AccountMarkEmailPublicGQL,
    private accountUpdateProfileGql: AccountUpdateProfileGQL,
    private accountUpdateUsernameGql: AccountUpdateUsernameGQL,
    private accountUpdatePasswordGql: AccountUpdatePasswordGQL,
    private meGql: MeGQL,
    private logoutGql: LogoutGQL,
    private loginGql: LoginGQL,
    private registerGql: RegisterGQL,
    private uptimeGql: UptimeGQL,
    private intercomPubGql: IntercomPubGQL,
    private intercomSubGql: IntercomSubGQL,
    private adminUsersGql: AdminUsersGQL,
    private adminUserGql: AdminUserGQL,
    private adminCreateUserGql: AdminCreateUserGQL,
    private adminUpdateUserGql: AdminUpdateUserGQL,
    private adminSetUserPasswordGql: AdminSetUserPasswordGQL,
    private adminDeleteUserGql: AdminDeleteUserGQL,
  ) {}

  accountEmails(variables?: AccountEmailsQueryVariables, options?: QueryOptionsAlone<AccountEmailsQueryVariables>) {
    return this.accountEmailsGql.fetch(variables, options)
  }

  accountEmailsWatch(
    variables?: AccountEmailsQueryVariables,
    options?: WatchQueryOptionsAlone<AccountEmailsQueryVariables>,
  ) {
    return this.accountEmailsGql.watch(variables, options)
  }

  accountProfile(variables?: AccountProfileQueryVariables, options?: QueryOptionsAlone<AccountProfileQueryVariables>) {
    return this.accountProfileGql.fetch(variables, options)
  }

  accountProfileWatch(
    variables?: AccountProfileQueryVariables,
    options?: WatchQueryOptionsAlone<AccountProfileQueryVariables>,
  ) {
    return this.accountProfileGql.watch(variables, options)
  }

  accountUsernameAvailable(
    variables: AccountUsernameAvailableQueryVariables,
    options?: QueryOptionsAlone<AccountUsernameAvailableQueryVariables>,
  ) {
    return this.accountUsernameAvailableGql.fetch(variables, options)
  }

  accountUsernameAvailableWatch(
    variables: AccountUsernameAvailableQueryVariables,
    options?: WatchQueryOptionsAlone<AccountUsernameAvailableQueryVariables>,
  ) {
    return this.accountUsernameAvailableGql.watch(variables, options)
  }

  accountCreateEmail(
    variables: AccountCreateEmailMutationVariables,
    options?: MutationOptionsAlone<AccountCreateEmailMutation, AccountCreateEmailMutationVariables>,
  ) {
    return this.accountCreateEmailGql.mutate(variables, options)
  }

  accountDeleteEmail(
    variables: AccountDeleteEmailMutationVariables,
    options?: MutationOptionsAlone<AccountDeleteEmailMutation, AccountDeleteEmailMutationVariables>,
  ) {
    return this.accountDeleteEmailGql.mutate(variables, options)
  }

  accountMarkEmailPrimary(
    variables: AccountMarkEmailPrimaryMutationVariables,
    options?: MutationOptionsAlone<AccountMarkEmailPrimaryMutation, AccountMarkEmailPrimaryMutationVariables>,
  ) {
    return this.accountMarkEmailPrimaryGql.mutate(variables, options)
  }

  accountMarkEmailPrivate(
    variables: AccountMarkEmailPrivateMutationVariables,
    options?: MutationOptionsAlone<AccountMarkEmailPrivateMutation, AccountMarkEmailPrivateMutationVariables>,
  ) {
    return this.accountMarkEmailPrivateGql.mutate(variables, options)
  }

  accountMarkEmailPublic(
    variables: AccountMarkEmailPublicMutationVariables,
    options?: MutationOptionsAlone<AccountMarkEmailPublicMutation, AccountMarkEmailPublicMutationVariables>,
  ) {
    return this.accountMarkEmailPublicGql.mutate(variables, options)
  }

  accountUpdateProfile(
    variables: AccountUpdateProfileMutationVariables,
    options?: MutationOptionsAlone<AccountUpdateProfileMutation, AccountUpdateProfileMutationVariables>,
  ) {
    return this.accountUpdateProfileGql.mutate(variables, options)
  }

  accountUpdateUsername(
    variables: AccountUpdateUsernameMutationVariables,
    options?: MutationOptionsAlone<AccountUpdateUsernameMutation, AccountUpdateUsernameMutationVariables>,
  ) {
    return this.accountUpdateUsernameGql.mutate(variables, options)
  }

  accountUpdatePassword(
    variables: AccountUpdatePasswordMutationVariables,
    options?: MutationOptionsAlone<AccountUpdatePasswordMutation, AccountUpdatePasswordMutationVariables>,
  ) {
    return this.accountUpdatePasswordGql.mutate(variables, options)
  }

  me(variables?: MeQueryVariables, options?: QueryOptionsAlone<MeQueryVariables>) {
    return this.meGql.fetch(variables, options)
  }

  meWatch(variables?: MeQueryVariables, options?: WatchQueryOptionsAlone<MeQueryVariables>) {
    return this.meGql.watch(variables, options)
  }

  logout(variables?: LogoutMutationVariables, options?: MutationOptionsAlone<LogoutMutation, LogoutMutationVariables>) {
    return this.logoutGql.mutate(variables, options)
  }

  login(variables: LoginMutationVariables, options?: MutationOptionsAlone<LoginMutation, LoginMutationVariables>) {
    return this.loginGql.mutate(variables, options)
  }

  register(
    variables: RegisterMutationVariables,
    options?: MutationOptionsAlone<RegisterMutation, RegisterMutationVariables>,
  ) {
    return this.registerGql.mutate(variables, options)
  }

  uptime(variables?: UptimeQueryVariables, options?: QueryOptionsAlone<UptimeQueryVariables>) {
    return this.uptimeGql.fetch(variables, options)
  }

  uptimeWatch(variables?: UptimeQueryVariables, options?: WatchQueryOptionsAlone<UptimeQueryVariables>) {
    return this.uptimeGql.watch(variables, options)
  }

  intercomPub(
    variables: IntercomPubMutationVariables,
    options?: MutationOptionsAlone<IntercomPubMutation, IntercomPubMutationVariables>,
  ) {
    return this.intercomPubGql.mutate(variables, options)
  }

  intercomSub(
    variables?: IntercomSubSubscriptionVariables,
    options?: SubscriptionOptionsAlone<IntercomSubSubscriptionVariables>,
  ) {
    return this.intercomSubGql.subscribe(variables, options)
  }

  adminUsers(variables?: AdminUsersQueryVariables, options?: QueryOptionsAlone<AdminUsersQueryVariables>) {
    return this.adminUsersGql.fetch(variables, options)
  }

  adminUsersWatch(variables?: AdminUsersQueryVariables, options?: WatchQueryOptionsAlone<AdminUsersQueryVariables>) {
    return this.adminUsersGql.watch(variables, options)
  }

  adminUser(variables: AdminUserQueryVariables, options?: QueryOptionsAlone<AdminUserQueryVariables>) {
    return this.adminUserGql.fetch(variables, options)
  }

  adminUserWatch(variables: AdminUserQueryVariables, options?: WatchQueryOptionsAlone<AdminUserQueryVariables>) {
    return this.adminUserGql.watch(variables, options)
  }

  adminCreateUser(
    variables: AdminCreateUserMutationVariables,
    options?: MutationOptionsAlone<AdminCreateUserMutation, AdminCreateUserMutationVariables>,
  ) {
    return this.adminCreateUserGql.mutate(variables, options)
  }

  adminUpdateUser(
    variables: AdminUpdateUserMutationVariables,
    options?: MutationOptionsAlone<AdminUpdateUserMutation, AdminUpdateUserMutationVariables>,
  ) {
    return this.adminUpdateUserGql.mutate(variables, options)
  }

  adminSetUserPassword(
    variables: AdminSetUserPasswordMutationVariables,
    options?: MutationOptionsAlone<AdminSetUserPasswordMutation, AdminSetUserPasswordMutationVariables>,
  ) {
    return this.adminSetUserPasswordGql.mutate(variables, options)
  }

  adminDeleteUser(
    variables: AdminDeleteUserMutationVariables,
    options?: MutationOptionsAlone<AdminDeleteUserMutation, AdminDeleteUserMutationVariables>,
  ) {
    return this.adminDeleteUserGql.mutate(variables, options)
  }
}
",
      "file": "/generated/graphql.ts",
    },
    Object {
      "content": "query AccountEmails {
  accountEmails {
    ...EmailDetails
  }
}

query AccountProfile {
  accountProfile {
    ...UserDetails
    emails {
      ...EmailDetails
    }
  }
}

query AccountUsernameAvailable($username: String!) {
  accountUsernameAvailable(username: $username)
}

mutation AccountCreateEmail($input: AccountCreateEmailInput!) {
  accountCreateEmail(input: $input) {
    ...EmailDetails
  }
}

mutation AccountDeleteEmail($emailId: String!) {
  accountDeleteEmail(emailId: $emailId) {
    ...EmailDetails
  }
}

mutation AccountMarkEmailPrimary($emailId: String!) {
  accountMarkEmailPrimary(emailId: $emailId) {
    ...EmailDetails
  }
}

mutation AccountMarkEmailPrivate($emailId: String!) {
  accountMarkEmailPrivate(emailId: $emailId) {
    ...EmailDetails
  }
}

mutation AccountMarkEmailPublic($emailId: String!) {
  accountMarkEmailPublic(emailId: $emailId) {
    ...EmailDetails
  }
}

mutation AccountUpdateProfile($input: AccountUpdateProfileInput!) {
  accountUpdateProfile(input: $input) {
    ...UserDetails
  }
}

mutation AccountUpdateUsername($username: String!) {
  accountUpdateUsername(username: $username) {
    ...UserDetails
  }
}

mutation AccountUpdatePassword($input: AccountUpdatePasswordInput!) {
  accountUpdatePassword(input: $input)
}
",
      "file": "/graphql/feature-account.graphql",
    },
    Object {
      "content": "fragment AuthTokenDetails on AuthToken {
  token
}

query me {
  me {
    ...UserDetails
  }
}

mutation Logout {
  logout
}

mutation Login($input: LoginInput!) {
  login(input: $input) {
    ...AuthTokenDetails
  }
}

mutation Register($input: RegisterInput!) {
  register(input: $input) {
    ...AuthTokenDetails
  }
}
",
      "file": "/graphql/feature-auth.graphql",
    },
    Object {
      "content": "query Uptime {
  uptime
}

fragment CorePagingDetails on CorePaging {
  limit
  skip
  total
}

fragment IntercomDetails on IntercomMessage {
  type
  scope
  payload
}

mutation IntercomPub($type: String! $scope: String $payload: JSON) {
  intercomPub(
    type: $type
    scope: $scope
    payload: $payload
  ) {
    ...IntercomDetails
  }
}

subscription IntercomSub {
  intercomSub {
    ...IntercomDetails
  }
}
",
      "file": "/graphql/feature-core.graphql",
    },
    Object {
      "content": "fragment UserDetails on User {
  id
  firstName
  lastName
  name
  username
  avatarUrl
  email
  location
  phone
  bio
  role
}

fragment EmailDetails on Email {
  id
  createdAt
  updatedAt
  email
  public
  primary
  verified
}

query AdminUsers($paging: CorePagingInput) {
  users: adminUsers(paging: $paging) {
    ...UserDetails
  }
  count: adminCountUsers(paging: $paging) {
    ...CorePagingDetails
  }
}

query AdminUser($userId: String!) {
  adminUser(userId: $userId) {
    ...UserDetails
    emails {
      ...EmailDetails
    }
  }
}

mutation AdminCreateUser($input: AdminCreateUserInput!) {
  adminCreateUser(input: $input) {
    ...UserDetails
  }
}

mutation AdminUpdateUser($userId: String!, $input: AdminUpdateUserInput!) {
  adminUpdateUser(userId: $userId, input: $input) {
    ...UserDetails
  }
}

mutation AdminSetUserPassword($userId: String!, $password: String!) {
  adminSetUserPassword(userId: $userId, password: $password) {
    ...UserDetails
  }
}

mutation AdminDeleteUser($userId: String!) {
  adminDeleteUser(userId: $userId) {
    ...UserDetails
  }
}
",
      "file": "/graphql/feature-user.graphql",
    },
    Object {
      "content": "export * from './generated/graphql'
",
      "file": "/index.ts",
    },
    Object {
      "content": "
        import { NgModule } from '@angular/core';
        import { CommonModule } from '@angular/common';
        
        @NgModule({
          imports: [
            CommonModule
          ]
        })
        export class SharedUtilSdkModule { }
        ",
      "file": "/lib/shared-util-sdk.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/shared/util/sdk/src",
}
`;

exports[`init generator should run successfully with default options 8`] = `
Object {
  "projectType": "application",
  "root": "apps/test-api",
  "sourceRoot": "apps/test-api/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "production": Object {
          "extractLicenses": true,
          "fileReplacements": Array [
            Object {
              "replace": "apps/test-api/src/environments/environment.ts",
              "with": "apps/test-api/src/environments/environment.prod.ts",
            },
          ],
          "inspect": false,
          "optimization": true,
        },
      },
      "executor": "@nrwl/node:build",
      "options": Object {
        "assets": Array [
          "apps/test-api/src/assets",
        ],
        "main": "apps/test-api/src/main.ts",
        "outputPath": "dist/apps/test-api",
        "tsConfig": "apps/test-api/tsconfig.app.json",
      },
      "outputs": Array [
        "{options.outputPath}",
      ],
    },
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "apps/test-api/**/*.ts",
        ],
      },
    },
    "serve": Object {
      "executor": "@nrwl/node:execute",
      "options": Object {
        "buildTarget": "test-api:build",
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "apps/test-api/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/apps/test-api",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 9`] = `
Object {
  "root": "apps/test-api",
  "tree": Array [
    "/.eslintrc.json",
    "/jest.config.js",
    "/src/app/app.module.ts",
    "/src/assets/.gitkeep",
    "/src/environments/environment.prod.ts",
    "/src/environments/environment.ts",
    "/src/main.ts",
    "/tsconfig.app.json",
    "/tsconfig.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 10`] = `
Object {
  "content": Array [
    Object {
      "content": "import { Logger, Module } from '@nestjs/common'
import { ServeStaticModule } from '@nestjs/serve-static'
import { TestApiCoreFeatureModule } from '@proj/test-api/core/feature'
import { ensureDirSync, existsSync, writeFileSync } from 'fs-extra'
import { join } from 'path'

const rootPath = join(__dirname, '..', 'test-web')

@Module({
  imports: [
    TestApiCoreFeatureModule,
    ServeStaticModule.forRoot({
      rootPath,
      exclude: ['/api/*', '/graphql'],
    }),
  ],
})
export class AppModule {
  constructor() {
    if (!existsSync(rootPath)) {
      ensureDirSync(rootPath)
      writeFileSync(join(rootPath, 'index.html'), \`<pre>@nxpm/stack api</pre>\`)
      Logger.verbose(\`Created static root path \${rootPath}\`)
    }
  }
}
",
      "file": "/app/app.module.ts",
    },
    Object {
      "content": "",
      "file": "/assets/.gitkeep",
    },
    Object {
      "content": "export const environment = {
  production: true,
}
",
      "file": "/environments/environment.prod.ts",
    },
    Object {
      "content": "export const environment = {
  production: false,
}
",
      "file": "/environments/environment.ts",
    },
    Object {
      "content": "import { TestApiCoreUtilService } from '@proj/test-api/core/util'
import { Logger } from '@nestjs/common'
import { NestFactory } from '@nestjs/core'
import * as cookieParser from 'cookie-parser'

import { AppModule } from './app/app.module'

async function bootstrap() {
  const app = await NestFactory.create(AppModule)
  const config = app.get(TestApiCoreUtilService)
  const globalPrefix = 'api'
  app.setGlobalPrefix(globalPrefix)
  app.enableCors({
    credentials: true,
    origin: config.apiCorsOrigins,
  })
  app.use(cookieParser())
  const port = process.env.PORT || 3333
  await app.listen(port, () => {
    Logger.log('Listening at http://localhost:' + port + '/' + globalPrefix)
    Logger.log('Listening at http://localhost:' + port + '/graphql')
  })
}

bootstrap()
",
      "file": "/main.ts",
    },
  ],
  "root": "apps/test-api/src",
}
`;

exports[`init generator should run successfully with default options 11`] = `
Object {
  "projectType": "library",
  "root": "libs/test-api/account/data-access",
  "sourceRoot": "libs/test-api/account/data-access/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-api/account/data-access/**/*.ts",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-api/account/data-access/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-api/account/data-access",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 12`] = `
Object {
  "root": "libs/test-api/account/data-access",
  "tree": Array [
    "/.babelrc",
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/dto/account-create-email.input.ts",
    "/src/lib/dto/account-update-password.input.ts",
    "/src/lib/dto/account-update-profile.input.ts",
    "/src/lib/test-api-account-data-access.module.ts",
    "/src/lib/test-api-account-data-access.service.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 13`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-api-account-data-access.module'
export * from './lib/test-api-account-data-access.service'
export * from './lib/dto/account-create-email.input'
export * from './lib/dto/account-update-password.input'
export * from './lib/dto/account-update-profile.input'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { InputType, Field } from '@nestjs/graphql'
import { IsEmail } from 'class-validator'

@InputType()
export class AccountCreateEmailInput {
  @Field()
  @IsEmail()
  email: string
}
",
      "file": "/lib/dto/account-create-email.input.ts",
    },
    Object {
      "content": "import { Field, InputType } from '@nestjs/graphql'
import { MinLength } from 'class-validator'

@InputType()
export class AccountUpdatePasswordInput {
  @Field()
  currentPassword?: string

  @Field()
  @MinLength(10)
  password?: string

  @Field()
  @MinLength(10)
  verified?: string
}
",
      "file": "/lib/dto/account-update-password.input.ts",
    },
    Object {
      "content": "import { Field, InputType } from '@nestjs/graphql'

@InputType()
export class AccountUpdateProfileInput {
  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string

  @Field({ nullable: true })
  avatarUrl?: string

  @Field({ nullable: true })
  bio?: string

  @Field({ nullable: true })
  location?: string

  @Field({ nullable: true })
  phone?: string

  @Field({ nullable: true })
  dob?: Date
}
",
      "file": "/lib/dto/account-update-profile.input.ts",
    },
    Object {
      "content": "import { Module } from '@nestjs/common'
import { TestApiCoreDataAccessModule } from '@proj/test-api/core/data-access'

import { TestApiAccountDataAccessService } from './test-api-account-data-access.service'

@Module({
  imports: [TestApiCoreDataAccessModule],
  providers: [TestApiAccountDataAccessService],
  exports: [TestApiAccountDataAccessService],
})
export class TestApiAccountDataAccessModule {}
",
      "file": "/lib/test-api-account-data-access.module.ts",
    },
    Object {
      "content": "import { BadRequestException, Injectable, Logger, UnauthorizedException } from '@nestjs/common'
import { TestApiCoreDataAccessService } from '@proj/test-api/core/data-access'
import { hashPassword, validatePassword } from '@proj/test-api/core/util'
import { Prisma } from '@prisma/client'
import { AccountCreateEmailInput } from './dto/account-create-email.input'
import { AccountUpdatePasswordInput } from './dto/account-update-password.input'
import { AccountUpdateProfileInput } from './dto/account-update-profile.input'

@Injectable()
export class TestApiAccountDataAccessService {
  constructor(private readonly data: TestApiCoreDataAccessService) {}

  accountEmails(userId: string) {
    return this.data.email.findMany({ where: { owner: { id: userId } }, orderBy: { primary: 'desc' } })
  }

  accountProfile(userId: string) {
    return this.data.findUserById(userId)
  }

  async accountCreateEmail(userId: string, input: AccountCreateEmailInput) {
    const exists = await this.data.findUserByEmail(input.email)
    if (exists) {
      throw new BadRequestException(\`Can't add email address \${input.email}\`)
    }
    return this.data.email.create({ data: { ownerId: userId, email: input.email, primary: false } })
  }

  async accountDeleteEmail(userId: string, userEmailId: string) {
    const owner = await this.data.email.findUnique({ where: { id: userEmailId } }).owner()
    if (owner.id !== userId) {
      throw new UnauthorizedException()
    }
    const email = await this.data.email.findUnique({ where: { id: userEmailId } })
    if (email.primary) {
      throw new BadRequestException(\`You can't delete your primary email\`)
    }
    return this.data.email.delete({ where: { id: userEmailId } })
  }

  accountUpdateProfile(userId: string, input: AccountUpdateProfileInput) {
    return this.data.user.update({
      where: { id: userId },
      data: {
        avatarUrl: input.avatarUrl,
        firstName: input.firstName,
        lastName: input.lastName,
        bio: input.bio,
        location: input.location,
        phone: input.phone,
      },
    })
  }

  async accountUpdateUsername(userId: string, username: string) {
    const available = await this.accountUsernameAvailable(userId, username)

    if (!available) {
      throw new BadRequestException(\`Username \${username} is not available\`)
    }

    return this.data.user.update({ where: { id: userId }, data: { username } })
  }

  async accountUsernameAvailable(userId: string, username: string): Promise<boolean> {
    const denied = await this.data.usernameDenyList(username)

    if (denied) {
      throw new BadRequestException(\`Username \${username} is not available\`)
    }

    const count = await this.data.user.count({
      where: { username },
    })
    return count === 0
  }

  async userEmailOwner(userId: string, userEmailId: string) {
    const owner = await this.data.email.findUnique({ where: { id: userEmailId } }).owner()
    if (owner.id !== userId) {
      throw new UnauthorizedException()
    }
    return owner
  }

  async updateUserEmail(userId: string, userEmailId: string, input: Prisma.EmailUpdateInput) {
    await this.userEmailOwner(userId, userEmailId)
    return this.data.email.update({ where: { id: userEmailId }, data: { ...input } })
  }

  async accountMarkEmailPrivate(userId: string, userEmailId: string) {
    return this.updateUserEmail(userId, userEmailId, { public: false })
  }

  async accountMarkEmailPublic(userId: string, userEmailId: string) {
    return this.updateUserEmail(userId, userEmailId, { public: true })
  }

  async accountMarkEmailPrimary(userId: string, userEmailId: string) {
    // Check if we are the owner
    await this.userEmailOwner(userId, userEmailId)
    // Mark all emails as non primary
    await this.data.email.updateMany({
      where: { owner: { id: userId } },
      data: { primary: false },
    })
    // Mark the chosen one
    return this.updateUserEmail(userId, userEmailId, { primary: true })
  }

  async accountResetPassword(userId: string) {
    const emails = await this.accountEmails(userId)
    const primary = emails.find((email) => email.primary)

    if (!primary) {
      throw new BadRequestException(\`Could not find primary email for user with id \${userId}\`)
    }
    Logger.verbose(\`TODO: Implement Account Reset Password\`)
    // await this.auth.forgotPassword(primary.email)
    return true
  }

  async accountUpdatePassword(userId: string, input: AccountUpdatePasswordInput) {
    const user = await this.data.findUserById(userId)
    // We need to make sure the user provides the correct current password
    await validatePassword(input.currentPassword, user.password)

    // The new password must be the same as the verified new password
    if (input.password !== input.verified) {
      throw new BadRequestException(\`Passwords do not match!\`)
    }
    // We can now update the password
    await this.data.user.update({ where: { id: userId }, data: { password: hashPassword(input.password) } })
    return true
  }
}
",
      "file": "/lib/test-api-account-data-access.service.ts",
    },
  ],
  "root": "libs/test-api/account/data-access/src",
}
`;

exports[`init generator should run successfully with default options 14`] = `
Object {
  "projectType": "library",
  "root": "libs/test-api/account/feature",
  "sourceRoot": "libs/test-api/account/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-api/account/feature/**/*.ts",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-api/account/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-api/account/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 15`] = `
Object {
  "root": "libs/test-api/account/feature",
  "tree": Array [
    "/.babelrc",
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-api-account-feature.module.ts",
    "/src/lib/test-api-account-feature.resolver.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 16`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-api-account-feature.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Module } from '@nestjs/common'
import { TestApiAccountDataAccessModule } from '@proj/test-api/account/data-access'

import { TestApiAccountFeatureResolver } from './test-api-account-feature.resolver'

@Module({
  imports: [TestApiAccountDataAccessModule],
  providers: [TestApiAccountFeatureResolver],
})
export class TestApiAccountFeatureModule {}
",
      "file": "/lib/test-api-account-feature.module.ts",
    },
    Object {
      "content": "import { UseGuards, ValidationPipe } from '@nestjs/common'
import { Args, Mutation, Query, Resolver } from '@nestjs/graphql'
import {
  AccountCreateEmailInput,
  AccountUpdatePasswordInput,
  AccountUpdateProfileInput,
  TestApiAccountDataAccessService,
} from '@proj/test-api/account/data-access'
import { CtxUser, GqlAuthGuard } from '@proj/test-api/auth/util'
import { Email, User } from '@proj/test-api/user/data-access'

@Resolver()
@UseGuards(GqlAuthGuard)
export class TestApiAccountFeatureResolver {
  constructor(private readonly service: TestApiAccountDataAccessService) {}

  @Query(() => [Email], { nullable: true })
  accountEmails(@CtxUser() user: User) {
    return this.service.accountEmails(user.id)
  }

  @Query(() => User, { nullable: true })
  accountProfile(@CtxUser() user: User) {
    return this.service.accountProfile(user.id)
  }

  @Query(() => Boolean, { nullable: true })
  accountUsernameAvailable(@CtxUser() user: User, @Args('username') username: string) {
    return this.service.accountUsernameAvailable(user.id, username)
  }

  @Mutation(() => Email, { nullable: true })
  accountCreateEmail(@CtxUser() user: User, @Args('input', new ValidationPipe()) input: AccountCreateEmailInput) {
    return this.service.accountCreateEmail(user.id, input)
  }

  @Mutation(() => Email, { nullable: true })
  accountDeleteEmail(@CtxUser() user: User, @Args('emailId') emailId: string) {
    return this.service.accountDeleteEmail(user.id, emailId)
  }

  @Mutation(() => Email, { nullable: true })
  accountMarkEmailPrimary(@CtxUser() user: User, @Args('emailId') emailId: string) {
    return this.service.accountMarkEmailPrimary(user.id, emailId)
  }

  @Mutation(() => Email, { nullable: true })
  accountMarkEmailPrivate(@CtxUser() user: User, @Args('emailId') emailId: string) {
    return this.service.accountMarkEmailPrivate(user.id, emailId)
  }

  @Mutation(() => Email, { nullable: true })
  accountMarkEmailPublic(@CtxUser() user: User, @Args('emailId') emailId: string) {
    return this.service.accountMarkEmailPublic(user.id, emailId)
  }

  @Mutation(() => User, { nullable: true })
  accountUpdateProfile(@CtxUser() user: User, @Args('input', new ValidationPipe()) input: AccountUpdateProfileInput) {
    return this.service.accountUpdateProfile(user.id, input)
  }

  @Mutation(() => User, { nullable: true })
  accountUpdateUsername(@CtxUser() user: User, @Args('username') username: string) {
    return this.service.accountUpdateUsername(user.id, username)
  }

  @Mutation(() => Boolean, { nullable: true })
  accountResetPassword(@CtxUser() user: User) {
    return this.service.accountResetPassword(user.id)
  }

  @Mutation(() => Boolean, { nullable: true })
  accountUpdatePassword(@CtxUser() user: User, @Args('input', new ValidationPipe()) input: AccountUpdatePasswordInput) {
    return this.service.accountUpdatePassword(user.id, input)
  }
}
",
      "file": "/lib/test-api-account-feature.resolver.ts",
    },
  ],
  "root": "libs/test-api/account/feature/src",
}
`;

exports[`init generator should run successfully with default options 17`] = `
Object {
  "projectType": "library",
  "root": "libs/test-api/auth/data-access",
  "sourceRoot": "libs/test-api/auth/data-access/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-api/auth/data-access/**/*.ts",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-api/auth/data-access/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-api/auth/data-access",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 18`] = `
Object {
  "root": "libs/test-api/auth/data-access",
  "tree": Array [
    "/.babelrc",
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/dto/jwt.dto.ts",
    "/src/lib/dto/login.input.ts",
    "/src/lib/dto/register.input.ts",
    "/src/lib/models/auth-token.model.ts",
    "/src/lib/strategies/jwt.strategy.ts",
    "/src/lib/test-api-auth-data-access.module.ts",
    "/src/lib/test-api-auth-data-access.service.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 19`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-api-auth-data-access.module'
export * from './lib/test-api-auth-data-access.service'
export * from './lib/dto/jwt.dto'
export * from './lib/dto/login.input'
export * from './lib/dto/register.input'
export * from './lib/models/auth-token.model'
",
      "file": "/index.ts",
    },
    Object {
      "content": "export interface JwtDto {
  userId: string
}
",
      "file": "/lib/dto/jwt.dto.ts",
    },
    Object {
      "content": "import { Field, InputType } from '@nestjs/graphql'
import { IsNotEmpty, MinLength } from 'class-validator'

@InputType()
export class LoginInput {
  @Field()
  @IsNotEmpty()
  email: string

  @Field()
  @IsNotEmpty()
  @MinLength(8)
  password: string
}
",
      "file": "/lib/dto/login.input.ts",
    },
    Object {
      "content": "import { IsEmail, IsNotEmpty, MinLength } from 'class-validator'
import { InputType, Field } from '@nestjs/graphql'

@InputType()
export class RegisterInput {
  @Field()
  @IsNotEmpty()
  @IsEmail()
  email: string

  @Field({ nullable: true })
  username?: string

  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string

  @Field({ nullable: true })
  phone?: string

  @Field({ nullable: true })
  avatarUrl?: string

  @Field()
  @IsNotEmpty()
  @MinLength(8)
  password: string
}
",
      "file": "/lib/dto/register.input.ts",
    },
    Object {
      "content": "import { Field, ObjectType } from '@nestjs/graphql'

@ObjectType()
export class AuthToken {
  @Field({ description: 'JWT Bearer token' })
  token: string
}
",
      "file": "/lib/models/auth-token.model.ts",
    },
    Object {
      "content": "import { Injectable, UnauthorizedException } from '@nestjs/common'
import { PassportStrategy } from '@nestjs/passport'
import { Request } from 'express'
import { ExtractJwt, Strategy } from 'passport-jwt'
import { TestApiAuthDataAccessService } from '../test-api-auth-data-access.service'
import { JwtDto } from '../dto/jwt.dto'

function headerAndCookieExtractor(req: Request) {
  const token = ExtractJwt.fromAuthHeaderAsBearerToken()(req)
  if (!token) {
    return cookieExtractor(req)
  }
  return token
}

function cookieExtractor(req: Request) {
  const name = process.env.API_COOKIE_NAME || '__session'
  return req?.cookies?.[name] ? req.cookies[name] : undefined
}

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(private readonly auth: TestApiAuthDataAccessService) {
    super({
      jwtFromRequest: cookieExtractor,
      secretOrKey: process.env.JWT_SECRET,
    })
  }

  async validate(payload: JwtDto) {
    const user = await this.auth.validateUser(payload.userId)
    if (!user) {
      throw new UnauthorizedException()
    }
    return user
  }
}
",
      "file": "/lib/strategies/jwt.strategy.ts",
    },
    Object {
      "content": "import { TestApiCoreDataAccessModule } from '@proj/test-api/core/data-access'
import { TestApiCoreUtilModule, } from '@proj/test-api/core/util'
import { Module } from '@nestjs/common'
import { JwtModule } from '@nestjs/jwt'
import { PassportModule } from '@nestjs/passport'

import { TestApiAuthDataAccessService } from './test-api-auth-data-access.service'
import { JwtStrategy } from './strategies/jwt.strategy'

@Module({
  imports: [
    TestApiCoreDataAccessModule,
    TestApiCoreUtilModule,
    PassportModule.register({ defaultStrategy: 'jwt' }),
    JwtModule.register({
      secret: process.env.JWT_SECRET,
    }),
  ],
  exports: [TestApiAuthDataAccessService],
  providers: [TestApiAuthDataAccessService, JwtStrategy],
})
export class TestApiAuthDataAccessModule {}
",
      "file": "/lib/test-api-auth-data-access.module.ts",
    },
    Object {
      "content": "import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common'
import { JwtService } from '@nestjs/jwt'
import { TestApiCoreDataAccessService } from '@proj/test-api/core/data-access'
import { TestApiCoreUtilService, validatePassword } from '@proj/test-api/core/util'
import { Response } from 'express'
import { LoginInput } from './dto/login.input'
import { RegisterInput } from './dto/register.input'
import { AuthToken } from './models/auth-token.model'

@Injectable()
export class TestApiAuthDataAccessService {
  constructor(
    private readonly data: TestApiCoreDataAccessService,
    private readonly core: TestApiCoreUtilService,
    private readonly jwtService: JwtService
  ) {}

  async register(payload: RegisterInput) {
    const user = await this.data.createUser(payload, { email: payload.email })

    return this.signUser(user)
  }

  async login(input: LoginInput) {
    const email = input.email.trim()
    const password = input.password.trim()
    const user = await this.data.findUserByEmail(email)

    if (!user) {
      throw new NotFoundException(\`No user found for email: \${email}\`)
    }

    if (!user?.password) {
      throw new NotFoundException(\`Can't log in with email: \${email}\`)
    }

    const passwordValid = await validatePassword(password, user.password)

    if (!passwordValid) {
      throw new BadRequestException('Invalid password')
    }

    return this.signUser(user)
  }

  signUser(user): AuthToken {
    const token = this.jwtService.sign({ userId: user?.id })
    return { token }
  }

  validateUser(userId: string) {
    return this.data.findUserById(userId)
  }

  getUserFromToken(token: string) {
    const userId = this.jwtService.decode(token)['userId']

    return this.data.findUserById(userId)
  }

  setCookie(res: Response, token: string) {
    return res?.cookie(this.core.cookie.name, token, this.core.cookie.options)
  }

  clearCookie(res: Response) {
    return res.clearCookie(this.core.cookie.name, this.core.cookie.options)
  }
}
",
      "file": "/lib/test-api-auth-data-access.service.ts",
    },
  ],
  "root": "libs/test-api/auth/data-access/src",
}
`;

exports[`init generator should run successfully with default options 20`] = `
Object {
  "projectType": "library",
  "root": "libs/test-api/auth/feature",
  "sourceRoot": "libs/test-api/auth/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-api/auth/feature/**/*.ts",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-api/auth/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-api/auth/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 21`] = `
Object {
  "root": "libs/test-api/auth/feature",
  "tree": Array [
    "/.babelrc",
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-api-auth-feature.module.ts",
    "/src/lib/test-api-auth-feature.resolver.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 22`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-api-auth-feature.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Module } from '@nestjs/common'
import { TestApiAuthDataAccessModule } from '@proj/test-api/auth/data-access'
import { TestApiAuthFeatureResolver } from './test-api-auth-feature.resolver'

@Module({
  imports: [TestApiAuthDataAccessModule],
  providers: [TestApiAuthFeatureResolver],
})
export class TestApiAuthFeatureModule {}
",
      "file": "/lib/test-api-auth-feature.module.ts",
    },
    Object {
      "content": "import {
  TestApiAuthDataAccessService,
  LoginInput,
  RegisterInput,
  AuthToken,
} from '@proj/test-api/auth/data-access'
import {
  CtxUser,
  GqlAuthGuard,
} from '@proj/test-api/auth/util'
import {
  User,
} from '@proj/test-api/user/data-access'
import { Context, Query, Resolver, Mutation, Args } from '@nestjs/graphql'
import { UseGuards } from '@nestjs/common'

@Resolver()
export class TestApiAuthFeatureResolver {
  constructor(private readonly service: TestApiAuthDataAccessService) {}

  @Query(() => User, { nullable: true })
  @UseGuards(GqlAuthGuard)
  async me(@CtxUser() user: User) {
    return user
  }

  @Mutation(() => AuthToken, { nullable: true })
  async login(@Context() context, @Args('input') input: LoginInput) {
    const authToken = await this.service.login(input)
    this.service.setCookie(context.res, authToken.token)
    return authToken
  }

  @Mutation(() => Boolean, { nullable: true })
  async logout(@Context() context) {
    this.service.clearCookie(context.res)
    return true
  }

  @Mutation(() => AuthToken, { nullable: true })
  async register(@Context() context, @Args('input') input: RegisterInput) {
    const authToken = await this.service.register(input)
    this.service.setCookie(context.res, authToken.token)
    return authToken
  }
}
",
      "file": "/lib/test-api-auth-feature.resolver.ts",
    },
  ],
  "root": "libs/test-api/auth/feature/src",
}
`;

exports[`init generator should run successfully with default options 23`] = `
Object {
  "projectType": "library",
  "root": "libs/test-api/auth/util",
  "sourceRoot": "libs/test-api/auth/util/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-api/auth/util/**/*.ts",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-api/auth/util/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-api/auth/util",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 24`] = `
Object {
  "root": "libs/test-api/auth/util",
  "tree": Array [
    "/.babelrc",
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/decorators/ctx-user.decorator.ts",
    "/src/lib/guards/gql-auth-admin.guard.ts",
    "/src/lib/guards/gql-auth.guard.ts",
    "/src/lib/test-api-auth-util.module.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 25`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/decorators/ctx-user.decorator'
export * from './lib/guards/gql-auth-admin.guard'
export * from './lib/guards/gql-auth.guard'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { createParamDecorator } from '@nestjs/common'
import { GqlExecutionContext } from '@nestjs/graphql'

export const CtxUser = createParamDecorator((data, ctx) => GqlExecutionContext.create(ctx).getContext().req.user)
",
      "file": "/lib/decorators/ctx-user.decorator.ts",
    },
    Object {
      "content": "import { ExecutionContext, ForbiddenException, Injectable } from '@nestjs/common'
import { GqlExecutionContext } from '@nestjs/graphql'
import { AuthGuard } from '@nestjs/passport'

@Injectable()
export class GqlAuthAdminGuard extends AuthGuard('jwt') {
  private readonly _roles: string[] = ['Admin']

  getRequest(context: ExecutionContext) {
    const ctx = GqlExecutionContext.create(context)

    return ctx.getContext().req
  }

  constructor() {
    super()
  }

  async canActivate(context: ExecutionContext): Promise<boolean> {
    await super.canActivate(context)
    const ctx = GqlExecutionContext.create(context)
    const req = ctx.getContext().req

    if (!req || !req.user) {
      return false
    }
    const hasAccess = this.hasAccess(req.user)

    if (!hasAccess) {
      throw new ForbiddenException(\`You need to have Admin access\`)
    }
    return req && req.user && this.hasAccess(req.user)
  }

  private hasAccess(user): boolean {
    return user.role && this._roles.includes(user.role)
  }
}
",
      "file": "/lib/guards/gql-auth-admin.guard.ts",
    },
    Object {
      "content": "import { ExecutionContext, Injectable } from '@nestjs/common'
import { GqlExecutionContext } from '@nestjs/graphql'
import { AuthGuard } from '@nestjs/passport'

@Injectable()
export class GqlAuthGuard extends AuthGuard('jwt') {
  getRequest(context: ExecutionContext) {
    const ctx = GqlExecutionContext.create(context)

    return ctx.getContext().req
  }
}
",
      "file": "/lib/guards/gql-auth.guard.ts",
    },
    Object {
      "content": "import { Module } from '@nestjs/common'

@Module({
  controllers: [],
  providers: [],
  exports: [],
})
export class TestApiAuthUtilModule {}
",
      "file": "/lib/test-api-auth-util.module.ts",
    },
  ],
  "root": "libs/test-api/auth/util/src",
}
`;

exports[`init generator should run successfully with default options 26`] = `
Object {
  "projectType": "library",
  "root": "libs/test-api/core/data-access",
  "sourceRoot": "libs/test-api/core/data-access/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-api/core/data-access/**/*.ts",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-api/core/data-access/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-api/core/data-access",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 27`] = `
Object {
  "root": "libs/test-api/core/data-access",
  "tree": Array [
    "/.babelrc",
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/dto/core-paging.input.ts",
    "/src/lib/models/core-paging.model.ts",
    "/src/lib/test-api-core-data-access.module.ts",
    "/src/lib/test-api-core-data-access.service.ts",
    "/src/prisma/schema.prisma",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 28`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-api-core-data-access.module'
export * from './lib/test-api-core-data-access.service'
export * from './lib/dto/core-paging.input'
export * from './lib/models/core-paging.model'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Field, InputType, Int } from '@nestjs/graphql'

@InputType()
export class CorePagingInput {
  @Field(() => Int, { nullable: true, defaultValue: 10 })
  limit?: number

  @Field(() => Int, { nullable: true, defaultValue: 0 })
  skip?: number
}
",
      "file": "/lib/dto/core-paging.input.ts",
    },
    Object {
      "content": "import { Field, Int, ObjectType } from '@nestjs/graphql'

@ObjectType()
export class CorePaging {
  @Field(() => Int, { nullable: true, defaultValue: 10 })
  limit?: number

  @Field(() => Int, { nullable: true, defaultValue: 10 })
  skip?: number

  @Field(() => Int, { nullable: true, defaultValue: 10 })
  total?: number
}
",
      "file": "/lib/models/core-paging.model.ts",
    },
    Object {
      "content": "import { Module } from '@nestjs/common'

import { TestApiCoreDataAccessService } from './test-api-core-data-access.service'

@Module({
  providers: [TestApiCoreDataAccessService],
  exports: [TestApiCoreDataAccessService],
})
export class TestApiCoreDataAccessModule {}
",
      "file": "/lib/test-api-core-data-access.module.ts",
    },
    Object {
      "content": "import { BadRequestException, Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common'
import { PrismaClient, Prisma, Role } from '@prisma/client'
import { getGravatarUrl, hashPassword } from '@proj/test-api/core/util'

@Injectable()
export class TestApiCoreDataAccessService extends PrismaClient implements OnModuleInit, OnModuleDestroy {
  constructor() {
    super()
  }

  async onModuleDestroy() {
    await this.$disconnect()
  }

  async onModuleInit() {
    await this.$connect()
  }

  async createUser(input: Partial<Prisma.UserCreateInput>, emailInput: Partial<Prisma.EmailCreateInput>) {
    const email = emailInput?.email?.trim()
    const existing = await this.findUserByEmail(email)
    if (existing) {
      throw new BadRequestException(\`Can't create user with email \${email}\`)
    }
    const password = hashPassword(input.password)

    // The first user will get the Admin role
    const hasAdmin = await this.user.count({ where: { role: 'Admin' } })
    const role = hasAdmin ? 'User' : 'Admin'

    return this.user.create({
      data: {
        firstName: input.firstName,
        lastName: input.lastName,
        emails: { create: { email, primary: true } },
        username: email,
        avatarUrl: input.avatarUrl || getGravatarUrl(email),
        password,
        role,
      },
    })
  }

  findUserByEmail(email: string) {
    return this.email.findUnique({ where: { email } }).owner({ include: { emails: true } })
  }

  findUserById(userId: string) {
    return this.user.findUnique({ where: { id: userId }, include: { emails: true } })
  }

  findUserByUsername(username: string) {
    return this.user.findUnique({ where: { username }, include: { emails: true } })
  }

  async ensureAdminUser(adminId: string): Promise<boolean> {
    const tenant = await this.findUserById(adminId)
    if (tenant.role !== Role.Admin) {
      throw new Error(\`This operation needs Admin access\`)
    }
    return true
  }

  async usernameDenyList(username: string) {
    const denied = [
      // Add usernames you want to deny
      'admin',
      'administrator',
      'system',
      'owner',
      'info',
      'webmaster',
    ]
    return denied.includes(username)
  }
}
",
      "file": "/lib/test-api-core-data-access.service.ts",
    },
    Object {
      "content": "datasource db {
  provider = \\"postgresql\\"
  url      = env(\\"DATABASE_URL\\")
}

generator client {
  provider      = \\"prisma-client-js\\"
  binaryTargets = [\\"native\\"]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  role      Role
  developer Boolean  @default(false)
  username  String   @unique
  password  String?
  firstName String?
  lastName  String?
  avatarUrl String?
  location  String?
  phone     String?
  bio       String?
  emails    Email[]  @relation(\\"Email_belongsTo_Owner\\")
}

enum Role {
  Admin
  User
}

model Email {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  email         String    @unique
  public        Boolean   @default(false)
  primary       Boolean   @default(false)
  verified      Boolean   @default(false)
  verifyToken   String?
  verifyExpires DateTime?
  owner         User      @relation(name: \\"Email_belongsTo_Owner\\", fields: [ownerId], references: [id])
  ownerId       String
  // Enable when this is resolved https://github.com/prisma/prisma/issues/3387
  // @@unique([ownerId, primary])
}
",
      "file": "/prisma/schema.prisma",
    },
  ],
  "root": "libs/test-api/core/data-access/src",
}
`;

exports[`init generator should run successfully with default options 29`] = `
Object {
  "projectType": "library",
  "root": "libs/test-api/core/feature",
  "sourceRoot": "libs/test-api/core/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-api/core/feature/**/*.ts",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-api/core/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-api/core/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 30`] = `
Object {
  "root": "libs/test-api/core/feature",
  "tree": Array [
    "/.babelrc",
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-api-core-feature.controller.ts",
    "/src/lib/test-api-core-feature.module.ts",
    "/src/lib/test-api-core-feature.resolver.ts",
    "/src/lib/test-api-core-feature.service.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 31`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-api-core-feature.module'
export * from './lib/test-api-core-feature.service'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Controller, Get } from '@nestjs/common'
import { TestApiCoreFeatureService } from './test-api-core-feature.service'

@Controller()
export class TestApiCoreFeatureController {
  constructor(private readonly service: TestApiCoreFeatureService) {}

  @Get('uptime')
  uptime() {
    return this.service.uptime()
  }
}
",
      "file": "/lib/test-api-core-feature.controller.ts",
    },
    Object {
      "content": "import { GraphQLIntercomModule } from '@kikstart-playground/graphql-intercom'
import { Module } from '@nestjs/common'
import { GraphQLModule } from '@nestjs/graphql'
import { PubSub } from 'graphql-subscriptions'
import { join } from 'path'
import { TestApiAccountFeatureModule } from '@proj/test-api/account/feature'
import { TestApiAuthFeatureModule } from '@proj/test-api/auth/feature'
import { TestApiUserFeatureModule } from '@proj/test-api/user/feature'

import { TestApiCoreFeatureController } from './test-api-core-feature.controller'
import { TestApiCoreFeatureResolver } from './test-api-core-feature.resolver'
import { TestApiCoreFeatureService } from './test-api-core-feature.service'

@Module({
  imports: [
    GraphQLModule.forRoot({
      autoSchemaFile: join(process.cwd(), 'test-api-schema.graphql'),
      context: ({ req, res }) => ({ req, res }),
      installSubscriptionHandlers: true,
      playground: {
        settings: {
          'request.credentials': 'include',
        },
      },
      sortSchema: true,
    }),
    GraphQLIntercomModule.forRoot({ pubSub: new PubSub() }),
    TestApiAccountFeatureModule,
    TestApiAuthFeatureModule,
    TestApiUserFeatureModule,
  ],
  controllers: [TestApiCoreFeatureController],
  providers: [TestApiCoreFeatureResolver, TestApiCoreFeatureService],
  exports: [TestApiCoreFeatureService],
})
export class TestApiCoreFeatureModule {}
",
      "file": "/lib/test-api-core-feature.module.ts",
    },
    Object {
      "content": "import { Float, Query, Resolver } from '@nestjs/graphql'
import { TestApiCoreFeatureService } from './test-api-core-feature.service'

@Resolver()
export class TestApiCoreFeatureResolver {
  constructor(private readonly service: TestApiCoreFeatureService) {}

  @Query(() => Float, { nullable: true })
  uptime() {
    return this.service.uptime()
  }
}
",
      "file": "/lib/test-api-core-feature.resolver.ts",
    },
    Object {
      "content": "import { Injectable } from '@nestjs/common'

@Injectable()
export class TestApiCoreFeatureService {
  uptime(): number {
    return process.uptime()
  }
}
",
      "file": "/lib/test-api-core-feature.service.ts",
    },
  ],
  "root": "libs/test-api/core/feature/src",
}
`;

exports[`init generator should run successfully with default options 32`] = `
Object {
  "projectType": "library",
  "root": "libs/test-api/core/util",
  "sourceRoot": "libs/test-api/core/util/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-api/core/util/**/*.ts",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-api/core/util/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-api/core/util",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 33`] = `
Object {
  "root": "libs/test-api/core/util",
  "tree": Array [
    "/.babelrc",
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/config/configuration.ts",
    "/src/lib/config/validation.ts",
    "/src/lib/test-api-core-util.helper.ts",
    "/src/lib/test-api-core-util.module.ts",
    "/src/lib/test-api-core-util.service.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 34`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-api-core-util.helper'
export * from './lib/test-api-core-util.module'
export * from './lib/test-api-core-util.service'
",
      "file": "/index.ts",
    },
    Object {
      "content": "export const configuration = () => ({
  prefix: 'api',
  environment: process.env.NODE_ENV,
  host: process.env.HOST,
  port: parseInt(process.env.PORT, 10),
  apiUrl: process.env.API_URL,
  api: {
    cookie: {
      name: process.env.API_COOKIE_NAME,
      options: {
        domain: process.env.API_COOKIE_DOMAIN,
        httpOnly: true,
      },
    },
    cors: {
      origin: [process.env.WEB_URL],
    },
  },
})
",
      "file": "/lib/config/configuration.ts",
    },
    Object {
      "content": "import * as Joi from 'joi'

export const validationSchema = Joi.object({
  NODE_ENV: Joi.string().valid('development', 'production', 'test'),
  HOST: Joi.string().alphanum().default('localhost'),
  PORT: Joi.number().default(3000),
  WEB_PORT: Joi.number().default(4200),
  WEB_URL: Joi.string().default(
    \`http://\${process.env.HOST || 'localhost'}:\${process.env.WEB_PORT}\`,
  ),
  API_COOKIE_DOMAIN: Joi.string().default('localhost'),
  API_COOKIE_NAME: Joi.string().default('__session'),
  API_URL: Joi.string().default(
    \`http://\${process.env.HOST || 'localhost'}:\${process.env.PORT}/api\`,
  ),
  JWT_SECRET: Joi.string().required(),
})
",
      "file": "/lib/config/validation.ts",
    },
    Object {
      "content": "import { compareSync, hashSync } from 'bcryptjs'
import { createHash } from 'crypto'

const getHash = (str: string) => createHash('md5').update(str).digest('hex')

const gravatarUrl = 'https://www.gravatar.com/avatar/'
const gravatarSize = 460

export const getGravatarUrl = (email = '') =>
  \`\${gravatarUrl}\${getHash(email)}?s=\${gravatarSize}&d=mp\`

export function validatePassword(
  password: string,
  hashedPassword: string
): boolean {
  return compareSync(password, hashedPassword)
}

export function hashPassword(password: string): string {
  return hashSync(password, 10)
}

export function generateMd5Hash(input: string) {
  return createHash('md5').update(input).digest('hex')
}

export function generateToken() {
  return generateMd5Hash(randomId(24))
}

export function generateExpireDate(days = 1) {
  return new Date(Date.now() + 60 * 60 * 24 * 1000 * days)
}

export function randomId (length = 8) {
  return new Date().getTime().toString().substr(0, length)
}

export function rand (items) {
  return items[Math.floor(Math.random() * items.length)]
}

export function uniqueSuffix(input, length = 5) {
  const suffix = generateMd5Hash(Date.now() + input).slice(0, length)
  return \`\${input}-\${suffix}\`
}
",
      "file": "/lib/test-api-core-util.helper.ts",
    },
    Object {
      "content": "import { Module } from '@nestjs/common'
import { ConfigModule } from '@nestjs/config'

import { configuration } from './config/configuration'
import { validationSchema } from './config/validation'
import { TestApiCoreUtilService } from './test-api-core-util.service'

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
      load: [configuration],
      validationSchema,
    }),
  ],
  providers: [TestApiCoreUtilService],
  exports: [TestApiCoreUtilService],
})
export class TestApiCoreUtilModule {}
",
      "file": "/lib/test-api-core-util.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { CookieOptions } from 'express'

@Injectable()
export class TestApiCoreUtilService {

  constructor(public readonly config: ConfigService) {}

  uptime(): number {
    return process.uptime()
  }

  get apiUrl(): string {
    return this.config.get('apiUrl')
  }

  get apiCorsOrigins(): string[] {
    return this.config.get('api.cors.origin')
  }

  get cookie(): { name: string; options: CookieOptions } {
    return this.config.get('api.cookie')
  }
}
",
      "file": "/lib/test-api-core-util.service.ts",
    },
  ],
  "root": "libs/test-api/core/util/src",
}
`;

exports[`init generator should run successfully with default options 35`] = `
Object {
  "projectType": "application",
  "root": "apps/test-api-e2e",
  "sourceRoot": "apps/test-api-e2e/src",
  "tags": Array [],
  "targets": Object {
    "e2e": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "apps/test-api-e2e/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/apps/test-api-e2e",
      ],
    },
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "apps/test-api-e2e/**/*.ts",
        ],
      },
    },
  },
}
`;

exports[`init generator should run successfully with default options 36`] = `
Object {
  "root": "apps/test-api-e2e",
  "tree": Array [
    "/.eslintrc.json",
    "/jest.config.js",
    "/tsconfig.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 37`] = `
Object {
  "content": Array [
    Object {
      "content": "import { AppModule } from '@proj/test-api-app-module'
import { INestApplication } from '@nestjs/common'
import { Test, TestingModule } from '@nestjs/testing'
import * as request from 'supertest'

describe('AppController (e2e)', () => {
  let app: INestApplication

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile()

    app = moduleFixture.createNestApplication()
    app.setGlobalPrefix('api')
    await app.init()
  })

  afterEach(async () => {
    return app.close()
  })

  it('/api/uptime (GET)', () => {
    return request(app.getHttpServer()).get('/api/uptime').expect(200)
  })
})
",
      "file": "/integration/app.spec.ts",
    },
    Object {
      "content": "import { AppModule } from '@proj/test-api-app-module'
import { Test, TestingModule } from '@nestjs/testing'
import { INestApplication } from '@nestjs/common'
import * as request from 'supertest'

describe('CoreModule (e2e)', () => {
  let app: INestApplication

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile()

    app = moduleFixture.createNestApplication()
    await app.init()
  })

  afterEach(async () => {
    return app.close()
  })

  it('/graphql (POST)', () => {
    return request(app.getHttpServer())
      .post('/graphql')
      .send({ query: \`query { uptime }\` })
      .expect(200)
      .expect((res) => {
        const body = res.body

        if (!body.data) {
          throw Error(\`Data prop not found\`)
        }

        if (!body.data.uptime) {
          throw Error(\`Data prop not found\`)
        }

        if (typeof body.data.uptime !== 'number') {
          throw Error(\`Uptime not a number\`)
        }
        return true
      })
  })
})
",
      "file": "/integration/core.spec.ts",
    },
  ],
  "root": "apps/test-api-e2e/src",
}
`;

exports[`init generator should run successfully with default options 38`] = `
Object {
  "projectType": "library",
  "root": "libs/test-api/user/data-access",
  "sourceRoot": "libs/test-api/user/data-access/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-api/user/data-access/**/*.ts",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-api/user/data-access/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-api/user/data-access",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 39`] = `
Object {
  "root": "libs/test-api/user/data-access",
  "tree": Array [
    "/.babelrc",
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/dto/admin-create-user.input.ts",
    "/src/lib/dto/admin-update-user.input.ts",
    "/src/lib/models/email.model.ts",
    "/src/lib/models/role.enum.ts",
    "/src/lib/models/user.model.ts",
    "/src/lib/test-api-user-data-access.module.ts",
    "/src/lib/test-api-user-data-access.service.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 40`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-api-user-data-access.module'
export * from './lib/test-api-user-data-access.service'
export * from './lib/models/email.model'
export * from './lib/models/role.enum'
export * from './lib/models/user.model'
export * from './lib/dto/admin-create-user.input'
export * from './lib/dto/admin-update-user.input'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Field, InputType } from '@nestjs/graphql'
import { Role } from '../models/role.enum'

@InputType()
export class AdminCreateUserInput {
  @Field(() => Role)
  role: Role

  @Field()
  email: string

  @Field({ nullable: true })
  username?: string

  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string
}
",
      "file": "/lib/dto/admin-create-user.input.ts",
    },
    Object {
      "content": "import { Field, InputType } from '@nestjs/graphql'
import { Role } from '../models/role.enum'

@InputType()
export class AdminUpdateUserInput {
  @Field(() => Role, { nullable: true })
  role: Role

  @Field({ nullable: true })
  username?: string

  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string

  @Field({ nullable: true })
  phone: string

  @Field({ nullable: true })
  avatarUrl?: string

  @Field({ nullable: true })
  location?: string

  @Field({ nullable: true })
  bio?: string
}
",
      "file": "/lib/dto/admin-update-user.input.ts",
    },
    Object {
      "content": "import { Field, ObjectType } from '@nestjs/graphql'

@ObjectType()
export class Email {
  @Field({ nullable: true })
  id: string

  @Field({ nullable: true })
  createdAt: Date

  @Field({ nullable: true })
  updatedAt: Date

  @Field({ nullable: true })
  email: string

  @Field({ nullable: true })
  public: boolean

  @Field({ nullable: true })
  primary: boolean

  @Field({ nullable: true })
  verified: boolean
}
",
      "file": "/lib/models/email.model.ts",
    },
    Object {
      "content": "import { registerEnumType } from '@nestjs/graphql'
import { Role } from '@prisma/client'
export { Role }

registerEnumType(Role, { name: 'Role' })
",
      "file": "/lib/models/role.enum.ts",
    },
    Object {
      "content": "import { Field, ObjectType } from '@nestjs/graphql'
import { Email } from './email.model'
import { Role } from './role.enum'

@ObjectType()
export class User {
  @Field({ nullable: true })
  id: string

  @Field({ nullable: true })
  createdAt: Date

  @Field({ nullable: true })
  updatedAt: Date

  @Field({ nullable: true })
  email: string

  @Field({ nullable: true })
  phone: string

  @Field({ nullable: true })
  username?: string

  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string

  @Field({ nullable: true })
  avatarUrl?: string

  @Field({ nullable: true })
  location?: string

  @Field({ nullable: true })
  bio?: string

  @Field(() => Role, { nullable: true })
  role: Role

  @Field(() => [Email], { nullable: true })
  emails: Email[]

  password?: string
}
",
      "file": "/lib/models/user.model.ts",
    },
    Object {
      "content": "import { Module } from '@nestjs/common'
import { TestApiCoreDataAccessModule } from '@proj/test-api/core/data-access'

import { TestApiUserDataAccessService } from './test-api-user-data-access.service'

@Module({
  imports: [TestApiCoreDataAccessModule],
  providers: [TestApiUserDataAccessService],
  exports: [TestApiUserDataAccessService],
})
export class TestApiUserDataAccessModule {}
",
      "file": "/lib/test-api-user-data-access.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@nestjs/common'
import { TestApiCoreDataAccessService, CorePaging, CorePagingInput } from '@proj/test-api/core/data-access'
import { getGravatarUrl, hashPassword, uniqueSuffix } from '@proj/test-api/core/util'
import { AdminCreateUserInput } from './dto/admin-create-user.input'
import { AdminUpdateUserInput } from './dto/admin-update-user.input'

@Injectable()
export class TestApiUserDataAccessService {
  constructor(private readonly data: TestApiCoreDataAccessService) {}

  async adminUsers(userId: string, paging: CorePagingInput) {
    await this.data.ensureAdminUser(userId)
    return this.data.user.findMany({
      take: paging.limit,
      skip: paging.skip,
      include: { emails: true },
    })
  }

  async adminCountUsers(adminId: string, paging: CorePagingInput): Promise<CorePaging> {
    await this.data.ensureAdminUser(adminId)
    const total = await this.data.user.count()
    return {
      limit: paging.limit,
      skip: paging.skip,
      total,
    }
  }

  async adminUser(adminId: string, userId: string) {
    await this.data.ensureAdminUser(adminId)
    return this.data.user.findUnique({ where: { id: userId }, include: { emails: true } })
  }

  async adminCreateUser(adminId: string, input: AdminCreateUserInput) {
    await this.data.ensureAdminUser(adminId)
    const email = input.email.trim()
    const avatarUrl = getGravatarUrl(email)
    const username = this.formatUsername(email, input.username)
    await this.ensureUsernameAvailable(username)

    return this.data.user.create({
      data: {
        emails: { create: { email, primary: true } },
        role: input.role,
        firstName: input.firstName,
        lastName: input.lastName,
        avatarUrl,
        username,
      },
      include: { emails: true },
    })
  }

  async adminUpdateUser(adminId: string, userId: string, input: AdminUpdateUserInput) {
    await this.data.ensureAdminUser(adminId)
    return this.data.user.update({
      where: { id: userId },
      data: { ...input },
      include: { emails: true },
    })
  }

  async adminSetUserPassword(adminId: string, userId: string, password: string) {
    await this.data.ensureAdminUser(adminId)
    return this.data.user.update({
      where: { id: userId },
      data: { password: hashPassword(password) },
    })
  }

  async adminDeleteUser(adminId: string, userId: string) {
    await this.data.ensureAdminUser(adminId)
    return this.data.user.delete({ where: { id: userId } })
  }

  private formatUsername(email: string, username?: string): string {
    return username?.trim() || uniqueSuffix(email.trim().split('@')[0])
  }

  private async ensureUsernameAvailable(username: string): Promise<boolean> {
    const user = await this.data.findUserByUsername(username)
    if (user) {
      throw new Error(\`This username is not available\`)
    }
    return true
  }
}
",
      "file": "/lib/test-api-user-data-access.service.ts",
    },
  ],
  "root": "libs/test-api/user/data-access/src",
}
`;

exports[`init generator should run successfully with default options 41`] = `
Object {
  "projectType": "library",
  "root": "libs/test-api/user/feature",
  "sourceRoot": "libs/test-api/user/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-api/user/feature/**/*.ts",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-api/user/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-api/user/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 42`] = `
Object {
  "root": "libs/test-api/user/feature",
  "tree": Array [
    "/.babelrc",
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-api-user-feature-admin.resolver.ts",
    "/src/lib/test-api-user-feature.module.ts",
    "/src/lib/test-api-user-feature.resolver.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 43`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-api-user-feature.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Args, Mutation, Query, Resolver } from '@nestjs/graphql'
import { UseGuards } from '@nestjs/common'
import {
  AdminCreateUserInput,
  AdminUpdateUserInput,
  TestApiUserDataAccessService,
  User,
} from '@proj/test-api/user/data-access'
import { CorePaging, CorePagingInput } from '@proj/test-api/core/data-access'
import {
  CtxUser,
  GqlAuthAdminGuard,
} from '@proj/test-api/auth/util'

@Resolver()
@UseGuards(GqlAuthAdminGuard)
export class TestApiUserFeatureAdminResolver {
  constructor(private readonly service: TestApiUserDataAccessService) {}

  @Query(() => [User], { nullable: true })
  adminUsers(
    @CtxUser() admin: User,
    @Args({ name: 'paging', type: () => CorePagingInput, nullable: true }) paging?: CorePagingInput,
  ) {
    return this.service.adminUsers(admin.id, paging)
  }

  @Query(() => CorePaging, { nullable: true })
  adminCountUsers(
    @CtxUser() admin: User,
    @Args({ name: 'paging', type: () => CorePagingInput, nullable: true }) paging?: CorePagingInput,
  ) {
    return this.service.adminCountUsers(admin.id, paging)
  }

  @Query(() => User, { nullable: true })
  adminUser(@CtxUser() admin: User, @Args('userId') userId: string) {
    return this.service.adminUser(admin.id, userId)
  }

  @Mutation(() => User, { nullable: true })
  adminCreateUser(@CtxUser() admin: User, @Args('input') input: AdminCreateUserInput) {
    return this.service.adminCreateUser(admin.id, input)
  }

  @Mutation(() => User, { nullable: true })
  adminUpdateUser(@CtxUser() admin: User, @Args('userId') userId: string, @Args('input') input: AdminUpdateUserInput) {
    return this.service.adminUpdateUser(admin.id, userId, input)
  }

  @Mutation(() => User, { nullable: true })
  adminSetUserPassword(@CtxUser() admin: User, @Args('userId') userId: string, @Args('password') password: string) {
    return this.service.adminSetUserPassword(admin.id, userId, password)
  }

  @Mutation(() => User, { nullable: true })
  adminDeleteUser(@CtxUser() admin: User, @Args('userId') userId: string) {
    return this.service.adminDeleteUser(admin.id, userId)
  }
}
",
      "file": "/lib/test-api-user-feature-admin.resolver.ts",
    },
    Object {
      "content": "import { Module } from '@nestjs/common'
import { TestApiUserDataAccessModule } from '@proj/test-api/user/data-access'

import { TestApiUserFeatureResolver } from './test-api-user-feature.resolver'
import { TestApiUserFeatureAdminResolver } from './test-api-user-feature-admin.resolver'

@Module({
  imports: [TestApiUserDataAccessModule],
  providers: [TestApiUserFeatureResolver, TestApiUserFeatureAdminResolver],
})
export class TestApiUserFeatureModule {}
",
      "file": "/lib/test-api-user-feature.module.ts",
    },
    Object {
      "content": "import { Parent, ResolveField, Resolver } from '@nestjs/graphql'
import { User } from '@proj/test-api/user/data-access'

@Resolver(() => User)
export class TestApiUserFeatureResolver {
  @ResolveField(() => String, { nullable: true })
  name(@Parent() user: User) {
    const name = [user?.firstName, user?.lastName].join(' ').trim()
    return name.length ? name : user?.username
  }

  @ResolveField(() => String, { nullable: true })
  email(@Parent() user: User) {
    const hasPrimary = user.emails?.find((email) => email.primary)

    return hasPrimary ? hasPrimary.email : user.emails?.find((e) => e).email
  }
}
",
      "file": "/lib/test-api-user-feature.resolver.ts",
    },
  ],
  "root": "libs/test-api/user/feature/src",
}
`;

exports[`init generator should run successfully with default options 44`] = `
Object {
  "prefix": "proj",
  "projectType": "application",
  "root": "apps/test-web",
  "sourceRoot": "apps/test-web/src",
  "tags": Array [],
  "targets": Object {
    "build": Object {
      "configurations": Object {
        "development": Object {
          "buildOptimizer": false,
          "extractLicenses": false,
          "namedChunks": true,
          "optimization": false,
          "sourceMap": true,
          "vendorChunk": true,
        },
        "production": Object {
          "budgets": Array [
            Object {
              "maximumError": "1mb",
              "maximumWarning": "500kb",
              "type": "initial",
            },
            Object {
              "maximumError": "4kb",
              "maximumWarning": "2kb",
              "type": "anyComponentStyle",
            },
          ],
          "fileReplacements": Array [
            Object {
              "replace": "libs/test-web/environments/src/environments/environment.ts",
              "with": "libs/test-web/environments/src/environments/environment.prod.ts",
            },
          ],
          "outputHashing": "all",
        },
      },
      "defaultConfiguration": "production",
      "executor": "@angular-devkit/build-angular:browser",
      "options": Object {
        "assets": Array [
          Object {
            "glob": "favicon.ico",
            "input": "libs/test-web/assets/src",
            "output": "./",
          },
          Object {
            "glob": "**/*",
            "input": "libs/test-web/assets/src/assets",
            "output": "assets",
          },
        ],
        "index": "apps/test-web/src/index.html",
        "main": "apps/test-web/src/main.ts",
        "outputPath": "dist/apps/test-web",
        "polyfills": "apps/test-web/src/polyfills.ts",
        "scripts": Array [],
        "styles": Array [
          "apps/test-web/src/styles.css",
        ],
        "tsConfig": "apps/test-web/tsconfig.app.json",
      },
      "outputs": Array [
        "{options.outputPath}",
      ],
    },
    "extract-i18n": Object {
      "executor": "@angular-devkit/build-angular:extract-i18n",
      "options": Object {
        "browserTarget": "test-web:build",
      },
    },
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "apps/test-web/src/**/*.ts",
          "apps/test-web/src/**/*.html",
        ],
      },
    },
    "serve": Object {
      "configurations": Object {
        "development": Object {
          "browserTarget": "test-web:build:development",
        },
        "production": Object {
          "browserTarget": "test-web:build:production",
        },
      },
      "defaultConfiguration": "development",
      "executor": "@angular-devkit/build-angular:dev-server",
      "options": Object {
        "proxyConfig": "apps/test-web/proxy.conf.js",
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "apps/test-web/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/apps/test-web",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 45`] = `
Object {
  "root": "apps/test-web",
  "tree": Array [
    "/.browserslistrc",
    "/.eslintrc.json",
    "/jest.config.js",
    "/proxy.conf.js",
    "/proxy.conf.json",
    "/src/app/app.component.spec.ts",
    "/src/app/app.component.ts",
    "/src/app/app.module.ts",
    "/src/assets/.gitkeep",
    "/src/environments/environment.prod.ts",
    "/src/environments/environment.ts",
    "/src/favicon.ico",
    "/src/index.html",
    "/src/main.ts",
    "/src/polyfills.ts",
    "/src/styles.css",
    "/src/test-setup.ts",
    "/tsconfig.app.json",
    "/tsconfig.editor.json",
    "/tsconfig.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 46`] = `
Object {
  "content": Array [
    Object {
      "content": "import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(\`should have as title 'test-web'\`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('test-web');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Welcome to test-web!');
  });
});
",
      "file": "/app/app.component.spec.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'

@Component({
  selector: 'proj-root',
  template: '<router-outlet></router-outlet>',
})
export class AppComponent {}
",
      "file": "/app/app.component.ts",
    },
    Object {
      "content": "import { BrowserModule } from '@angular/platform-browser'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebShellFeatureModule } from '@proj/test-web/shell/feature'

import { AppComponent } from './app.component'

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    TestWebShellFeatureModule,
  ],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
",
      "file": "/app/app.module.ts",
    },
    Object {
      "content": "",
      "file": "/assets/.gitkeep",
    },
    Object {
      "content": "export const environment = {
  production: true
};
",
      "file": "/environments/environment.prod.ts",
    },
    Object {
      "content": "// This file can be replaced during build by using the \`fileReplacements\` array.
// \`ng build\` replaces \`environment.ts\` with \`environment.prod.ts\`.
// The list of file replacements can be found in \`angular.json\`.

export const environment = {
  production: false
};

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as \`zone.run\`, \`zoneDelegate.invokeTask\`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.
",
      "file": "/environments/environment.ts",
    },
    Object {
      "content": "    00     �%  6          �  �%       h  �6  (   0   \`           $                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  V/ V/ cV/ �V/ �V/ �V/ �V/ �W0 �Y1 '                                B# pH [�f ��i ��i ��i ��i ��i ��i a�j             �c �^ R�\\\\ ��Y ��U ��R �|N �xK uI &                                    V/ 
V/ �V/ �V/ �V/ �V/ �V/ �X1 �Y2 L                                d= 9_; �X ��l ��k ��k ��k ��k ��k �k H            �c 8�a �] ��Z ��W ��S �}P �zM �vI                                     V/ 
V/ �V/ �V/ �V/ �V/ �W0 �Y1 �Z3 L                            oD jA �\`; �_= ��c ��l ��k ��k ��k ��k ��k Þk     �j �f ��c ��\` ��] ��Y ��V ��R �}O C                                        V/ 
V/ �V/ �V/ �V/ �V/ �W0 �Z2 �[3 L                            oD [nD �iA �X7 �oI ��j ��k ��k ��k ��k ��k ��k ��m �k s�i ��f ��b ��_ ��[ ��W ��T �yL                                         V/ 
V/ �V/ �V/ �V/ �V/ �X1 �Z3 �\\\\4 M                        nD oE �qF �oE �f@ �X8 ��Z ��l ��k ��k ��k ��k ��k �k s�k ��k ��h ��d ��a ��] ��Y ˅W                                             V/ 
V/ �V/ �V/ �V/ �V/ �Y1 �[3 �\\\\4 P                    h= nD �pE �rG �sH �oF �a= �cA ��f ��k ��k ��k ��k ��k ��k ��k ��k ��j ��f ��b ��_ �\\\\ S                                                V/ 
V/ �V/ �V/ �V/ �W0 �Y2 �[4 �]5 Q                    mC 6oD �qF �sH �uJ �uJ �nF �]; �wO ��k ��k ��k ��k ��k ��k ��k ��k ��k ��h ��d ��\` ��\\\\                                         V/ 
V/ V/ 
V/ �V/ �V/ �V/ �W0 �Y2 �\\\\4 �]5 Q                kA 
mC �oD �qF �tH �vJ �xL �vK �kD �^= ��_ ��l ��k ��k ��k ��k ��k ��k ��k ��i ��e ؔb (                                        V/ 	V/ �V/ eV/ 
V/ �V/ �V/ �V/ �W0 �Z2 �\\\\4 �^6 Q                lA XmC �oE �rG �tI �wK �yM �zN �uK �eA �jF ��h ��k ��k ��k ��k ��k ��k ��k ��j ��g e                                            W0 V/ RV/ �V/ 
V/ �V/ �V/ �V/ �W0 �Z2 �\\\\4 �^6 Q            j@ kA �mC �pE �rG �uI �wK �yM �|O �{O �rJ �^= �|S ��k ��k ��k ��k ��k ��k ��k ��j ��h                                         �Z]5 iY1 �V/ GV/ 
V/ �V/ �V/ �V/ �X0 �Z2 �\\\\5 �^6 Q            i? kA �mC �pE �rG �uI �wK �zM �|O �}P �xN �eB �W: ��c ��k ��k ��k ��k ��k ��o���$W                                ��H��H��KHɦ9�f>�X1 �V/ �V/ 
V/ �V/ �V/ �V/ �X0 �Z2 �\\\\4 �^6 Q        g> 4i? �kA �mC �pE �rG �uI �wK �zM �|O �|P �vM �b@ �bA ��g ��k ��k ��k ��k ��k ��s	�ӵ]����                        ��H-��H���J���G���*�\`8�Y1 �V/ �V/ 
V/ �V/ �V/ �V/ �W0 �Z2 �\\\\4 �^6 Q    d; 	f= �h? �kA �mC �pE �rG �tI �wK �yM �{O �yN �mF �^> ��] ��l ��k ��k ��k ��k ��k ��l �ͫH��ڔ��ٛ�ؖ�ؖ�ؖ.�ؘr�֏���O�߾D���/��h�i@�]5 �Y1 �V/ �V/ 
V/ �V/ �V/ �V/ �W0 �Z2 �\\\\4 �^5 Q    d; Uf< �h> �j@ �mC �oE �rG �tH �wK �yL �xM �qI �_= �vO ��k ��k ��k ��k ��k ��k ��k ��j ������i��א��ؗ��ؘ��ؗ��֏���k���G��w�mC�e; �a8 �]5 �X1 �V/ ]V/ 
V/ �V/ �V/ �V/ �W0 �Y2 �\\\\4 �]5 Pb: c: �e< �h> �j@ �lB �oD �qF �rG DwK }wK �sI �d@ �cA ��f ��k ��k ��k ��k ��k ��k ��k ��k ��i���$���W���p���v���n���Y���I���*�rG�j@ �f< �a8 �\\\\4 �X1 �V/  V/ 
V/ �V/ �V/ �V/ �W0 �Y1 �[3 �\\\\5 Qa8 wb: �e< �g> �i@ �lB �nD �pE �oC uI }sH �iB �Z: ��Z ��l ��k ��k ��k ��k ��k ��k ��k ��j ��f ��e����Ω4�ܹA�޼B�״=���(�}R�nC �j@ �e< �\`8 �[4 �X1 �    V/ 
V/ �V/ �V/ �V/ �V/ �X1 �[3 �]5 �\`7 �b9 �d; �f= �i? �kA �mC �oD *    qG }kD �Z9 �oI ��j ��k ��k ��k ��k ��k ��k �k ��k ��i ��e ��a ��] ��_��g��g
��[�xK�rF �nC �i? �d; �_7 �[3 �X1     V/ 
V/ �V/ �V/ �V/ �V/ �X0 �Z2 �\\\\4 �_6 �a8 �c: �f< �h> �j@ �lB q        jB }_< �\\\\; ��c ��l ��k ��k ��k ��k ��k ۞k C�k ��j ��g ��c ��\` ��\\\\ ��X ��S �}O �yL �uI �qE �lA �g> �c: �^6 �[3 J        V/ 
V/ �V/ �V/ �V/ �V/ �W0 �Y2 �\\\\4 �^6 �\`8 �b: �e; �g= �i? �kA         \`; }U6 �U ��l ��k ��k ��k ��k ��k ��k l    �k $�h ��d ��a ��^ ��Z ��V ��S �}O �xK �tH �oD �j@ �f< �a9 �^6 ZS,         V/ 
V/ �V/ �V/ �V/ �V/ �V/ �X1 �[3 �]5 �_7 �a9 �d; �f< �g> M            T4 ~kE ��i ��k ��k ��k ��k ��k ��k ��k         �e �b ��_ �[ ��X ��T �Q �zM �vJ �rF �mB �i? �e; �a8 BW0             V/ 
V/ �V/ �V/ �V/ �V/ �V/ �W0 �Z2 �\\\\4 �^6 �\`8 �b: �d; �g=             iC ~�a ��k ��k ��k ��k ��k ��k �k :                �\` �] @�Y ��V ڀR �|O �xK �tH �pD �lA �h> he;                     V/ 
V/ �V/ �V/ �V/ �V/ �V/ �W0 �Y1 �[3 �]5 �_7 �a8 �c: .                xL ~Q ��R ��S ��T ��T ��U ��W ��o                         �W �T Q ={M TwJ YsG JoD +kA                             V/ 
V/ �V/ �V/ �V/ �V/ �V/ �V/ �X0 �Z2 �\\\\4 �^6 �\`7 w                    kA }lB �nC �oD �pF �rG �sH �sH �                                                                                        V/ 
V/ �V/ �V/ �V/ �V/ �V/ �V/ �W/ �X1 �Z3 �\\\\4 �^6                     j@ }kA �lB �nC �oD �pE �qF �rG �                                                                                        V/ 
V/ �V/ �V/ �V/ �V/ �V/ �V/ �V/ �W0 �Y2 �[3 R                        h> }i? �j@ �lB �mC �nC �oD �pE �                                                                                        V/ 
V/ �V/ �V/ �V/ �V/ �V/ �V/ �V/ �V/ �W0 �Z2                         f= }g= �h? �j@ �kA �lB �mB �mC �                                                                                        V/ 
V/ �V/ �V/ �V/ �V/ �V/ �V/ �V/ �V/ �V/ 2                            d; }e< �f= �g> �i? �j@ �j@ �kA �                                                                                        V/ 
V/ �V/ �V/ �V/ �V/ �V/ �V/ �V/ �V/ ~                                b9 }c: �d; �e< �f= �g> �h> �i? �                                                                                        V/ 
V/ �V/ �V/ �V/ �V/ �V/ �V/ �V/ �V/                                 \`7 }a8 �b9 �c: �d; �e< �f< �f= �                                                                                        V/ V/ TV/ pV/ nV/ nV/ nV/ nV/ oV/ :                                    _6 6\`7 oa8 nb9 nc: nd; nd; pe; C                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ������  ������  ������  ������  ������  ������  ������  ������  ������  ������  ������  ����  ���>�  ����  ����  �� �  ��  �  ��  �  ��  ?�  ��  �  ��  �  ��  ��  ��  �  ��  >   ��     ��\`    ��\`    � �    ��   ��   ��   ��?�  ��?��  ��?��  ��?��  ��?��  ��?��  �?�?��  ��?��  ��?��  ������  ������  ������  ������  ������  ������  ������  ������  (       @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             V/ V/ XV/ \\\\V/ \\\\V/ ]X1 /                    L, ~S I�i \`�i _�i _�i [�i         �_ �\\\\ V�X \\\\�S \\\\{N ^wJ ,                        V/ KV/ �V/ �V/ �W0 �Y1 �                    d= BgA �b ��k ��k ��k ��k ��k �s �c ��_ ��Z ��U �}P �xL 6                        V/ KV/ �V/ �V/ �X1 �Z3 �                pE mC �b= �pJ ��j ��k ��k ��k �k J�k A�g �c ��] ��X ��T y                            V/ KV/ �V/ �V/ �Y1 �[3 �                oD fqF �nE �\`= ��Y ��l ��k ��k ��k Ϟk ˝j ��f ��\` ��[ ��V                             V/ KV/ �V/ �W/ �Z2 �\\\\4 �            mC #oD �rG �uI �lE �hD ��e ��k ��k ��k ��k ��k ��h ��c �^ F                        V/ V/ V/ KV/ �V/ �W0 �Z3 �]5 �        h> mC �pE �sH �wK �wL �hC �yP ��k ��k ��k ��k ��k ��i ��e ��[                         V/ *V/ zV/ KV/ �V/ �W0 �[3 �]5 �        kA @mB �pE �tI �xL �{N �wL �fC ��] ��l ��k ��k ��k ��j ͚g                         �w 	]5\\\\W0 oV/ KV/ �V/ �W0 �[3 �]5 �    g> j@ �mB �qF �tI �xL �|O �|P �hC �mI ��k ��k ��k ��l����                ��F��J ��NIĢ6�d<�V/ �V/ KV/ �V/ �W0 �[3 �]5 �    g= ci? �mB �pE �tH �xL �{N �wM �eB ��[ ��k ��k ��k ��j ���3��ڑU�ݩ�ڜ�ٜF��uk߾Dҽ�1��c�]5 �W0 �V/ KV/ �V/ �W0 �Z3 �]5 �d; e< �i? �lB �pE �sH �wK �wL �hC �vN ��j ��k ��k ��k ��j ��z�ܿ^��ֈ��׍��Ԃ���Z���!�mC�a8 �[4 �W0 �V/ KV/ �V/ �W/ �Z2 �\\\\4 �b9 �d; �h> �kA �oD �qF BuJ �mE �fB ��d ��k ��k ��k ��k ��k ��g ��{�Ϊ=�ܽM�ٸD���'�uJ�h> �b9 �[3 �W0 6V/ KV/ �V/ �V/ �Y1 �\\\\4 �\`8 �c: �g= �j@ �mC �zK lD �_< ��W ��l ��k ��k ��k ��k ؝j ��f ��_ ��_��e
��]	�wK�nC �g= �\`7 �[3 L' V/ KV/ �V/ �V/ �X1 �[3 �_6 �b9 �e< �h? �kA %    \\\\9 �mG ��i ��k ��k ��k ��k e�k 9�g Քb ��] ��W �Q �yL �sG �lA �e< �\`7 �[3     V/ KV/ �V/ �V/ �W0 �Z2 �]5 �a8 �d; �f= j       eA ��a ��l ��l ��k ��k ��k     �d .�_ ��Z �U �}O �vJ �pE �j? �d; v_7         V/ KV/ �V/ �V/ �V/ �X1 �\\\\4 �_7 �b9 �e;        |P ��Y ��Z ��[ ��\\\\ �a A            �\\\\ �W 7�R nzM �tH �nC \\\\i? !a9             V/ KV/ �V/ �V/ �V/ �W0 �Z2 �]5 �_7 G        j? lA �mC �oD �qF �sG �sH +                                                        V/ KV/ �V/ �V/ �V/ �V/ �X1 �[3 �\`7         b8 i? �j@ �mB �nD �pE �pE +                                                        V/ KV/ �V/ �V/ �V/ �V/ �V/ �X1 )            _6 f= �g> �i@ �kA �lB �mC +                                                        V/ LV/ �V/ �V/ �V/ �V/ �V/ q                ]4 c: �d; �f= �h> �i? �i? +                                                        V/ @V/ �V/ �V/ �V/ �V/ �V/                 [2 \`8 �b9 �c: �e; �f< �f= $                                                        V/ V/ V/ V/ V/ V/                         _6 \`7 a9 c: d; d;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ����������������������������������0��0��� ����������� �� ��   � � �00�p8�p?�����������������������������������(                                                                                                                                                                                                                                    V/ 'V/ ;W0 *Z3     ^: �] 2�k =�j %    �] #�V <{N (j?         V/ �V/ �X1 �\\\\4     h@ LvM �i ��k ʞk A�c ƉY �Q a            V/ �V/ �Z2 �[4 nC qF �lE ��Z ��l ��k �h ��\` ��V         V/ 	V/ �W0 �[3 �[4 mC rrG �wK �tL ��e ��k ��j�d8        ��(
\\\\5VV/ �W0 �[3 �f= 1kA �rG �zM �qI ��^ ��k ��z���z0��#��R^�}#�b:�V/ �W0 �Z3 �d; �j@ �qF �qH �zP ��j ��k ��r�ƤB�ڽ]㫆*�lC�[3 �V/ �V/ �Z2 �a8 �g> �jA GlF c ��l ��k ��e �a��^�sH�c: �[4 7V/ �V/ �X1 �^6 �c: �^: �T Œa ��d ��n 
�\` @�V �xK �mB �d; -    V/ �V/ �V/ �Z2 �_6  mB 
mC �pE �sG �        yL tH lA         V/ �V/ �V/ �W/ d    c: e< �h? �j@ �                            V/ RV/ |V/ hV/     _7 a9 ^d; }f< A                                                                                                                                                            ��  ��  ��  ��  O              c      ��  ��  ��  ",
      "file": "/favicon.ico",
    },
    Object {
      "content": "<!doctype html>
<html lang=\\"en\\">
<head>
  <meta charset=\\"utf-8\\">
  <title>TestWeb</title>
  <base href=\\"/\\">
  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">
  <link rel=\\"icon\\" type=\\"image/x-icon\\" href=\\"favicon.ico\\">
</head>
<body class=\\"dark\\">
  <proj-root></proj-root>
</body>
</html>
",
      "file": "/index.html",
    },
    Object {
      "content": "import { enableProdMode } from '@angular/core'
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic'
import { environment } from '@proj/test-web/environments'

import { AppModule } from './app/app.module'

if (environment.production) {
  enableProdMode()
}

platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch((err) => console.error(err))
",
      "file": "/main.ts",
    },
    Object {
      "content": "/**
 * This file includes polyfills needed by Angular and is loaded before the app.
 * You can add your own extra polyfills to this file.
 *
 * This file is divided into 2 sections:
 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
 *      file.
 *
 * The current setup is for so-called \\"evergreen\\" browsers; the last versions of browsers that
 * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
 * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
 *
 * Learn more in https://angular.io/guide/browser-support
 */

/***************************************************************************************************
 * BROWSER POLYFILLS
 */

/**
 * IE11 requires the following for NgClass support on SVG elements
 */
// import 'classlist.js';  // Run \`npm install --save classlist.js\`.

/**
 * Web Animations \`@angular/platform-browser/animations\`
 * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.
 * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).
 */
// import 'web-animations-js';  // Run \`npm install --save web-animations-js\`.

/**
 * By default, zone.js will patch all possible macroTask and DomEvents
 * user can disable parts of macroTask/DomEvents patch by setting following flags
 * because those flags need to be set before \`zone.js\` being loaded, and webpack
 * will put import in the top of bundle, so user need to create a separate file
 * in this directory (for example: zone-flags.ts), and put the following flags
 * into that file, and then add the following code before importing zone.js.
 * import './zone-flags';
 *
 * The flags allowed in zone-flags.ts are listed here.
 *
 * The following flags will work for all browsers.
 *
 * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
 * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
 * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
 *
 *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
 *  with the following flag, it will bypass \`zone.js\` patch for IE/Edge
 *
 *  (window as any).__Zone_enable_cross_context_check = true;
 *
 */

/***************************************************************************************************
 * Zone JS is required by default for Angular itself.
 */
import 'zone.js';  // Included with Angular CLI.


/***************************************************************************************************
 * APPLICATION IMPORTS
 */
",
      "file": "/polyfills.ts",
    },
    Object {
      "content": "/* You can add global styles to this file, and also import other style files */
",
      "file": "/styles.css",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "apps/test-web/src",
}
`;

exports[`init generator should run successfully with default options 47`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/about/feature",
  "sourceRoot": "libs/test-web/about/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/about/feature/src/**/*.ts",
          "libs/test-web/about/feature/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/about/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/about/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 48`] = `
Object {
  "root": "libs/test-web/about/feature",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-about-feature.component.ts",
    "/src/lib/test-web-about-feature.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 49`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-about-feature.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { TestWebCoreDataAccessService } from '@proj/test-web/core/data-access'
import { environment } from '@proj/test-web/core/feature'
import { map } from 'rxjs/operators'

@Component({
  template: \`
    <ui-page headerTitle=\\"About\\">
      <div class=\\"dark:bg-gray-800 px-6 py-4 mb-3 md:mb-6 rounded-lg shadow\\">
        <ng-container *ngIf=\\"me$ | async as user\\">
          <div class=\\"flex items-center justify-between mb-3 md:mb-6\\">
            <div class=\\"flex items-center\\">
              <div class=\\"flex-shrink-0 h-20 w-20\\">
                <img class=\\"h-20 w-20 rounded-full\\" src=\\"/assets/images/logo.png\\" alt=\\"\\" />
              </div>
              <div class=\\"ml-4\\">
                <div class=\\"text-lg font-medium text-gray-900 dark:text-gray-200\\">
                  @nxpm/stack
                </div>
                <div class=\\"text-lg text-indigo-500\\">
                  <a href=\\"https://github.com/nxpm/stack\\" target=\\"_blank\\">github.com/nxpm/stack</a>
                </div>
              </div>
            </div>
          </div>
          <div class=\\"flex flex-col space-y-3\\">
            <pre class=\\"p-4 text-xs border border-gray-700 rounded-md \\">Your Account: {{ me$ | async | json }}</pre>
            <pre class=\\"p-4 text-xs border border-gray-700 rounded-md \\">Environment: {{ environment | json }}</pre>
            <pre class=\\"p-4 text-xs border border-gray-700 rounded-md \\">API Uptime: {{ uptime$ | async }}</pre>
          </div>
        </ng-container>
      </div>
    </ui-page>
  \`,
})
export class TestWebAboutFeatureComponent {
  environment = environment
  me$ = this.data.me().pipe(map((res) => res?.data?.me))
  uptime$ = this.data.uptimeWatch({}, { pollInterval: 1000 }).valueChanges.pipe(map((res) => res?.data?.uptime))
  constructor(private readonly data: TestWebCoreDataAccessService) {}
}
",
      "file": "/lib/test-web-about-feature.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'
import { TestWebUiPageModule } from '@proj/test-web/ui/page'
import { TestWebAboutFeatureComponent } from './test-web-about-feature.component'

@NgModule({
  declarations: [TestWebAboutFeatureComponent],
  imports: [
    CommonModule,
    RouterModule.forChild([{ path: '', pathMatch: 'full', component: TestWebAboutFeatureComponent }]),
    TestWebUiPageModule,
  ],
})
export class TestWebAboutFeatureModule {}
",
      "file": "/lib/test-web-about-feature.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/about/feature/src",
}
`;

exports[`init generator should run successfully with default options 50`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/account/feature",
  "sourceRoot": "libs/test-web/account/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/account/feature/src/**/*.ts",
          "libs/test-web/account/feature/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/account/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/account/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 51`] = `
Object {
  "root": "libs/test-web/account/feature",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/account-email/account-email.component.ts",
    "/src/lib/account-email/account-email.module.ts",
    "/src/lib/account-email/account-email.store.ts",
    "/src/lib/account-password/account-password.component.ts",
    "/src/lib/account-password/account-password.module.ts",
    "/src/lib/account-password/account-password.store.ts",
    "/src/lib/account-profile/account-profile.component.ts",
    "/src/lib/account-profile/account-profile.module.ts",
    "/src/lib/account-profile/account-profile.store.ts",
    "/src/lib/test-web-account-feature.component.ts",
    "/src/lib/test-web-account-feature.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 52`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-account-feature.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { AccountCreateEmailInput, Email } from '@proj/test-web/core/data-access'
import { AccountEmailStore } from './account-email.store'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <ng-container *ngIf=\\"vm.loading\\">
        <div class=\\"flex py-4 justify-center items-center shadow rounded-lg bg-gray-100 dark:bg-gray-800 mb-3\\">
          <ui-loader></ui-loader>
        </div>
      </ng-container>
      <ng-container *ngIf=\\"vm.errors\\">
        <div class=\\"p-4 shadow rounded-lg bg-gray-100 dark:bg-gray-800\\">
          <div class=\\"font-semibold\\">An error occurred:</div>
          <pre class=\\"text-red-700\\">{{ vm.errors }}</pre>
        </div>
      </ng-container>
      <ng-container *ngIf=\\"vm.emails\\">
        <div class=\\"flex flex-col space-y-3 md:space-y-6\\">
          <div class=\\"flex flex-col shadow rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-800\\">
            <div class=\\"px-4 py-2 dark:bg-gray-700 flex items-center font-semibold\\">Emails</div>
            <div class=\\"p-4\\">
              <account-email-list (deleteEmail)=\\"deleteEmail($event)\\" [emails]=\\"vm.emails\\"></account-email-list>
            </div>
          </div>
          <div class=\\"flex flex-col shadow rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-800\\">
            <div class=\\"px-4 py-2 dark:bg-gray-700 flex items-center font-semibold\\">Select Primary Email</div>
            <div class=\\"p-4\\">
              <account-email-primary-form
                [emails]=\\"vm.emails\\"
                (send)=\\"setPrimaryEmail($event)\\"
              ></account-email-primary-form>
            </div>
          </div>
          <div class=\\"flex flex-col shadow rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-800\\">
            <div class=\\"px-4 py-2 dark:bg-gray-700 flex items-center font-semibold\\">Add Email</div>
            <div class=\\"p-4\\">
              <account-email-form (send)=\\"addEmail($event)\\"></account-email-form>
            </div>
          </div>
        </div>
      </ng-container>
    </ng-container>
  \`,
  providers: [AccountEmailStore],
})
export class AccountEmailComponent {
  readonly vm$ = this.store.vm$

  constructor(private readonly store: AccountEmailStore) {}

  addEmail(email: AccountCreateEmailInput) {
    this.store.addEmail(email)
  }

  deleteEmail(email: Email) {
    if (window.confirm('Are you sure?')) {
      this.store.deleteEmail(email)
    }
  }

  setPrimaryEmail(email: Email) {
    this.store.setPrimaryEmail(email)
  }

  ngOnInit(): void {
    this.store.loadEmailsEffect()
  }
}
",
      "file": "/lib/account-email/account-email.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import {
  AccountUiEmailFormModule,
  AccountUiEmailListModule,
  AccountUiEmailPrimaryFormModule,
} from '@proj/test-web/account/ui'
import { TestWebUiLoaderModule } from '@proj/test-web/ui/loader'
import { AccountEmailComponent } from './account-email.component'

@NgModule({
  declarations: [AccountEmailComponent],
  imports: [
    CommonModule,
    RouterModule.forChild([
      {
        path: '',
        component: AccountEmailComponent,
      },
    ]),
    AccountUiEmailListModule,
    AccountUiEmailPrimaryFormModule,
    AccountUiEmailFormModule,
    TestWebUiLoaderModule,
  ],
})
export class AccountEmailModule {}
",
      "file": "/lib/account-email/account-email.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'

import { ComponentStore, tapResponse } from '@ngrx/component-store'
import { AccountCreateEmailInput, TestWebCoreDataAccessService, Email } from '@proj/test-web/core/data-access'
import { delay, mergeMap, switchMap, tap } from 'rxjs/operators'

interface AccountEmailState {
  emails?: Email[] | null;
  errors?: any
  loading: boolean
}

@Injectable()
export class AccountEmailStore extends ComponentStore<AccountEmailState> {
  constructor(private readonly data: TestWebCoreDataAccessService) {
    super({ loading: false })
  }

  readonly vm$ = this.select(({ emails, errors, loading }) => ({ emails, errors, loading }))

  readonly addEmail = this.effect<AccountCreateEmailInput>((input$) =>
    input$.pipe(
      mergeMap((input) =>
        this.data.accountCreateEmail({ input }).pipe(
          tapResponse(
            ({ errors }) => {
              this.patchState({ errors })
              this.loadEmailsEffect()
            },
            (errors) => this.patchState({ errors, loading: false }),
          ),
        ),
      ),
    ),
  )

  readonly deleteEmail = this.effect<Email>((email$) =>
    email$.pipe(
      mergeMap((email) =>
        this.data.accountDeleteEmail({ emailId: email?.id as string }).pipe(
          tapResponse(
            ({ errors }) => {
              this.patchState({ errors })
              this.loadEmailsEffect()
            },
            (errors) => this.patchState({ errors, loading: false }),
          ),
        ),
      ),
    ),
  )

  readonly loadEmailsEffect = this.effect((trigger$) => {
    return trigger$.pipe(
      tap(() => this.setLoading(true)),
      switchMap(() =>
        this.data.accountEmails({}, { fetchPolicy: 'no-cache' }).pipe(
          tapResponse(
            ({ data, errors }) => {
              this.patchState({ emails: data?.accountEmails, loading: false, errors })
            },
            (errors) => this.patchState({ errors, loading: false }),
          ),
        ),
      ),
    )
  })

  readonly setPrimaryEmail = this.effect<Email>((email$) =>
    email$.pipe(
      mergeMap((email) =>
        this.data.accountMarkEmailPrimary({ emailId: email?.id as string }).pipe(
          tapResponse(
            ({ errors }) => {
              this.patchState({ errors })
              this.loadEmailsEffect()
            },
            (errors) => this.patchState({ errors, loading: false }),
          ),
        ),
      ),
    ),
  )

  private readonly setLoading = this.updater((state, loading: boolean) => ({ ...state, loading }))
}
",
      "file": "/lib/account-email/account-email.store.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { AccountUpdatePasswordInput } from '@proj/test-web/core/data-access'
import { AccountPasswordStore } from './account-password.store'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <ng-container *ngIf=\\"vm.loading\\">
        <div class=\\"flex py-4 justify-center items-center shadow rounded-lg bg-gray-100 dark:bg-gray-800 mb-3\\">
          <ui-loader></ui-loader>
        </div>
      </ng-container>
      <ng-container *ngIf=\\"vm.errors\\">
        <div class=\\"p-4 shadow rounded-lg bg-gray-100 dark:bg-gray-800\\">
          <div class=\\"font-semibold\\">An error occurred:</div>
          <pre class=\\"text-red-700\\">{{ vm.errors }}</pre>
        </div>
      </ng-container>
      <ng-container *ngIf=\\"!vm.loading && !vm.errors\\">
        <div class=\\"flex flex-col space-y-3 md:space-y-6\\">
          <div class=\\"flex flex-col shadow rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-800\\">
            <div class=\\"px-4 py-2 dark:bg-gray-700 flex items-center font-semibold\\">Change Password</div>
            <div class=\\"p-4\\">
              <account-password-form (send)=\\"updatePassword($event)\\"></account-password-form>
            </div>
          </div>
        </div>
      </ng-container>
    </ng-container>
  \`,
  providers: [AccountPasswordStore],
})
export class AccountPasswordComponent {
  readonly vm$ = this.store.vm$

  constructor(private readonly store: AccountPasswordStore) {}

  updatePassword(password: AccountUpdatePasswordInput) {
    this.store.updatePasswordEffect(password)
  }
}
",
      "file": "/lib/account-password/account-password.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { AccountUiPasswordFormModule } from '@proj/test-web/account/ui'
import { TestWebUiLoaderModule } from '@proj/test-web/ui/loader'
import { AccountPasswordComponent } from './account-password.component'

@NgModule({
  declarations: [AccountPasswordComponent],
  imports: [
    CommonModule,
    RouterModule.forChild([{ path: '', component: AccountPasswordComponent }]),
    AccountUiPasswordFormModule,
    TestWebUiLoaderModule,
  ],
})
export class AccountPasswordModule {}
",
      "file": "/lib/account-password/account-password.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'

import { ComponentStore, tapResponse } from '@ngrx/component-store'
import { AccountUpdatePasswordInput, TestWebCoreDataAccessService } from '@proj/test-web/core/data-access'
import { mergeMap } from 'rxjs/operators'

interface AccountPasswordState {
  errors?: any
  loading: boolean
}

@Injectable()
export class AccountPasswordStore extends ComponentStore<AccountPasswordState> {
  constructor(private readonly data: TestWebCoreDataAccessService) {
    super({ loading: false })
  }

  readonly vm$ = this.select(({ errors, loading }) => ({ errors, loading }))

  readonly updatePasswordEffect = this.effect<AccountUpdatePasswordInput>((input$) =>
    input$.pipe(
      mergeMap((input) =>
        this.data.accountUpdatePassword({ input }).pipe(
          tapResponse(
            ({ errors }) => this.patchState({ errors }),
            (errors) => this.patchState({ errors, loading: false }),
          ),
        ),
      ),
    ),
  )
}
",
      "file": "/lib/account-password/account-password.store.ts",
    },
    Object {
      "content": "import { Component, OnInit } from '@angular/core'
import { AccountUpdateProfileInput } from '@proj/test-web/core/data-access'
import { AccountProfileStore } from './account-profile.store'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <ng-container *ngIf=\\"vm.loading\\">
        <div class=\\"flex py-4 justify-center items-center shadow rounded-lg bg-gray-100 dark:bg-gray-800 mb-3 md:mb-6\\">
          <ui-loader></ui-loader>
        </div>
      </ng-container>
      <ng-container *ngIf=\\"vm.errors\\">
        <div class=\\"p-4 shadow rounded-lg bg-gray-100 dark:bg-gray-800 mb-3 md:mb-6\\">
          <div class=\\"font-semibold\\">An error occurred:</div>
          <pre class=\\"text-red-700\\">{{ vm.errors }}</pre>
        </div>
      </ng-container>
      <ng-container *ngIf=\\"vm.profile\\">
        <div class=\\"flex flex-col space-y-3 md:space-y-6\\">
          <div class=\\"flex flex-col shadow rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-800\\">
            <div class=\\"px-4 py-2 dark:bg-gray-700 flex items-center font-semibold\\">Profile</div>
            <div class=\\"p-4\\">
              <account-profile-form [user]=\\"vm.profile\\" (send)=\\"updateProfile($event)\\"></account-profile-form>
            </div>
          </div>
          <div class=\\"flex flex-col shadow rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-800\\">
            <div class=\\"px-4 py-2 dark:bg-gray-700 flex items-center font-semibold\\">Username</div>
            <div class=\\"p-4\\">
              <account-username-form [user]=\\"vm.profile\\" (send)=\\"updateUsername($event)\\"></account-username-form>
            </div>
          </div>
        </div>
      </ng-container>
    </ng-container>
  \`,
  providers: [AccountProfileStore],
})
export class AccountProfileComponent implements OnInit {
  readonly vm$ = this.store.vm$

  constructor(private readonly store: AccountProfileStore) {}

  updateProfile(input: AccountUpdateProfileInput) {
    this.store.updateProfileEffect(input)
  }

  updateUsername({ username }: { username: string }) {
    this.store.updateUsernameEffect(username)
  }

  ngOnInit(): void {
    this.store.loadProfileEffect()
  }
}
",
      "file": "/lib/account-profile/account-profile.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { AccountUiProfileFormModule, AccountUiUsernameFormModule } from '@proj/test-web/account/ui'
import { TestWebUiLoaderModule } from '@proj/test-web/ui/loader'
import { AccountProfileComponent } from './account-profile.component'

@NgModule({
  declarations: [AccountProfileComponent],
  imports: [
    CommonModule,
    RouterModule.forChild([
      {
        path: '',
        component: AccountProfileComponent,
      },
    ]),
    TestWebUiLoaderModule,
    AccountUiProfileFormModule,
    AccountUiUsernameFormModule,
  ],
})
export class AccountProfileModule {}
",
      "file": "/lib/account-profile/account-profile.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'

import { ComponentStore, tapResponse } from '@ngrx/component-store'
import { AccountUpdateProfileInput, TestWebCoreDataAccessService, User } from '@proj/test-web/core/data-access'
import { mergeMap, switchMap, tap } from 'rxjs/operators'

interface AccountProfileState {
  errors?: any
  loading: boolean
  profile?: User | null
}

@Injectable()
export class AccountProfileStore extends ComponentStore<AccountProfileState> {
  constructor(private readonly data: TestWebCoreDataAccessService) {
    super({ loading: false })
  }

  readonly vm$ = this.select(({ profile, errors, loading }) => ({ profile, errors, loading }))

  readonly updateProfileEffect = this.effect<AccountUpdateProfileInput>((input$) =>
    input$.pipe(
      mergeMap((input) =>
        this.data.accountUpdateProfile({ input }).pipe(
          tapResponse(
            ({ errors }) => {
              this.patchState({ errors })
              this.loadProfileEffect()
            },
            (errors) => this.patchState({ errors, loading: false }),
          ),
        ),
      ),
    ),
  )

  readonly updateUsernameEffect = this.effect<string>((username$) =>
    username$.pipe(
      mergeMap((username) =>
        this.data.accountUpdateUsername({ username }).pipe(
          tapResponse(
            ({ errors }) => {
              this.patchState({ errors })
              this.loadProfileEffect()
            },
            (errors) => this.patchState({ errors, loading: false }),
          ),
        ),
      ),
    ),
  )

  readonly loadProfileEffect = this.effect(($) => {
    return $.pipe(
      tap(() => this.setLoading(true)),
      switchMap(() =>
        this.data.accountProfile({}, { fetchPolicy: 'no-cache' }).pipe(
          tapResponse(
            ({ data, errors }) => {
              this.patchState({ profile: data?.accountProfile, loading: false, errors })
            },
            (errors) => this.patchState({ errors, loading: false }),
          ),
        ),
      ),
    )
  })

  private readonly setLoading = this.updater((state, loading: boolean) => ({ ...state, loading }))
}
",
      "file": "/lib/account-profile/account-profile.store.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'

@Component({
  template: \`
    <ui-sidebar-page headerTitle=\\"Account\\" [links]=\\"links\\">
      <router-outlet></router-outlet>
    </ui-sidebar-page>
  \`,
})
export class TestWebAccountFeatureComponent {
  links = [
    { label: 'Profile', path: 'profile', icon: '' },
    { label: 'Email', path: 'email', icon: '' },
    { label: 'Password', path: 'password', icon: '' },
  ]
}
",
      "file": "/lib/test-web-account-feature.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiSidebarPageModule } from '@proj/test-web/ui/sidebar-page'
import { TestWebAccountFeatureComponent } from './test-web-account-feature.component'

@NgModule({
  declarations: [TestWebAccountFeatureComponent],
  imports: [
    CommonModule,
    RouterModule.forChild([
      {
        path: '',
        component: TestWebAccountFeatureComponent,
        children: [
          { path: '', pathMatch: 'full', redirectTo: 'profile' },
          {
            path: 'email',
            loadChildren: () => import('./account-email/account-email.module').then((m) => m.AccountEmailModule),
          },
          {
            path: 'password',
            loadChildren: () =>
              import('./account-password/account-password.module').then((m) => m.AccountPasswordModule),
          },
          {
            path: 'profile',
            loadChildren: () => import('./account-profile/account-profile.module').then((m) => m.AccountProfileModule),
          },
        ],
      },
    ]),
    TestWebUiSidebarPageModule,
  ],
})
export class TestWebAccountFeatureModule {}
",
      "file": "/lib/test-web-account-feature.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/account/feature/src",
}
`;

exports[`init generator should run successfully with default options 53`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/account/ui",
  "sourceRoot": "libs/test-web/account/ui/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/account/ui/src/**/*.ts",
          "libs/test-web/account/ui/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/account/ui/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/account/ui",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 54`] = `
Object {
  "root": "libs/test-web/account/ui",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/email-form/account-ui-email-form.component.ts",
    "/src/lib/email-form/account-ui-email-form.module.ts",
    "/src/lib/email-list/account-ui-email-list.component.ts",
    "/src/lib/email-list/account-ui-email-list.module.ts",
    "/src/lib/email-primary-form/account-ui-email-primary-form.component.ts",
    "/src/lib/email-primary-form/account-ui-email-primary-form.module.ts",
    "/src/lib/password-form/account-ui-password-form.component.ts",
    "/src/lib/password-form/account-ui-password-form.module.ts",
    "/src/lib/profile-form/account-ui-profile-form.component.ts",
    "/src/lib/profile-form/account-ui-profile-form.module.ts",
    "/src/lib/test-web-account-ui.module.ts",
    "/src/lib/username-form/account-ui-username-form.component.ts",
    "/src/lib/username-form/account-ui-username-form.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 55`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/email-form/account-ui-email-form.module'
export * from './lib/email-list/account-ui-email-list.module'
export * from './lib/email-primary-form/account-ui-email-primary-form.module'
export * from './lib/password-form/account-ui-password-form.module'
export * from './lib/profile-form/account-ui-profile-form.module'
export * from './lib/username-form/account-ui-username-form.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component, EventEmitter, Output } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { TestWebUiFormField } from '@proj/test-web/ui/form'

@Component({
  selector: 'account-email-form',
  template: \`
    <ui-form (submitForm)=\\"submit($event.payload)\\" [model]=\\"model\\" [fields]=\\"fields\\" [form]=\\"form\\"></ui-form>
    <div class=\\"text-right\\">
      <ui-button (handler)=\\"submit(model)\\" [disabled]=\\"!form.valid\\" label=\\"Save\\"></ui-button>
    </div>
  \`,
})
export class AccountUiEmailFormComponent {
  @Output() send = new EventEmitter()
  model = {}
  form = new FormGroup({})
  fields = [TestWebUiFormField.email('email', { required: true })]

  submit(payload: any) {
    this.send.emit(payload)
  }
}
",
      "file": "/lib/email-form/account-ui-email-form.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiButtonModule } from '@proj/test-web/ui/button'
import { TestWebUiFormModule } from '@proj/test-web/ui/form'
import { AccountUiEmailFormComponent } from './account-ui-email-form.component'

@NgModule({
  exports: [AccountUiEmailFormComponent],
  declarations: [AccountUiEmailFormComponent],
  imports: [CommonModule, RouterModule, TestWebUiFormModule, TestWebUiButtonModule],
})
export class AccountUiEmailFormModule {}
",
      "file": "/lib/email-form/account-ui-email-form.module.ts",
    },
    Object {
      "content": "import { Component, EventEmitter, Input, Output } from '@angular/core'
import { Email } from '@proj/test-web/core/data-access'

@Component({
  selector: 'account-email-list',
  template: \`
    <ng-container *ngFor=\\"let item of emails\\">
      <div class=\\"flex justify-between items-center\\">
        <div class=\\"flex items-center text-lg font-semibold tracking-wider\\">
          {{ item.email }}
        </div>
        <div class=\\"flex items-center space-x-2\\">
          <span class=\\"rounded rounded-full px-2 text-xs bg-blue-100 text-blue-800\\" *ngIf=\\"item.primary\\">
            Primary
          </span>
          <span
            class=\\"rounded rounded-full px-2 text-xs\\"
            [ngClass]=\\"{
              'bg-yellow-100 text-yellow-800': item.public,
              'bg-green-100 text-green-800': !item.public
            }\\"
            [class.badge-primary]=\\"!item.public\\"
            [class.badge-warning]=\\"item.public\\"
          >
            {{ item.public ? 'Public' : 'Private' }}
          </span>
          <button class=\\"text-red-900\\" (click)=\\"deleteEmail.next(item)\\">
            <ui-icon icon=\\"trash\\"></ui-icon>
          </button>
        </div>
      </div>
    </ng-container>
  \`,
})
export class AccountUiEmailListComponent {
  @Input() emails?: Email[]
  @Output() deleteEmail = new EventEmitter<Email>()
}
",
      "file": "/lib/email-list/account-ui-email-list.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiIconModule } from '@proj/test-web/ui/icon'
import { AccountUiEmailListComponent } from './account-ui-email-list.component'

@NgModule({
  exports: [AccountUiEmailListComponent],
  declarations: [AccountUiEmailListComponent],
  imports: [CommonModule, RouterModule, TestWebUiIconModule],
})
export class AccountUiEmailListModule {}
",
      "file": "/lib/email-list/account-ui-email-list.module.ts",
    },
    Object {
      "content": "import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { Email } from '@proj/test-web/core/data-access'
import { TestWebUiFormField } from '@proj/test-web/ui/form'

@Component({
  selector: 'account-email-primary-form',
  template: \`
    <ui-form (submitForm)=\\"submit($event.payload)\\" [model]=\\"model\\" [fields]=\\"fields\\" [form]=\\"form\\"></ui-form>
    <div class=\\"text-right\\">
      <ui-button (handler)=\\"submit(model)\\" [disabled]=\\"!form.valid\\" label=\\"Save\\"></ui-button>
    </div>
  \`,
})
export class AccountUiEmailPrimaryFormComponent implements OnChanges {
  @Input() emails: Email[] = []
  @Output() send = new EventEmitter()

  form = new FormGroup({})
  fields: TestWebUiFormField[] = []
  model = {}
  submit(payload: any) {
    this.send.emit(payload)
  }

  ngOnChanges(): void {
    this.model = { ...this.emails.find((item) => item.primary) }
    this.fields = [
      TestWebUiFormField.select('id', {
        required: true,
        options: this.emails?.map((email) => ({ value: email.id, label: email.email })),
      }),
    ]
  }
}
",
      "file": "/lib/email-primary-form/account-ui-email-primary-form.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiButtonModule } from '@proj/test-web/ui/button'
import { TestWebUiFormModule } from '@proj/test-web/ui/form'
import { AccountUiEmailPrimaryFormComponent } from './account-ui-email-primary-form.component'

@NgModule({
  exports: [AccountUiEmailPrimaryFormComponent],
  declarations: [AccountUiEmailPrimaryFormComponent],
  imports: [CommonModule, RouterModule, TestWebUiFormModule, TestWebUiButtonModule],
})
export class AccountUiEmailPrimaryFormModule {}
",
      "file": "/lib/email-primary-form/account-ui-email-primary-form.module.ts",
    },
    Object {
      "content": "import { Component, EventEmitter, Output } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { TestWebUiFormField } from '@proj/test-web/ui/form'

@Component({
  selector: 'account-password-form',
  template: \`
    <ui-form (submitForm)=\\"submit($event.payload)\\" [model]=\\"model\\" [fields]=\\"fields\\" [form]=\\"form\\"></ui-form>
    <div class=\\"text-right\\">
      <ui-button (handler)=\\"submit(model)\\" [disabled]=\\"!form.valid\\" label=\\"Reset\\"></ui-button>
    </div>
  \`,
})
export class AccountUiPasswordFormComponent {
  @Output() send = new EventEmitter()
  model = {}
  form = new FormGroup({})
  fields = [
    TestWebUiFormField.password('currentPassword', { label: 'Current password', required: true, minLength: 10 }),
    TestWebUiFormField.password('password', { label: 'New password', required: true, minLength: 10 }),
    TestWebUiFormField.password('verified', { label: 'Verify new password', required: true, minLength: 10 }),
  ]

  submit(payload: any) {
    this.send.emit(payload)
  }
}
",
      "file": "/lib/password-form/account-ui-password-form.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiButtonModule } from '@proj/test-web/ui/button'
import { TestWebUiFormModule } from '@proj/test-web/ui/form'
import { AccountUiPasswordFormComponent } from './account-ui-password-form.component'

@NgModule({
  exports: [AccountUiPasswordFormComponent],
  declarations: [AccountUiPasswordFormComponent],
  imports: [CommonModule, RouterModule, TestWebUiFormModule, TestWebUiButtonModule],
})
export class AccountUiPasswordFormModule {}
",
      "file": "/lib/password-form/account-ui-password-form.module.ts",
    },
    Object {
      "content": "import { Component, EventEmitter, Input, Output } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { User, AccountUpdateProfileInput } from '@proj/test-web/core/data-access'
import { TestWebUiFormField } from '@proj/test-web/ui/form'

@Component({
  selector: 'account-profile-form',
  template: \`
    <ui-form (submitForm)=\\"submit($event.payload)\\" [model]=\\"user\\" [fields]=\\"fields\\" [form]=\\"form\\"></ui-form>
    <div class=\\"text-right\\">
      <ui-button (handler)=\\"submit($any(user))\\" [disabled]=\\"!form.valid\\" label=\\"Save\\"></ui-button>
    </div>
  \`,
})
export class AccountUiProfileFormComponent {
  @Input() user: User = {}
  @Output() send = new EventEmitter()
  form = new FormGroup({})
  fields = [
    TestWebUiFormField.input('firstName', { label: 'First name' }),
    TestWebUiFormField.input('lastName', { label: 'Last name' }),
    TestWebUiFormField.input('avatarUrl', { label: 'Avatar Url' }),
    TestWebUiFormField.input('phone', { label: 'Phone' }),
    TestWebUiFormField.input('location', { label: 'Location' }),
    TestWebUiFormField.textarea('bio', { label: 'Biography' }),
  ]

  submit({ avatarUrl, bio, firstName, lastName, location, phone }: AccountUpdateProfileInput) {
    this.send.emit({ avatarUrl, bio, firstName, lastName, location, phone })
  }
}
",
      "file": "/lib/profile-form/account-ui-profile-form.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiButtonModule } from '@proj/test-web/ui/button'
import { TestWebUiFormModule } from '@proj/test-web/ui/form'
import { AccountUiProfileFormComponent } from './account-ui-profile-form.component'

@NgModule({
  exports: [AccountUiProfileFormComponent],
  declarations: [AccountUiProfileFormComponent],
  imports: [CommonModule, RouterModule, TestWebUiFormModule, TestWebUiButtonModule],
})
export class AccountUiProfileFormModule {}
",
      "file": "/lib/profile-form/account-ui-profile-form.module.ts",
    },
    Object {
      "content": "
        import { NgModule } from '@angular/core';
        import { CommonModule } from '@angular/common';
        
        @NgModule({
          imports: [
            CommonModule
          ]
        })
        export class TestWebAccountUiModule { }
        ",
      "file": "/lib/test-web-account-ui.module.ts",
    },
    Object {
      "content": "import { Component, EventEmitter, Input, Output } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { User } from '@proj/test-web/core/data-access'
import { TestWebUiFormField } from '@proj/test-web/ui/form'

@Component({
  selector: 'account-username-form',
  template: \`
    <ui-form (submitForm)=\\"submit($event.payload)\\" [model]=\\"user\\" [fields]=\\"fields\\" [form]=\\"form\\"></ui-form>
    <div class=\\"text-right\\">
      <ui-button (handler)=\\"submit($any(user))\\" [disabled]=\\"!form.valid\\" label=\\"Save\\"></ui-button>
    </div>
  \`,
})
export class AccountUiUsernameFormComponent {
  @Input() user: User = {}
  @Output() send = new EventEmitter()
  form = new FormGroup({})
  fields = [
    TestWebUiFormField.input('username', {
      minLength: 3,
      maxLength: 25,
      label: 'Username',
    }),
  ]

  submit({ username }: { username: string }) {
    this.send.emit({ username })
  }
}
",
      "file": "/lib/username-form/account-ui-username-form.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiButtonModule } from '@proj/test-web/ui/button'
import { TestWebUiFormModule } from '@proj/test-web/ui/form'
import { AccountUiUsernameFormComponent } from './account-ui-username-form.component'

@NgModule({
  exports: [AccountUiUsernameFormComponent],
  declarations: [AccountUiUsernameFormComponent],
  imports: [CommonModule, RouterModule, TestWebUiFormModule, TestWebUiButtonModule],
})
export class AccountUiUsernameFormModule {}
",
      "file": "/lib/username-form/account-ui-username-form.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/account/ui/src",
}
`;

exports[`init generator should run successfully with default options 56`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/admin/feature",
  "sourceRoot": "libs/test-web/admin/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/admin/feature/src/**/*.ts",
          "libs/test-web/admin/feature/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/admin/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/admin/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 57`] = `
Object {
  "root": "libs/test-web/admin/feature",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/admin-dashboard/admin-dashboard.component.ts",
    "/src/lib/admin-dashboard/admin-dashboard.module.ts",
    "/src/lib/admin-user/admin-user-create/admin-user-create.component.ts",
    "/src/lib/admin-user/admin-user-create/admin-user-create.module.ts",
    "/src/lib/admin-user/admin-user-create/admin-user-create.store.ts",
    "/src/lib/admin-user/admin-user-detail/admin-user-detail.component.ts",
    "/src/lib/admin-user/admin-user-detail/admin-user-detail.module.ts",
    "/src/lib/admin-user/admin-user-detail/admin-user-detail.store.ts",
    "/src/lib/admin-user/admin-user-edit/admin-user-edit.component.ts",
    "/src/lib/admin-user/admin-user-edit/admin-user-edit.module.ts",
    "/src/lib/admin-user/admin-user-edit/admin-user-edit.store.ts",
    "/src/lib/admin-user/admin-user-feature.module.ts",
    "/src/lib/admin-user/admin-user-list/admin-user-list.component.ts",
    "/src/lib/admin-user/admin-user-list/admin-user-list.module.ts",
    "/src/lib/admin-user/admin-user-list/admin-user-list.store.ts",
    "/src/lib/admin-user/admin-user-password/admin-user-password.component.ts",
    "/src/lib/admin-user/admin-user-password/admin-user-password.module.ts",
    "/src/lib/admin-user/admin-user-password/admin-user-password.store.ts",
    "/src/lib/test-web-admin-feature.component.ts",
    "/src/lib/test-web-admin-feature.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 58`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-admin-feature.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'

@Component({
  template: \`
    <div class=\\"flex py-48 justify-center align-center shadow rounded-lg bg-gray-100 dark:bg-gray-800\\">
      <div class=\\"animate-pulse\\">AdminDashboard</div>
    </div>
  \`,
})
export class AdminDashboardComponent {}
",
      "file": "/lib/admin-dashboard/admin-dashboard.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { AdminDashboardComponent } from './admin-dashboard.component'

@NgModule({
  declarations: [AdminDashboardComponent],
  imports: [CommonModule, RouterModule.forChild([{ path: '', component: AdminDashboardComponent }])],
})
export class AdminDashboardModule {}
",
      "file": "/lib/admin-dashboard/admin-dashboard.module.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { AdminCreateUserInput, Role } from '@proj/test-web/core/data-access'
import { TestWebUiFormField } from '@proj/test-web/ui/form'
import { AdminUserCreateStore } from './admin-user-create.store'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <ui-page-header title=\\"Create User\\" linkPath=\\"..\\" linkTitle=\\"Back\\"></ui-page-header>
      <user-form [fields]=\\"fields\\" [user]=\\"{}\\" (submitForm)=\\"createUser($event)\\"></user-form>
    </ng-container>
  \`,
  providers: [AdminUserCreateStore],
})
export class AdminUserCreateComponent {
  readonly vm$ = this.store.vm$
  fields = [
    TestWebUiFormField.radio('role', {
      label: 'Role',
      required: true,
      options: Object.keys(Role).map((value) => ({ value, label: value })),
    }),
    TestWebUiFormField.input('email', { label: 'Email', required: true }),
    TestWebUiFormField.input('username', { label: 'Username' }),
    TestWebUiFormField.input('firstName', { label: 'First name' }),
    TestWebUiFormField.input('lastName', { label: 'Last name' }),
  ]
  constructor(private readonly store: AdminUserCreateStore) {}

  createUser(input: AdminCreateUserInput) {
    this.store.createUserEffect(input)
  }
}
",
      "file": "/lib/admin-user/admin-user-create/admin-user-create.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { AdminUserFormModule } from '@proj/test-web/admin/ui'
import { TestWebUiPageHeaderModule } from '@proj/test-web/ui/page-header'

import { AdminUserCreateComponent } from './admin-user-create.component'

@NgModule({
  declarations: [AdminUserCreateComponent],
  imports: [
    AdminUserFormModule,
    CommonModule,
    RouterModule.forChild([{ path: '', component: AdminUserCreateComponent }]),
    TestWebUiPageHeaderModule,
  ],
})
export class AdminUserCreateModule {}
",
      "file": "/lib/admin-user/admin-user-create/admin-user-create.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { Router } from '@angular/router'
import { AdminCreateUserInput, TestWebCoreDataAccessService, User } from '@proj/test-web/core/data-access'
import { ComponentStore, tapResponse } from '@ngrx/component-store'
import { switchMap, tap } from 'rxjs/operators'

export interface UserCreateState {
  errors?: any
  loading?: boolean
  user?: User | null
}

@Injectable()
export class AdminUserCreateStore extends ComponentStore<UserCreateState> {
  constructor(private readonly data: TestWebCoreDataAccessService, private readonly router: Router) {
    super({ loading: false })
  }

  readonly errors$ = this.select((s) => s.errors)
  readonly loading$ = this.select((s) => s.loading)
  readonly user$ = this.select((s) => s.user)
  readonly vm$ = this.select(this.errors$, this.loading$, this.user$, (errors, loading, user) => ({
    errors,
    loading,
    user,
  }))

  readonly createUserEffect = this.effect<AdminCreateUserInput>((input$) =>
    input$.pipe(
      tap(() => this.patchState({ loading: true })),
      switchMap((input) =>
        this.data.adminCreateUser({ input }).pipe(
          tapResponse(
            (res) => {
              this.patchState({ user: res?.data?.adminCreateUser, errors: res.errors, loading: false })
              return this.router.navigate(['/admin/users', res.data?.adminCreateUser?.id])
            },
            (errors: any) =>
              this.patchState({
                loading: false,
                errors: errors.graphQLErrors ? errors.graphQLErrors : errors,
              }),
          ),
        ),
      ),
    ),
  )
}
",
      "file": "/lib/admin-user/admin-user-create/admin-user-create.store.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { AdminUserDetailStore } from './admin-user-detail.store'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <ui-page-header [title]=\\"'User ' + vm.user?.username\\" linkPath=\\"..\\" linkTitle=\\"Back\\"></ui-page-header>
      <ng-container *ngIf=\\"vm.user\\">
        <div class=\\"dark:bg-gray-800 px-6 py-4 rounded-md\\">
          <div class=\\"flex items-center justify-between\\">
            <div class=\\"flex items-center\\">
              <div class=\\"flex-shrink-0 h-20 w-20\\">
                <img class=\\"h-20 w-20 rounded-full\\" [attr.src]=\\"vm.user?.avatarUrl\\" alt=\\"\\" />
              </div>
              <div class=\\"ml-4\\">
                <div class=\\"text-lg font-medium text-gray-900 dark:text-gray-200\\">
                  <a [routerLink]=\\"vm.user?.id\\">
                    {{ vm.user?.name }}
                  </a>
                </div>
                <div class=\\"text-lg text-gray-500\\">
                  {{ vm.user?.email }}
                </div>
              </div>
            </div>
            <div class=\\"flex space-x-2\\">
              <ui-button link=\\"password\\" label=\\"Change Password\\"></ui-button>
              <ui-button link=\\"edit\\" label=\\"Edit\\"></ui-button>
            </div>
          </div>
        </div>
        <pre class=\\"mt-6 dark:bg-gray-800 p-4 text-xs shadow rounded-md\\">{{ vm.user | json }}</pre>
      </ng-container>
    </ng-container>
  \`,
  providers: [AdminUserDetailStore],
})
export class AdminUserDetailComponent {
  readonly vm$ = this.store.vm$

  constructor(private readonly store: AdminUserDetailStore) {}
}
",
      "file": "/lib/admin-user/admin-user-detail/admin-user-detail.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { AdminUserFormModule } from '@proj/test-web/admin/ui'
import { TestWebUiButtonModule } from '@proj/test-web/ui/button'
import { TestWebUiPageHeaderModule } from '@proj/test-web/ui/page-header'

import { AdminUserDetailComponent } from './admin-user-detail.component'

@NgModule({
  declarations: [AdminUserDetailComponent],
  imports: [
    AdminUserFormModule,
    CommonModule,
    RouterModule.forChild([{ path: '', component: AdminUserDetailComponent }]),
    TestWebUiPageHeaderModule,
    TestWebUiButtonModule,
  ],
})
export class AdminUserDetailModule {}
",
      "file": "/lib/admin-user/admin-user-detail/admin-user-detail.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { ActivatedRoute } from '@angular/router'
import { ComponentStore, tapResponse } from '@ngrx/component-store'
import { TestWebCoreDataAccessService, User } from '@proj/test-web/core/data-access'
import { pluck, switchMap, tap } from 'rxjs/operators'

export interface UserDetailState {
  errors?: any
  loading?: boolean
  user?: User | null
}

@Injectable()
export class AdminUserDetailStore extends ComponentStore<UserDetailState> {
  constructor(private readonly data: TestWebCoreDataAccessService, route: ActivatedRoute) {
    super({ loading: false })
    this.loadUserEffect(route.params.pipe(pluck('userId')))
  }

  readonly errors$ = this.select((s) => s.errors)
  readonly loading$ = this.select((s) => s.loading)
  readonly user$ = this.select((s) => s.user)
  readonly vm$ = this.select(this.errors$, this.loading$, this.user$, (errors, loading, user) => ({
    errors,
    loading,
    user: { ...user },
  }))

  readonly loadUserEffect = this.effect<string>((userId$) =>
    userId$.pipe(
      tap(() => this.setState({ loading: true })),
      switchMap((userId) =>
        this.data.adminUser({ userId }).pipe(
          tapResponse(
            (res) => this.patchState({ user: res?.data?.adminUser, errors: res.errors, loading: false }),
            (errors: any) =>
              this.patchState({
                loading: false,
                errors: errors.graphQLErrors ? errors.graphQLErrors : errors,
              }),
          ),
        ),
      ),
    ),
  )
}
",
      "file": "/lib/admin-user/admin-user-detail/admin-user-detail.store.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { AdminUpdateUserInput, Role } from '@proj/test-web/core/data-access'
import { TestWebUiFormField } from '@proj/test-web/ui/form'
import { AdminUserEditStore } from './admin-user-edit.store'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <ui-page-header [title]=\\"'Edit user ' + vm.user?.username\\" linkPath=\\"..\\" linkTitle=\\"Back\\"></ui-page-header>
      <ng-container *ngIf=\\"vm.user\\">
        <user-form [form]=\\"form\\" [fields]=\\"fields\\" [user]=\\"vm.user\\" (submitForm)=\\"updateUser($event)\\"></user-form>
      </ng-container>
    </ng-container>
  \`,
  providers: [AdminUserEditStore],
})
export class AdminUserEditComponent {
  readonly vm$ = this.store.vm$
  readonly form = new FormGroup({})
  fields = [
    TestWebUiFormField.radio('role', {
      label: 'Role',
      required: true,
      options: Object.keys(Role).map((value) => ({ value, label: value })),
    }),
    TestWebUiFormField.input('email', { label: 'Email', required: true }),
    TestWebUiFormField.input('username', { label: 'Username' }),
    TestWebUiFormField.input('firstName', { label: 'First name' }),
    TestWebUiFormField.input('lastName', { label: 'Last name' }),
    TestWebUiFormField.input('phone', { label: 'Phone' }),
    TestWebUiFormField.input('avatarUrl', { label: 'Avatar Url' }),
    TestWebUiFormField.input('location', { label: 'Location' }),
    TestWebUiFormField.textarea('bio', { label: 'Bio' }),
  ]

  constructor(private readonly store: AdminUserEditStore) {}

  updateUser(input: AdminUpdateUserInput) {
    const { role, username, firstName, lastName, phone, avatarUrl, location, bio } = input
    this.store.updateUserEffect({ role, username, firstName, lastName, phone, avatarUrl, location, bio })
  }
}
",
      "file": "/lib/admin-user/admin-user-edit/admin-user-edit.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { AdminUserFormModule } from '@proj/test-web/admin/ui'
import { TestWebUiPageHeaderModule } from '@proj/test-web/ui/page-header'

import { AdminUserEditComponent } from './admin-user-edit.component'

@NgModule({
  declarations: [AdminUserEditComponent],
  imports: [
    AdminUserFormModule,
    CommonModule,
    RouterModule.forChild([{ path: '', component: AdminUserEditComponent }]),
    TestWebUiPageHeaderModule,
  ],
})
export class AdminUserEditModule {}
",
      "file": "/lib/admin-user/admin-user-edit/admin-user-edit.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { ActivatedRoute } from '@angular/router'
import { AdminUpdateUserInput, TestWebCoreDataAccessService, User } from '@proj/test-web/core/data-access'
import { ComponentStore, tapResponse } from '@ngrx/component-store'
import { pluck, switchMap, tap, withLatestFrom } from 'rxjs/operators'

export interface UserEditState {
  errors?: any
  loading?: boolean
  user?: User | null
}

@Injectable()
export class AdminUserEditStore extends ComponentStore<UserEditState> {
  constructor(private readonly data: TestWebCoreDataAccessService, route: ActivatedRoute) {
    super({ loading: false })
    this.loadUserEffect(route.params.pipe(pluck('userId')))
  }

  readonly errors$ = this.select((s) => s.errors)
  readonly loading$ = this.select((s) => s.loading)
  readonly user$ = this.select((s) => s.user)
  readonly vm$ = this.select(this.errors$, this.loading$, this.user$, (errors, loading, user) => ({
    errors,
    loading,
    user: { ...user },
  }))

  readonly loadUserEffect = this.effect<string>((userId$) =>
    userId$.pipe(
      tap(() => this.setState({ loading: true })),
      switchMap((userId) =>
        this.data.adminUser({ userId }).pipe(
          tapResponse(
            (res) => this.patchState({ user: res?.data?.adminUser, errors: res.errors, loading: false }),
            (errors: any) =>
              this.patchState({
                loading: false,
                errors: errors.graphQLErrors ? errors.graphQLErrors : errors,
              }),
          ),
        ),
      ),
    ),
  )

  readonly updateUserEffect = this.effect<AdminUpdateUserInput>((input$) =>
    input$.pipe(
      tap(() => this.patchState({ loading: true })),
      withLatestFrom(this.user$),
      switchMap(([input, user]) =>
        this.data.adminUpdateUser({ input, userId: user?.id as string }).pipe(
          tapResponse(
            (res) => {
              this.patchState({ user: res?.data?.adminUpdateUser, errors: res.errors, loading: false })
            },
            (errors: any) =>
              this.patchState({
                loading: false,
                errors: errors.graphQLErrors ? errors.graphQLErrors : errors,
              }),
          ),
        ),
      ),
    ),
  )
}
",
      "file": "/lib/admin-user/admin-user-edit/admin-user-edit.store.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'

@NgModule({
  imports: [
    RouterModule.forChild([
      {
        path: '',
        children: [
          {
            path: '',
            loadChildren: () => import('./admin-user-list/admin-user-list.module').then((m) => m.AdminUserListModule),
          },
          {
            path: 'create',
            loadChildren: () =>
              import('./admin-user-create/admin-user-create.module').then((m) => m.AdminUserCreateModule),
          },
          {
            path: ':userId',
            children: [
              {
                path: '',
                loadChildren: () =>
                  import('./admin-user-detail/admin-user-detail.module').then((m) => m.AdminUserDetailModule),
              },
              {
                path: 'edit',
                loadChildren: () =>
                  import('./admin-user-edit/admin-user-edit.module').then((m) => m.AdminUserEditModule),
              },
              {
                path: 'password',
                loadChildren: () =>
                  import('./admin-user-password/admin-user-password.module').then((m) => m.AdminUserPasswordModule),
              },
            ],
          },
        ],
      },
    ]),
  ],
})
export class AdminUserFeatureModule {}
",
      "file": "/lib/admin-user/admin-user-feature.module.ts",
    },
    Object {
      "content": "import { Component, OnInit } from '@angular/core'
import { AdminUserListStore } from './admin-user-list.store'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <ui-page-header title=\\"Users\\" linkPath=\\"create\\" linkTitle=\\"Create User\\"></ui-page-header>
      <ng-container *ngIf=\\"vm.loading\\">
        <div class=\\"flex py-36 animate-pulse justify-center align-center\\">LOADING...</div>
      </ng-container>
      <ng-container *ngIf=\\"!vm.loading\\">
        <user-table [users]=\\"vm.users\\"></user-table>
      </ng-container>
    </ng-container>
  \`,
  providers: [AdminUserListStore],
})
export class AdminUserListComponent implements OnInit {
  readonly vm$ = this.store.vm$
  constructor(private readonly store: AdminUserListStore) {}

  ngOnInit(): void {
    this.store.loadUsersEffect()
  }
}
",
      "file": "/lib/admin-user/admin-user-list/admin-user-list.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { AdminUserTableModule } from '@proj/test-web/admin/ui'
import { TestWebUiPageHeaderModule } from '@proj/test-web/ui/page-header'

import { AdminUserListComponent } from './admin-user-list.component'

@NgModule({
  declarations: [AdminUserListComponent],
  imports: [
    AdminUserTableModule,
    CommonModule,
    RouterModule.forChild([{ path: '', component: AdminUserListComponent }]),
    TestWebUiPageHeaderModule,
  ],
})
export class AdminUserListModule {}
",
      "file": "/lib/admin-user/admin-user-list/admin-user-list.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { TestWebCoreDataAccessService, CorePagingInput, User } from '@proj/test-web/core/data-access'
import { ComponentStore, tapResponse } from '@ngrx/component-store'
import { switchMap, tap, withLatestFrom } from 'rxjs/operators'

export interface UserListState {
  paging: CorePagingInput
  errors?: any
  loading?: boolean
  users?: User[] | null
}

@Injectable()
export class AdminUserListStore extends ComponentStore<UserListState> {
  constructor(private readonly data: TestWebCoreDataAccessService) {
    super({ paging: { skip: 0, limit: 10 } })
  }

  readonly errors$ = this.select((s) => s.errors)
  readonly loading$ = this.select((s) => s.loading)
  readonly paging$ = this.select((s) => s.paging)
  readonly users$ = this.select((s) => s.users)
  readonly vm$ = this.select(
    this.errors$,
    this.loading$,
    this.paging$,
    this.users$,
    (errors, loading, paging, users) => ({
      errors,
      loading,
      paging,
      users,
    }),
  )

  readonly loadUsersEffect = this.effect(($) =>
    $.pipe(
      tap(() => this.patchState({ loading: true })),
      withLatestFrom(this.paging$),
      switchMap(([_, paging]) =>
        this.data.adminUsers({ paging }).pipe(
          tapResponse(
            (res) => this.patchState({ users: res?.data?.users, errors: res.errors, loading: false }),
            (errors: any) =>
              this.patchState({
                loading: false,
                errors: errors.graphQLErrors ? errors.graphQLErrors : errors,
              }),
          ),
        ),
      ),
    ),
  )
}
",
      "file": "/lib/admin-user/admin-user-list/admin-user-list.store.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { TestWebUiFormField } from '@proj/test-web/ui/form'
import { AdminUserPasswordStore } from './admin-user-password.store'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <ui-page-header [title]=\\"'Set Password for ' + vm.user?.username\\" linkPath=\\"..\\" linkTitle=\\"Back\\"></ui-page-header>
      <ng-container *ngIf=\\"vm.user\\">
        <user-form [form]=\\"form\\" [fields]=\\"fields\\" [user]=\\"vm.user\\" (submitForm)=\\"updateUser($event)\\"></user-form>
      </ng-container>
    </ng-container>
  \`,
  providers: [AdminUserPasswordStore],
})
export class AdminUserPasswordComponent {
  readonly vm$ = this.store.vm$
  readonly form = new FormGroup({})
  fields = [TestWebUiFormField.password('password')]

  constructor(private readonly store: AdminUserPasswordStore) {}

  updateUser(input: { password: string }) {
    const { password } = input
    this.store.updateSetUserPasswordEffect(password)
  }
}
",
      "file": "/lib/admin-user/admin-user-password/admin-user-password.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { AdminUserFormModule } from '@proj/test-web/admin/ui'
import { TestWebUiPageHeaderModule } from '@proj/test-web/ui/page-header'

import { AdminUserPasswordComponent } from './admin-user-password.component'

@NgModule({
  declarations: [AdminUserPasswordComponent],
  imports: [
    AdminUserFormModule,
    CommonModule,
    RouterModule.forChild([{ path: '', component: AdminUserPasswordComponent }]),
    TestWebUiPageHeaderModule,
  ],
})
export class AdminUserPasswordModule {}
",
      "file": "/lib/admin-user/admin-user-password/admin-user-password.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { ActivatedRoute } from '@angular/router'
import { ComponentStore, tapResponse } from '@ngrx/component-store'
import { TestWebCoreDataAccessService, User } from '@proj/test-web/core/data-access'
import { pluck, switchMap, tap, withLatestFrom } from 'rxjs/operators'

export interface UserPasswordState {
  errors?: any
  loading?: boolean
  user?: User | null
}

@Injectable()
export class AdminUserPasswordStore extends ComponentStore<UserPasswordState> {
  constructor(private readonly data: TestWebCoreDataAccessService, route: ActivatedRoute) {
    super({ loading: false })
    this.loadUserEffect(route.params.pipe(pluck('userId')))
  }

  readonly errors$ = this.select((s) => s.errors)
  readonly loading$ = this.select((s) => s.loading)
  readonly user$ = this.select((s) => s.user)
  readonly vm$ = this.select(this.errors$, this.loading$, this.user$, (errors, loading, user) => ({
    errors,
    loading,
    user: { ...user },
  }))

  readonly loadUserEffect = this.effect<string>((userId$) =>
    userId$.pipe(
      tap(() => this.setState({ loading: true })),
      switchMap((userId) =>
        this.data.adminUser({ userId }).pipe(
          tapResponse(
            (res) => this.patchState({ user: res?.data?.adminUser, errors: res.errors, loading: false }),
            (errors: any) =>
              this.patchState({
                loading: false,
                errors: errors.graphQLErrors ? errors.graphQLErrors : errors,
              }),
          ),
        ),
      ),
    ),
  )

  readonly updateSetUserPasswordEffect = this.effect<string>((input$) =>
    input$.pipe(
      tap(() => this.patchState({ loading: true })),
      withLatestFrom(this.user$),
      switchMap(([password, user]) =>
        this.data.adminSetUserPassword({ password, userId: user?.id as string }).pipe(
          tapResponse(
            (res) => {
              this.patchState({ user: res?.data?.adminSetUserPassword, errors: res.errors, loading: false })
            },
            (errors: any) =>
              this.patchState({
                loading: false,
                errors: errors.graphQLErrors ? errors.graphQLErrors : errors,
              }),
          ),
        ),
      ),
    ),
  )
}
",
      "file": "/lib/admin-user/admin-user-password/admin-user-password.store.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'

@Component({
  template: \`
    <ui-sidebar-page headerTitle=\\"Admin\\" [links]=\\"links\\">
      <router-outlet></router-outlet>
    </ui-sidebar-page>
  \`,
})
export class TestWebAdminFeatureComponent {
  links = [
    { label: 'Dashboard', path: 'dashboard', icon: '' },
    { label: 'Users', path: 'users', icon: '' },
  ]
}
",
      "file": "/lib/test-web-admin-feature.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiSidebarPageModule } from '@proj/test-web/ui/sidebar-page'
import { TestWebAdminFeatureComponent } from './test-web-admin-feature.component'

@NgModule({
  declarations: [TestWebAdminFeatureComponent],
  imports: [
    CommonModule,
    RouterModule.forChild([
      {
        path: '',
        component: TestWebAdminFeatureComponent,
        children: [
          { path: '', pathMatch: 'full', redirectTo: 'dashboard' },
          {
            path: 'dashboard',
            loadChildren: () => import('./admin-dashboard/admin-dashboard.module').then((m) => m.AdminDashboardModule),
          },
          {
            path: 'users',
            loadChildren: () => import('./admin-user/admin-user-feature.module').then((m) => m.AdminUserFeatureModule),
          },
        ],
      },
    ]),
    TestWebUiSidebarPageModule,
  ],
})
export class TestWebAdminFeatureModule {}
",
      "file": "/lib/test-web-admin-feature.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/admin/feature/src",
}
`;

exports[`init generator should run successfully with default options 59`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/admin/ui",
  "sourceRoot": "libs/test-web/admin/ui/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/admin/ui/src/**/*.ts",
          "libs/test-web/admin/ui/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/admin/ui/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/admin/ui",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 60`] = `
Object {
  "root": "libs/test-web/admin/ui",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/admin-user-form/admin-user-form.component.ts",
    "/src/lib/admin-user-form/admin-user-form.module.ts",
    "/src/lib/admin-user-table/admin-user-table.component.ts",
    "/src/lib/admin-user-table/admin-user-table.module.ts",
    "/src/lib/test-web-admin-ui.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 61`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/admin-user-form/admin-user-form.module'
export * from './lib/admin-user-table/admin-user-table.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component, EventEmitter, Input, Output } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { User } from '@proj/test-web/core/data-access'
import { TestWebUiFormField } from '@proj/test-web/ui/form'

@Component({
  selector: 'user-form',
  template: \`
    <div class=\\"shadow overflow-hidden sm:rounded-lg\\">
      <div class=\\"bg-gray-50 dark:bg-gray-800 px-6 py-4\\">
        <ui-form [form]=\\"form\\" [model]=\\"user\\" [fields]=\\"fields\\" (submitForm)=\\"submitForm.emit($event)\\">
          <div class=\\"text-center\\">
            <ui-button [disabled]=\\"!form?.valid\\" label=\\"Save\\" type=\\"submit\\"></ui-button>
          </div>
        </ui-form>
      </div>
    </div>
  \`,
})
export class AdminUserFormComponent {
  @Input() form = new FormGroup({})
  @Input() user: User = {}
  @Output() submitForm = new EventEmitter()
  @Input() fields: TestWebUiFormField[] = []
}
",
      "file": "/lib/admin-user-form/admin-user-form.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiButtonModule } from '@proj/test-web/ui/button'
import { TestWebUiFormModule } from '@proj/test-web/ui/form'
import { AdminUserFormComponent } from './admin-user-form.component'

@NgModule({
  declarations: [AdminUserFormComponent],
  exports: [AdminUserFormComponent],
  imports: [CommonModule, RouterModule, TestWebUiFormModule, TestWebUiButtonModule],
})
export class AdminUserFormModule {}
",
      "file": "/lib/admin-user-form/admin-user-form.module.ts",
    },
    Object {
      "content": "import { Component, Input } from '@angular/core'
import { User } from '@proj/test-web/core/data-access'

@Component({
  selector: 'user-table',
  template: \`
    <div class=\\"shadow overflow-hidden sm:rounded-lg\\">
      <table class=\\"min-w-full divide-y dark:divide-gray-600\\">
        <thead class=\\"bg-gray-50 dark:bg-gray-700\\">
          <tr>
            <th
              scope=\\"col\\"
              class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\\"
            >
              Name
            </th>
            <th
              scope=\\"col\\"
              class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\\"
            >
              Role
            </th>
            <th scope=\\"col\\" class=\\"relative px-6 py-3\\">
              <span class=\\"sr-only\\">Edit</span>
            </th>
          </tr>
        </thead>
        <tbody class=\\"bg-gray-50 dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-600\\">
          <ng-container *ngFor=\\"let user of users\\">
            <tr>
              <td class=\\"px-6 py-4 whitespace-nowrap\\">
                <div class=\\"flex items-center\\">
                  <div class=\\"flex-shrink-0 h-10 w-10\\">
                    <img class=\\"h-10 w-10 rounded-full\\" [attr.src]=\\"user.avatarUrl\\" alt=\\"\\" />
                  </div>
                  <div class=\\"ml-4\\">
                    <div class=\\"text-sm font-medium text-gray-900 dark:text-gray-200\\">
                      <a [routerLink]=\\"user.id\\">
                        {{ user.name }}
                      </a>
                    </div>
                    <div class=\\"text-sm text-gray-500\\">
                      {{ user.email }}
                    </div>
                  </div>
                </div>
              </td>
              <td class=\\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\\">
                {{ user.role }}
              </td>
              <td class=\\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\\">
                <a [routerLink]=\\"[user.id, 'password']\\" class=\\"text-indigo-700 hover:text-indigo-900 mr-2\\">Password</a>
                <a [routerLink]=\\"[user.id, 'edit']\\" class=\\"text-indigo-700 hover:text-indigo-900\\">Edit</a>
              </td>
            </tr>
          </ng-container>
        </tbody>
      </table>
    </div>
  \`,
})
export class AdminUserTableComponent {
  @Input() users?: User[] | null | undefined = [];
}
",
      "file": "/lib/admin-user-table/admin-user-table.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { AdminUserTableComponent } from './admin-user-table.component'

@NgModule({
  declarations: [AdminUserTableComponent],
  exports: [AdminUserTableComponent],
  imports: [CommonModule, RouterModule],
})
export class AdminUserTableModule {}
",
      "file": "/lib/admin-user-table/admin-user-table.module.ts",
    },
    Object {
      "content": "
        import { NgModule } from '@angular/core';
        import { CommonModule } from '@angular/common';
        
        @NgModule({
          imports: [
            CommonModule
          ]
        })
        export class TestWebAdminUiModule { }
        ",
      "file": "/lib/test-web-admin-ui.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/admin/ui/src",
}
`;

exports[`init generator should run successfully with default options 62`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/assets",
  "sourceRoot": "libs/test-web/assets/src",
  "tags": Array [],
  "targets": Object {},
}
`;

exports[`init generator should run successfully with default options 63`] = `
Object {
  "root": "libs/test-web/assets",
  "tree": Array [
    "/.eslintrc.json",
    "/src/assets/fonts/__.__gitkeep",
    "/src/assets/icons/__.__gitkeep",
    "/src/assets/images/logo.png",
    "/src/favicon.ico",
  ],
}
`;

exports[`init generator should run successfully with default options 64`] = `
Object {
  "content": Array [
    Object {
      "content": "",
      "file": "/assets/fonts/__.__gitkeep",
    },
    Object {
      "content": "",
      "file": "/assets/icons/__.__gitkeep",
    },
    Object {
      "content": "�PNG

   
IHDR  �  �   Xۘ�   gAMA  ���a   8eXIfMM *    �i            �      ̠      �    ��  @ IDATx�}	�$E�vF����� r3�(���^몿�3��⵻��ɠ2* � ஫�����6�x���xp+�p�)��03}VU���񲢲������2�#f��W�x�2+���̬ ��g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g�g �Pi�Ƕ�\\\\q베2P\\\\�o�����f?�D�˃���N'���HGJ��G�d�n9�i'<v�?���^/Iү��3�3�~
[��߶o�5Ӟ�B���u�]	>�/ˮx^9��tn�-||��@a�N�.�8:	_�G:2�	3�!�(�6���@>���s�]s_b��#����3P�Z�k��t���$�m�S��#S�{:N�/Ѣ2<S��2��#�/N�V^{���~TP��V쁞�:ut��߫���ً,����w��ޠOu���ʟ����u^���^
[������\\"=��^���z�����x���k�\\\\�z�*z��k���}��G~���}|�π
����#b���R�t�ο�\`<afp�5yz28C��fmV��@�'���:����2Pܼ�=tvh�G�c�©�ͨ��ʀ'�L����No\\\\��@�75o
����v?r��Z��z����g@M��N�JG6���aX=�y���J<afeO�g��9��;k亣Ux�,n|�π��<3������t��{��ѱ�p����x�����;u�II�� ^]T�ҿ���x��3�3��Ʒ�%]p��\\\\�諑3�F������̀'�t��w�_�����Ii����Z���]}��3�30wTP|2�����5�6����c���z��e�f��I�M�UN��~�v�.���V*�����||f�@a�����ͮUo���NZ:�W�k���x��ʞ�ũo]�+��c�s�ܿ�i��<�o3�3S^�g\`��ڒۂ��Qsk::X>��Owj���x��Ȏ��9==�Y:;�o��7W��\`��#��z����(n^�$}p��G,����ѭ�j�ٷ�1�0ӸW戩r�ǟ����s��l^L-���ƛ[*����93���]���!s*6U�:5{n�&_��x�L��i]���Z����מ��G���'��S�5}�(]�*l��)Q�<������a�ޤO��٧�Ϸ��
�N�7�a�;�����|J^{��h?��mC�bwoߢ�fM����T/i��kӖO�i�#�ģ7�_���YT:jz��}�ܧ��7ye��E��K�m$�&����އ�?��/������'��t0u2]��Sr������F�՛Hҧ��3��6�p;�.�&5F�.�C��ѯ�$���I>�0��iW<�?�_Md�����Uز�k�2i�ޟ�@3��C7���&;6=2���&��{�F<av#�]�9==}.}w9���ז���b��o��g /Pt/Vq�Z]��Ǥ���ƏLܯw�h<a&���8�l\\\\��:�����Ae��e���-�ޯ�@2P�XAϋUte,�XW���
�+���D2�	3�4vω֣E�5��߯����G-W���H�g���f���%_�_7G@\\"9l\`t�o�ه���x�\\\\X��n=u���7�ӻ�u�a��E� ��A��g�g��@a˪k��ܺnȸ
~�hru#����f�����gV�����U��+?x�3KO��W��~|��U�+�%|�O��k��'�����[D�[d�f�Ĥ�zj˖S�B��!��������U�$|y>y�@qˎ�Ѕ>��Qz��
��{՟��x�l?W=՜�x�tr��=�:۹0���C�_��~}>ì�Zz���d��Ʀ�\`�V�\\\\G6^�'��ٓ4w�	�,?G�4;��λ�a��ˮ|NY�?�h�>�(�~7�0�ݶ�2]-��щ��o�g�x�l����L�x�k��?�W :<o�U��߯�@2P��W�V��K��5��ؿ�}��xg�ϯ�y��W�Y}#8a�mG�*L]��8|�>�� =/��\`r��~�-}�Y�g\\\\�&�A^{�<a�4D@ϋ}?�.�i��Ӌ﮼t� P�>u���[
[v��އ����8���˿�W�;߿ɀ'�	��u;�)�������}���6���GO2��%7���z��\\\\��U�['�?=��o�M<a�&�m�2=�N_�/kK�GJ�+.}=�\`S������=�'w��N�ܨ�w\\\\4����sP,�1}�gS
ޘ�4lLm���[�O[\\\\>��nd�8������u���}j]
+U�ɼ���'��r� O����hu���q��uG
�m�7�Hy�.��+�Jc�t��ˋ��&��-��R9A/���Nm<��I\\"�K븋�V�ڲ_?���|\\\\>Id�0��Ut��S���
J�����1������=��9g�V���ssv��]��V��?4=g��B3���{���T�%�f��-z�}Y�o^b����=9��'��r�>��V��]�ӝ�6�鶔���@�2Pܴýt�ϒ��L?%�n�E�뿚��<�+>O���<���p�nt
�}����/n��e����##��3������t���ե��e��ӝ�^�a<a�0�񮦕>����ק��7W���>��}l>�f@iU+n�n�]��轩|���)�eQ��	�O��rÉG�w�k������FO/[��ƛ�����(������H�MQHm��:�絡�U΀'̄ڎ;\\"J� ��I#8j�X����z���f���)�\\\\����7[\\\\t��F'�j6ߖ|<a&��9=V6�{+}yȜ�)UP�����.�����3����b��k���]Id����uT%���h/�0��SbZ��3�	����!_>p�AO-o� %vdxG�� =/�֠:��{��ʅֻ?��-]��H<a&����T*O�L���ؾEz5���=�&����g�y��Wm�۹2�[�t��C�wm>J_�t<a&��Y��o]�U�YT2մga�ί��?� S{����]�kE<�9�E���0<;���<a�p?M����?=��]}mٯ�(��]��w�3�@�y�S���������Ɵ����I)�CK��*7�{Y��_���͐�
�����~d��;7��6*x�.�x��_(�<I�6��~�\\\\oGO��c�����ض��c��$�K����
�+�-�Tŕ�\`T�Ɠ��h��4�q�wt)���0��vzd��7�)V�G�J8J?wyp������M�@���63p�ƥA�xX�^AC��T��H(<��ެ�ڃ
�x���VY3򕶔�Ҽ2�	s^i��h���Co�s;�ʖ���w��%O���D��/9�Oي�G���Ko|}�O��偠Z>*�cU�����O}�5jKn���y����}���ӷ�����5g��z�XPo(p�/���
>���5�\\\\�s����U(|��f�C�H�b��_���<N��o�.�d��ɻ_XU�ꚥ�/�������ך�w~{r��F����
���oꦏ?#�VK_�e�~�fiR��[��J��5k�u>i�@yt�P�����������{յ#�����?\\"����>���9�%K�n�n۷x����]w%��#���8O�SZe��҆ɗ� �܅�	�K�t�'C�sy��'حAY�v��X�����t5�������I?�ת�m~kM?��zߞ0���B���v�u:\\\\*�w��}���W:���b��O�|�>�];O�T������;Sd��م�6L�n#٫�S�R�|��S�+��|���k�4���9I�q�������>��f�I���N�P�v�
w�i<,���\\"��@�[0����$�*}.��Ƃ�S�Xv#��{.Ϡ�!��ח<�w���b��@1XG+����mN��	c��g�0����'J�b�O�ej\\\\��GO.џHM@>���20q��t|����t�Ѻ��ϥ+��F�	3�}��x 2=E5���u���3��ph~H>�N��9�ʼ;���9�e�����ql��'̄2>�q����O�����?>}�/$�*��g u�w-�zA�?u�%�>���|��\`b����'���JU߿~X��3�ڳ^���)���\\\\Yߑ>�Y3P;nx}8�|V��6j��-�X�?�f�x�L ��OL�#7�&�*u.T����S~���|@>]Ȁ*(�e!v�u�]�S�֍|G���@2�'��<��dw��\\\\~r�/c+����S��}2���q#��\`�53w(]�?9=~F'&^�1�0���+���l��6Աahuy��Ov�1���q5��D��řވ�ϧ%����	s{�����Ӆ>�-�EzM�z��t�����=�#�R��.��]r�_�Z+�j������=a�s�i�����+z��k��y�Ǜ�d:�=�O���3=���@5p��_�h�ճd��,ə��rc��I���t��F�b_>��e5~���B3p-��.(z&t>K-?��%z8���ި<a�#������0��<L3aB�����2�����֌|�><��
q�����|�u���<�[��^Of;��4�&����8�����A
���	@�t��.�
>04:�{�;�p��0;�y�7~l_�*6��3Gd99P�p�)��>����1�7)�?��j=4�����.�4O�&U�j�ҕ��eE�,��������g�XZ���h/��yZ�)�N<���f�CO���
�^N��Wv\`�U�?��JSsv����G��:����I=������Z{.h#�>Im$	*tI)���L�R���>4�f:�������k���sf���A�m&�>ut�-y[�c��fF�6N��N��ߦz��h\\"�r��S����}�>=��kU-(�9��,a�?����|�.�Qy�l#���Ӷ��c|�
�̩Yj�Jt���;����@�ءK�}ra�����y���C�����F���[O%6YنjU�7���܇�3�����6���w܃�G��q���}{�Uf���9Ǯ����ϠE�[�P�d3=�kl�4�ߋ2�W|�i���ڡ;�}��[1���ZX��uIW�0�Ȣ�Uϥ�eq�l6�S���ߟ��}�>����\`�tZe>П޻�+]���[����d׻'�Y���
'��ų�d�I�90<xn��C��KY��5���k��玾T��:����f���[��:<�Es�UQ��~�d2����C��.�/� �>t��.�G%�գ����2؁'�;mz��R���ٮV�e�|��l�G�3п�rUT�S�����~\\\\��\\\\���_��ٳ'�&�E߸�)�
>ڤ)�Ut�BM���π���2P9v�
���?�$��+�k���c��f,!x9������&M����.�4���~������ J���'d��mM==iNM�0c�b���F��&V�����~�����\\\\�M?�4d\`b��}��OMC,�Ǡu1�V���Nb=a:ɠU%=Чv>}�Mg.�W��OV��4#�#��_v�~��]Tw�/���Ls�K��ӽ������*O:�D|�S��V�7P�Bn��3����\\"5�RN�ah}�>?Ѓ�;ΞGO�v���	upZ�va{
��)�>���^���@�2P[3|=����롏��^}ז��~ � ��0m���D_��]:�]fT��K�������\`T)����
\`��V��#�[w���:�'Lʗ��=�/��Y겡M_�Vtq ����3�3��T�Yz}P���.�����j����'L:�C}]�Gc{.�-���؃w�3�3\`30��?A�>�˄�����r9�6��	�rӉ/$���U\`ꑁ%����m�����B3�u�z��y��\\"��-4GY�_Ԅ���BXS��Ϩ������,��|���A���@ ݒ�A���9�ѭ��ql�)���3p�Lo<��虉�Ү~��
���X~�����؞_��/_�v�Nx�,�cU����'��4M��O7��곷O�����L�1u��x��+�P���]�ϵR��84���_���Dz^�?�o?}����O�'�]�5���~��~^��9Y��j~��o��Go\\"S����g5i&Q����N8�J]z�l�w��
����XN�'��d����Yr�]��EǇ��'�I�nap;i��0kkF~X�>��^�$�lWi����tWA�l����)��ē��m���ע0�1x��)������S�\\"M�u�M��m�F_�$îf�����C�/�7�'B�w���a�\\\\zg>/���/� g 6&7+����tefQ��6�Ax�$���ڸ:ذ�yߣ_�i�� �tz_�A��]T�����i?\`Ɇ�=��S�zX��9y������t�D�ǂҖ�ie�c�*��P��/�mᦘ�0�
1	F��3�5�Q��}�(}]�
?:���O.<9���ʒ���3�����֞��u&OL�$Yv0\\"B�˨��Tf8@_0���R���of�B����=�%�jxv/zJS��0U�v���i��0}K0��߃b�v��{�B��_��_\\"v5:����z�,+JL��e�DdяV�����,�2�Y��d�ƕ�ƭ����?�x0E�K<� �\\\\R3\\\\E��6!(��>��:�H�L;@W6����ʦ���؃��vu�6R���#�PH���s��cK&^��A�1��Ms׍��׽�޻���^�T�������JOp׺0RS��y\\\\/�hٗ�C�ň�JdWǕ�}.d�#2��$��u�19[tei�ȶ�Y�M�_.Ջ��}���B��'F�Ƥ�S���8�mN�9ҷ��>�w�/)�CiӞ�d{�+�&o��j�����^�6�:�����Zx�z�7��(�f�؝Z��j�g��kU�ᠴ������
������������I�&C!:L��erY���Fh&�1�BOЕQ���
��
|EǢ�l�,1o?���D�� Vkto\\"�E2�E�hte!4�M�Yq�,�� Y�!YM����T&� E�u��Ik��Jq\\\\߯���/}\`y֩����}��w�(KST]�e�ƻ�E�I��%�]u�j�Q^���Ϡ8}猾tqՖ¡Wӳ,SP0�E�H��&yy#�a�z���:�l�.z���	B���L�F?��c��ݜ��((�n�XV�\\"�L���vMq�����-�;
��m+�M���*����g!d��>����/�
�xov!�^���Q���S�r���e��*�O��# U{\\"(������D����Nݒ�5��?�)0���
}�x\\"��y�i.B�t�q;�6&/���lY��?�K���A�CǑ���pq:�u��N�~�>AS�/� (��?�����3A� 5�fg�#��EvA�¥> K��l_��$D�i(յC?��/HC,�Ǡ�U[��ɉ�M�C��G��TN���L�VO�����oQ�[P��iַ}X��6u�/�=5cc2��
��
Y��S��)X�	�	��-�����/����,��2��
}	r������S?�c~����%Q�A�o8=�:9eGj�6 6ηES�c ��� d�� d�	=�3T�4�r��a�o2
�$��?^4�Ԥ���ߢ ��>�LzK�%mɏǣ�;I�&6}�n�߀��c'����Z�u��j�S��gB��\\"�LaE��m;Hr+D�B��_Cҏ ��羁��o�$�)���DJ�?�m7�X���QHH25
�3DFY�~�(bɫEz� �,��)����{�?����NR�g�uCw�BpV�BJ0]�Uk�$�0���.�}	��tj-�c�E<ŉ_I~%��^y5�������>?TG�2]�E?4C6��h�kX��a'D(�#���\\\\W�l�/|I���ć6Ȧ?L�f·��m�t�Ժ�NJn@\\\\� )��,� .�CCa\\"K{���J�_ԙW���.�/��Gv��?�->�N�ޗ�p
���W/���%%�$2[���ծ>��'�rti������=;u���T���8y
?h\`���'��gP���~vvs�}��Jq��o�ذAQgQ�2M{�Ǯ�ҋ�ی*�N���?�M6�d��IWP������r��Y�)��3U'�8A\\"CBy�,�qϭ�f�~b*mD�W�k�?D������XQr{6]'r��9�%+�����_�\\\\���w�p+]0����������� ,�̛.nKﱥ�%���B��l�#tȽ��,�bM�IY����
O���L6Ol@0&8�@��:T�va(S��_q�V�W�ŞV�|��
��_�m$N���/�7�7�ϕpz
R��/RAI�D69�������y��L�SfZ�4�EW�3�a�Ga]���[�����?�5G����vI��i�zx�]����Q���0~�B\\"�ci��B�>F~S��@��W[D��e���t�޽���Hh�Mޡz�W�X%�����~��/qE:o��dڑC���Y2���cgǸ����f.�؞�%�����4B5lL�x>���[4/�a�$�\\\\������=�nF:X\\"�z
j�B|=�M������\`����E/c�TZaвo뭟@���0�Cû\\"Jb?J��P�����[^��Ox�c�A&	��;}�&�{I�𛍞ɪ�cd�P�f�ѣ7\\\\8��,����?W�|1���0���A�	Q-��L�Q����t:)���$ş�@�h��_�e['�b,/�i�_�|�/��k�h i�|irBɩ��ȴb�|p�Hn�Nj6���r�=�Q;Ur�֣�0��/yi���@�\`=��4���[Y;|Uqt�ԛSX��\`�������I�K��$�A�i\\\\��>�!Е�{.U�-,����
�C~q�¼t�Z�lv�[�� ,ln�N7����!çE�S��1����!M!NF��e�+n]F����d6�CMrcs��2Y\\"ώ,��,�?��ʓ{�,�&��[$#����D����9jH�0X��oMUP���J�]:<�0�W?�:�g:R�p���0��1	{M�&J!@��@ڸ͢�P�Nd��\\"���8��i�/�AA��O�T0AS��lz2ۏW��t�G��̓�rc�+\\"(^�Q=l?
�ݩgB�ײ/��������~�:��E�	v:��;� �+����a�rn��;¤
Ta�����H��]Z�A���R=2�rU&�)�8!��T;�Ȏve4��l���ȮIhҌ��O��i=>�G���5&p��?����o}!�\\\\dӅL�T�Ġp��>�LoEA�*)ξ�\\\\q¢u�ch�ױ� ��gϥ#����tE�L4�K^TOǏA$3$�(L�c�݄W�%U{����_хSꈧ���ى�L�������'�<�F�Թd�I�7�C=+K�2�e衎��-��guDO߽�m�U�YCٿ�
M�����{�H{��YTD���w��˴��\\"��\\"�2v�h�I:�Ĵ}�.�d��
�mL�����m�TS4�?��%�>s���$<��G�?~u�!����*w�СYf��y����T��Ɋ1����$tQǤ�6��2O�Vǵ� B�!��v��&S��d��h��)biQ���}��2�����F>�n�)�ln#��3�!%�N�LB�Z��mL��r��/�t}������[jǍ\\\\L#�4�. 2���k���!U��\\"̱���±b�2�P0aq���W����&LLp�O�@ڄ�Bd�LdV_��B׆e3�F�ȿBBu@l�A�I<2	�,!�\\"P����o;�<.�B���@H�W'&�M1m�e��A$�-�7�����u-�� �㘠��/�+�����.�b��t��_�
킏gl�<,7���=��j������*�px��3s��m%�� &D���6WǕE!d��Y��8C�l���q!�bV.�)�iһ��@�5}_^�j��<?�D��.qY 6�d\\"Cn��煬,r���$=J���)�M��{���B�/�$ �T��2}���)�/�=�yŧ�ҩi}ƼlSf�|���������Ͼ짙>'���$������H�N|rʔ�듡!9�P�����2:�mѕY��y�i�J��'&�a���u��������\\"���Ŭ1t�!7Bl�'�rd6�-C]�,�Q^��9�vmX�6�H�їX��ec��L۔�h;�R����5ޡU��sA����|��ޛ�%�х�P
�xl�>կ�̘�hj�rQ�\\"��X������
!&I![\`�M�R�tIӕ�n'�f(ӽY��tM�)��?�3�?LN�n���υ�D��r�l�S���SB���6~��E~�|�����𺾵9����8]89�$�0z�����!y��y����e5��|��Dǁ\\\\�
�����w�D=a���r�5Е��!.�|�� ��f��e�tɗ}�6��qm[�Oj͊<hdL�(�Ԡ
�|��4�e�Y��Țo 2�	�)zF3�@<�m����_�G�xt}K�l+Ƅ�A��Ϯ2����@�ߔ�p;
��/G\\\\8v|GF)S�<a�W]�
U}<�����v���~[ʎ����j�i��#|��|��e/��_;I�AR߶Ŀ��	��ތԎ*��.<t:�E�912ЕEC�R-��]�|?��p.��/����>Q�[X�~Y6�(g�\\\\�\\"U
���2�<�C���G�a�
�L&���t�On�M��|P��.�V�q�H�έs��+�	q!��i��y�Ƭl&c����v���l'g:�t��On�=[;��h1Q��]s�V���b�\\\\Zd���G����ܳ��\\";�)ج�C�]e�O���?�q��y�z��6���G#�8F�M���Nfz���.��'u���U{��������t�H�L~|a��j'�^��)�gK���m@d��I�hBW
�c�d���+1L�CCx��!����H=7�ڣJY��Xf��W
|��Nxs�']�$�lܜ�?�r��]T��\`�FO��}K�=�g�Bj;�̒M���BU�|f�#͒b����o�R�
��w�4Y5�Nѭ�R��%=FWF[�
��#dL����&��>�[��F�и i�@��<��o����Ni�T(�ic³(��	���c��l��I��}\`�F�lNqS�,��*��rs 5D/�V³�2�\\"�G%�0q�7�]E��=��e�ˮ���h��HDfMɊ�\\\\�b$�lL��[l��B�@>�j��q�>�vdi�Iڐ.dd*��=��I��w��?�7���
3F��V$�HXQN$7M�^D�z�3cѓ�Ϡ۷�37�K��6z�J��ً|���1�&��[3]�$��UG|RU�_��T&MqiU-[�&!o�q�a%)�$���� &b���69�
teэ�ԉ���K�,S��CV0@��-� �\\\\clC��xm�lM.�����Pndu'+J��|��� �4�csI�e�%����!����\`�z�.u,[�|_��R�O�a�@2Y�X�����2|;A���5.��N�T�H��g�Pq����(�VA���ǲs5��&J!�8҄fH��#��[��Ҏ�����E�hd�飙?�$u���A���2갉���	M�Gw���(�- )Clu�BC> s^X6��FY9
��bb���b���8��M6��?[ķ۟�e
OZ3�o���Y���x��3O{;�i�����R���QU{r SA��.���x���iS=�jBn��5��ڸ~ڕ1��B�ܗ\`����X��Ʉ�1M�Xeb'd�A�0}	�dNa��V����d���c�9�� �lH��4�>�M�.�����,�[c�^��be�gVz��W*���f/��\\"����+���V�S_s��
��_���u!�Ԓ����{�RH�يn.�sm���?q��w��G��Ǳ���	_d�>3a���e:�'�*��O��=�v~rzk&/n0���
�7ɍ��%8YI
r^,	��uFxfŉ&�\\"m���c���s�{�člZ���z��/hh��j�sĽ�����9tRӜ-¬<�m���ݑ�$&����_�W���C���Q�Bbqr�ki�n�+�j�����ɓ���Qn��D���Yr!Z=���{_$�Ył��Ƹd%�]r��H�$sTG6�C�r^Ljys�H��p����Ǽ�$�|�	gF��SM�K�X��}\\"��h?]��Ne�ђ�!L�5���[��5Kx��
e��w���>�N��%ـ���f�6�E9B|��&?�8#te����8�:,�][�6��m�#ْ@t
��B�����i�JtɌ��Z�\`��@���E��F�������|g	}����u}v��?����F|V��2x]��9-�SԐ��K�F4�%0�Pj�}~�����
<I�Т
$$9�IЕ#=��,]���]�P�ȾI���(��;J23�G
�ɢ�C]���5貭���'j�@�l���)R\\"$>UJ�G�Q!�MОR�:�1#7�C=J�N�\\\\g�	��}._�4?v>�o~FT	�xEqt,�_��#�x��Շ���e��Nr���*š��x���(s��>eE
}Yu��Brn�4{
�;D��Ͷ�w��ou�v���a�\\"E2��,�2�P�:��ә�)����Lk�\\"Gb�2�ő��]��G#�}]9j����E�-�.sR��/j��g�0�w�!���U��0�y�����}��X}�z�����Xx(���f M�\\\\��� ��
BO|]Y��.Е�=���r�%�J�-hB�L����AH�!S�B���\\"�b5���	����_�E�r�u&7��:B��@�Q�m����(@�G�*�_?��tV�7�Ll��h���xw�:U/�O��>|�
��R������+~�'r�7�]��Lyr���lsIP&da#:�����ȓ�A��먖.pa��]�j2C�F6+T��:x�o��D��ſ&� ˜jC>�!���y�(�DY�d������_�6٤�h×�9�1pY�u��,��i��L���Ǘ��UiX�	S_��C���/Jk��ay��#��xx���2�ن	u6��6�_�?:�K~d�*����mlG2��'t��8�O킘�!ˤ��e�M�L�hc�0~�5�}��8�j�W0��AW���
$%�9�4���w��
�E~�>�ti�vYG���}�k���Ƚc�Â��V*Ǎ\\\\C��z�������	5~jZǆ#9�%�z��@W�w�S����ߗ��wS����dF�M�H�N�2Q2B��dL~�C�ʢ�ֹr�n�E}��l�H�L��f%����+�u��I;� K��	�l�@�@�V����=d��㹑Ց���Kj�j4y5a��ֹ�i5Fn�Ov/d��u��HK�^GCܒ�9#	���G�>˩I��Z¬^�ܷ�wL%Ha0,�v>&I�����E�U��p��\\"B�IO���Eh�[��eC�]��,�1�Dn&�:bZ��+�ʨÆ\\">]��>�S߻7S��3E���3�a̎,��A�|XteN2| ����:��v�_����g���ڥ��l_y�r����s[6��!��I����]�ЛÝ����d���V_����zM�7��0��Bte�q������ck�>!�6�Iu�������\`��q��&�Nd��?�3B�ze-�,�:ꨕ:u�ؓ]d���F$2Е����+md�f|�D�?�l��|{Gг�����XR9�%������R�'�,eNh���x�x��MO��T�갯��cKS�	GWN�<�oq�V'B\\\\���
���&H�k�41r�6�O!J��>{�|y�6�w��x������J1��'���<�3�Lz�����T������I.D����s���N>}@4u6G�^��uZ���\`�Ʈ�
��~��c>�m�TSt����*�g�y�^���0�^�ca��7�)IIƢ���R_��/�GyjJLԊz\\\\|#d&�]t��Fښn�M�<!�/���W���c���>�$-6�ن�O�-VI��n�z��>���������r6�
r��؜s��<�$,�X[�0���<��/�l/
bMȦ�g�e?��soۍ/zY�� ��YjkF�C����9:���(McKan}�b�Ӕ��b��]�W��&���r��&��Ed'2�6!�� �:n=Է������\`�?��Ub}�h�zL��i�_��lj�W��yr�
�����쑟>�#��]f_�B��|�	�Rgr��z.�J�kY��/�@��
���l4g���<�B��^����;w�v�G�F�wI��RE����PU�8\\"-�I4E?�;�S�O�F	��Jr�)W�8��+EHr��PE���-�r+¥w�������񚉘'cR��T�[M��n'r�i�Z99Q��(u)�jЌ�%)W��uF6OP�V�4F#��v�k7{��}�
�J�ez)�-h7V�)�e���h�_��8�ȴ�H���E����w�k�<�uy�+ա��4-;��q೮�1�A�����/�P o�2�6w�I}I5&Z�B\\"�D͵�h�ѭۃ(�t,�2�h�yl��_�J)��c�x97
!�,�s��H�f�����@�#���<q]�,�8�
9:�M>L�M�n�S���6\\\\>��<�\`Git��_�7����RC����������4$%�
�5U�%����F�YD�3����6���(&TYe��j&��?M�,��� �C/]dT�X��1�b��0�I�*e��u#��PX\\"4��hd�@����&�yťO��y�4D3����I��Q�j��+9�lGn��8@�X�i�\\"V��o���;�h�c�=ZNG�r�z��
���h�S�����}ǇI?ǘ
����e5����SD����S����~�����BR8�!YvP�P����PV�@^-��f��ҷ���Bh<��$n�|��	Zڙ��N\\")&*�F6,#L�Oټy<�?6m)��a�	\\"�e�!h�ck�ʹZ�(��R!&D�h%A�d}��'h2����V
}����8Rz�>p�؛�=�Tf튫�S՞H���I�]�n�p�5oO�_f�������8A$Bn���A�obd�AL�L�����E�'��D���f9;�la�E3d oL�$i�� ��b}K*�[�P�����.������˾�D#7mT�J����ŕe_�d�r]T#-E��vO�+�]��)����{��E_]��:mը���}'L}ӟ�Y��y\\\\_�D;���?H�O�]�&]�AP2��� ��Q�Z�#sB��,~0is;�+K;�ޅ2�N�B���%>�ԌI]	B�+A�=A֣?�D���]P]���w�D����+�} ~��XH�1�
��B�1
���\`?� i3�Y��a��QI6
I���A����[��J�p,�R]��'4���Z?�\`�~�ξf��p��qtc'����*qEN�^�%cY�N��&7�ݮ�+�$te�qI�*�q���.������$�y�F&��a�C

�E2�]�+��c�g�f�'C�~X?�OK��Xm�<V+���Lr�xx�&Yȑ�S�?n�7j�D���:ccuX�Q���H�Q)��'��<�� xߒ
���5��ч�W=�Յ�����w�J�P�)_?�n�0Q
��Q�d2�ӥЧI�e]r����շr+
�JR�~�Kd 9&0���$6�AE�_��I�6��'Hz1m�1uXe�w�/y�p�/%{�
�6�+G��=\\"2΃���߸>^�[�)�:$Z(�iY��.��~�%��b]��z�Z������f�v���6�Ă3�.zp�K�a�_���z���Vo�7&��:�4�]V�@�#�\`k�� \\\\���v�k�Io|߈
� ��]�E���q���O.�-�AG����>8D�Ɯ�5�vu�&  @ IDATR�c�6's�xhL��:��qq�1kYtei�� Y�lm1ɲ�A|Yd��3�M����)A��,�fg)�K�]�V��-�N����4u߷��r�������oU�+uqiU
���e��=��x%G��\`�M�1�A��_i��D?Zm��W���qu/bog�M�s��1{�
�/%�~�}���	X��x�Ȏ�����&Hrz!i_֑n�6�l����G��@��g���hS���4��W��L��X�ߑ��]3�{�D������F�Sw���IX����:�������D�tXE�#$l�a>c�$�ߤMl����3Q����ٯ�#�N��E�qs?���D����u�[�
�. :q໏(���\\"�\\"��l �:�i�L�@ژ-R-!��d[(l���:�G�}�	�c�'$�.(k�~�_}��v��t|]ׯ���/��g\\\\�����>���a�&���=9�,�����O���Y���'2��$
�|	o��/!7&'�!��fQ��'2��F�ĆS���P
�����m7�@~,�@1EE�vI51�5]�����t�r�c£q	�8
�lFhL\`4�h���$^]��p_$]9�w}��K�c�_!i�	����g�Rt'F�=y7}�����镽_�	S��Eү������Y_4���=��g������	�W��49F�(�3���Ld�8����N��/��7�'����#���Ձl	Ґ��*���J�9�j�\`�\\"߹Yv0\\"F���}���c�A
2����Σ}��xH��ӝXm
)�e^塞��턮,���)�n����?��	y�8 �x����LX±��Ku��/i�����\`������[�	3��\\"��������n_���-�#~������4	
���\`H�����j2V}��V��:�D]D�8�~��q�Ÿ��EHv�O!AA_� ��,6����y
s����%��
2넟^��M{�^��(�J�����A��3�%�O�ʓ���!?��D�����~i�쟐e\\"��~�/�A\\\\�K�h[�e\`��a:�&��f�.�ڿWc���w�z����P�k���ػ��H�������➘�h��*Nd\`�
�����u'2� m_�M��t!
�d���6�$?��̻@�'�a��&����j�V����UxE�j�jD� /Bl%�E� WAWF]���ab��S�
�_�[�W��C�2�_YKG����>{��?֥͊�R�\\\\�>gq�S�,����df��f�4�M��>�S��Y.��8���j$%+�fD(m��P��7ÿ�D��.B��Vt���Е���C����x��'�k_$\`�գ�蘼@���螆edJ�B�����&���~tA��
�Y�8Ml��ĸXɗ �I�I���c.�6��/{u/��3¬]q�y����^��}�����U��~S۟K�q�p�+��Ս|@��
����͵qe�w�X�~���:Y-�/��/^r�f�t� ]YjM]�;Jӊ���+�5�R���֝�5��J4v!F&<����D����r�iZC�|zUt	��-�2�B=���$*2��6�#}+3yz���޵j�XP���۞��ه\\\\����'������zGn/��
�u�z���u{ge�?���h]���Ȁ���O�:، �c!��S��%1A��M�����$��At����P�
v��C|���t�\\"RF��f\\\\dD1S/+'�'��cӊΛAbuǤIȫ?�9Bȱ���B�D++H�e�IDK��VO���n���6�t�/���5��CGѯ�z��{��c]�8�7�9q�U�Z�������W��Ǳ-hL %��K��c���s�H~ć�t��M��M�=��(Ǉ�J� َI���C���]K�L��-�B�,5�|QE5�ge�Q�>,B�����/~���(Ї��+̆w@x��{�Ԭ�@p����#i���&� �
R.�~��4�!k�%��P��3@��
�n��B���K/�;tsh]'L}��WS���A��7�
IX���}�?�����
z�R�M6&����� ���uv��.�d���vq��V���6����RD����Kz\\\\g��	�@��M0�W|p̰�>�+~H��/�ަ��V�U�!:Ch�v���:���
+CA�����E��ehV�������ǧ{�^��e.>��R�@e�ȵtX�[�&WҲ���i��;�u�]y\`4���;�+��ǩ.�u}��˿ߟ���+�nLT���a� ���82갹$����)�>\\\\Y���hC肐A���Lq��6�fF�h���&\\\\���o�1\\\\�$ﴵR;Gt{�X���l 1A&@j4�I����nd�!�lkQ����suُ���X����d\`���It�mq��#��o��ܭu�0kW�w�r��
��~KB�r���5��vμA�~Eм�  ޸�d 6�bcR�����c�pdi�]�tJ7�
G���u����6A�4�Ff\\\\�I@��t��(����� ���7�.z�e��m�w����HPHI���t�h	�ڱ��������d��iVܾBu���7)d!T��,6��M����F=D�Og-����t������\\\\��h��eAoh�*wv.����������]Y���qӻQ�����!��(u4�b�7Е�֬�]E����P���ѓ}�\\\\���%�,C̆>Xfc&;S���?�r�lGq����\\"�kc!���/�������u���S��:}J�0r
i	y��\`3}�Ε#\\"	bC���)�\\\\�-~[K7�U��#��Av[V�-n:�?0:ޕ�V�a�W�UU{�'o�ْ׍6]X9Y8��7u�w.|1\`���=
�2UB�����&�Е�7��L��4	� �Y�K�E�����+�Vtei7��4]Y�]�L��Haò�|l��SE��	�+;�S����D�d�y���>���3�c������h}31�~E��I�!�<}����k��An�y]����ꡙ#_XMWS_����|��BK����$��\\\\Io������f��]��2)�l	�}H]3��R��Õ%6��N�FQ�g�#5����!d�4>�A�԰Y{:��~b��Ac��x���'�4u���S�r�����u@�����yui�{Qd�� ��F(�hDl�m�d�ֱlu�B%�ϗ��7r	��I�֌�j����x⿈��P�r��A8��8�+�����+zz�E撈��X\\"���N��jaC+��N�[~�i���s���ڑŷۧ+����6��iS�i�d��fR��A�C9��u� ]����^���[#�g�i��j_=p�����[79���!��k����GIb�s���u��v���q����*N���:���^:5[m������0�k�#H�0��/xq�r�aI�_�~
wh�JM<�
�!,|�2����@�gh��&��Eֳ�pZ�[���Dh��x�&v��X��=\\"Ց���f�4i^6�����R�d<R5�
�[l� d��l�YU�r�A�V�C̛��	B�%1W�8�:�ד׮�+K{���<��^;x#h���������aH�L�$N���=�E7��g��b��']^������@� ��h��D��qH8��3���\\\\Y�����.J_b��dY�A,6���찁�]9j�)��;���m�E_diG,K�З:Ǘ����_i��с��<^�Qp��Ԍ��:W�r� �7���Z��Ǆ��=A�6���y�~�{xD
��C��d���[�e���&M����~·
����ˤ�ʏ.����i�����F\`�,�4�	Y̆85�v9E+��ĈfN��j�g7�G2����\\\\\`��iX�$B�ckV��k���te��ho�?ⅅ��=s$����^�uW�
��3LZB\\\\�.���6>}k2H��������Z�0\\"@��~ؗ�3�V�Vv�̞��k��t^��ke�U���}&o�
$1����z��O-(����k�?{(�!�(4Kr4���ĹoF;�l��}\`��,tQl�!F�g��@Ls��y�5����]�E;����ܗK� B���IۢK�'5���
mz/Ĥ�ܪъ��z�ȇ�4�Ȗ�@~�lLv�.>q�'�V���}���@ȗ�3�Z5�E:�n�[3{�~9t�±7'yr�y���jO,I\\"����������i�+���a���� &��:\\"
~�$�}�r�}�y֜��WڨQW��[��ծ����W�׹��������ez>�dæ��2�? %���H4g�ʢC�s;p>�����L��!Ds�H3��?�Ӑ[W�U��Tz_^HW����w�6_\\"���~�jU�#�?�Lsf8�����>OcM�����ZN�2�8+>���H]z�qA$Odi���ÕEϭseێ���hu'(+=�(^��md!d�G��ߍm�1T'Z�-��б[�Ā��0]����&�\\"�6&NJ�\`�
P<�N(v���t[�+�s�%i�����<���V��qP=v�O����]�L�i�Ӧɉ_�a����6��D|�m'���w��u�P�ƙl<Ϊs9H��q�QN9
6k�-ځ,�0C!�����Z��ѕŇ[U�[$��
$�2�ia,�,Ï��\\"�ї��!�\\\\/\\"]�h�E�\`�u����
��j4����jIX����%9��\\"߻I>��,:�;\\"�x���@�#�}2X^���A5���j��;��ɽ2��\\\\���E�rg׮�[��l��Z
�f�~�_yj'{��]&���Ou@l�d��d�*��p_]_-��>�/� �s��I�c�b���E=�نYz��Ӣ+sU0!Ztei_���p�ó�7�=�$QZ=�Ր��)Е�D�+8'�.�6�%�G�c�2��av���^��v:����(+�Z�*���	�P�����s�BI�-]��3u�/�Mcl��I��B�B*\`�
T�:��fW��XU�:��+M��V�0sk94��Gd�'u7>!���!�	MԂ��!,s��p�:�@Wx�,)��=F�����+T�ڠ���T%Q�>L
��)��{����W�Bbqrk���m�}(d{��}�-�����Pȗ�2�b\`�T:���*���}Mi��K��3�t�~��TUyp��-�o��T�;���zӟ�v\\"��J
DǤ�C
�uAW�v��ܢ�/j�L(�'\\"��I��?�@��3�؎E��N.�0����3��Z����\\\\��\`+(~�����0�42=6/ԯ-^�%�3$%��U�cG�d����#��c� q!��EE��?��M���O 6�7h~S����m/��Fm���؞v�j�s׌����Yf������U�=�g���k�Z���竽�d�z�SO4�����F\\"2m����@
urmA��Ǣ/2Eq�w}BF4dC�-�,����H��ƣ�	��t{���.���Z��F��,�6��Ȉɠ���Q�-�\\\\�����m\\" (&8BW�U�6!E&6Jh��,���ud���k���u@�l���J�ӧ׌|�N�^3?�t[�aq��z�����&��&�@�6�;6̀�.���x�U�@��
QNy�fNB�4.�g��g�l���E�#�A>\\\\�w��2�L�.�Z������EȨ� Aַu�+R�E6w�LHv�?��A��O[42�������2��\\\\�)�qLm�bXH�)��>H+�11R�$H
��@��u�=A#��̇��i/�Z�_ȸ�-?���zO^�*���|��a�߿���m��d�\\\\�����\\\\���ae��JV|���]r|�6�+��[��Ҏ~!�ꟛ��qr%���d'D� �I�>���v���P/u�,�4�s;� d��hdc��-�E�����Kn}�ќ�߆
�S����(�颴�����H�b�e�-8�q����S���e~���5Xߜ�uʭt��X0��N�tg��mím3{�m�zŰ��fuȯFSh�	4�0�3A��G�=�D�zb+�g��ٳ�K\\\\�?�S����u@��Rt��,�q�X��OlTlo�Z�7Z�Ow��	�������jT/m��攬!G�]�22��$%	�R��	��c��Tm?��:�l{y��@����8>�%57p�ԁ���c¬^���ջ�餓���=$�0�����%�>!��,�2��'���(Е���!+>A�6!�Mеm\\"�8I�ʆ(�)Tj�iS>ujei�#�Q�>�g�W-F_y�Jv̭�1N1vہV{<���f�;���J�qz��rY��+>�e�+h�A�6�G�h����\\\\u���d\\"$?h���X��m|���z��ı���Qt���jMײU:���c�,L��O��[����_8��%���n�ՠ�6\\"���EK��c�C�����֞u�O�ٷ��;��v��
9�AMtHT8=l�ej��\\\\}'2c����cG�l�AIt\\\\Yt��5 -��s���P�0�����Q��A^��AT�LbF�$s�E�36�iC����m� U{u� ����2�S0|;w/�K:��P}Yqt�/ڍ�#¬]}�����v�gIO�Ow��
Y�9ݱƈ�ɠYF��VEQ�+��[���.��o�@��wmZ�1��7�!	LX]�b�Z[�+K;�C��H_��Ƕ	E�K0_�{����=hۆ�է�� ����ZN�6=EJ�_!B��@�֧ ��te�s����\`}YX�]�&藀s{Ge��G��v�1�̨��%�&���93����}��킉�������s�L�2q;�<�mO�v&��������!�m}k�؆���lH�\\"���@W���/hUڍQ�;|�:�_�)��uR=ȭ�-���k�x���,�w�XE���#Ȅ&�9>mڸ�3��U��$���E�L�� Ɏ���[B:���30���Q��v��=�Ѓ��ܢ������	s��t��)���K;?R<�7�����6 V�O�Q��	�J�le%G�d&
��,��D$���*�~�\\\\��	�y��_c�ө2��)VS/u�Sǀ�}��F!o�9�_�e;�fb5z�E�o�ȿ#s]|�.v8�\\\\�]]Q$+:����i��u�C�gO�R�b�
�U#�\\"�W��o��Ȳ�ܟ�Mq�1��0��,P�f�ϟ���c#��;�2|nj�0��G��w�\`.g�l����o�d�i
��N{2��Psdi]�|6���^�������4��\`���*���'x¦wQ+���]V]�\\"&r��L긝���#lvkE�?�2�&F�EY�:��M{X֕�W;y�	��]dC$��ʑ�W��)VB�|��E�xG���W�F�Ư\`��ȿ��fsV��j]j�t����|3P9n�t�^8_�T��\`����9/���j�N��� ���s�gJA�v}�t����I���	Y��!#H1�Yd�����k��
�P_�y���*�����Kn�ӏ�p�>��	M�b��^\\\\_l��l�;������F;N�b��!�6Z1��p�����
��Еm��>�+�����]��QRLF��h3�(������O��4^[��m%���o[9k�a�����!����4��jW?睅�=�7o�~�*�Z��볟�.��&��!Gd(2��'�V��mҁȭ��7z(V_b��|�/G�'��RH$�_C���:�ɵNH�:��fIAW6~�b+K;�L<��En�ܿC�a-���ɶncb�>
1a�k�
Dl�Z�Kr�h)v�Z��������FO�Ґ�i3uV_l�V���
��U�7�T���>[�>	_��q؜7[\\\\���k�j�Og�� �m�%ap�A���Է��ê	!o��j�:r�	�=Fh�'B�B�M{�^��������� X�TX�[�eڜ�40�ִ��!,�ꤺ:yRoM��2d���f�\\"��>�O\\" ��� �G�1�B�\\"���t�_�Q$a�}W�����%r��@��3��'
ρ�v�K=G�㕕��=��O�h�Ghly<�?�K�d�S��7v�:��؁z�T�.�.oy��;S�Xx�_U�ǆg4�B�Vݧԗ+9N��rĆS����ψ�b]!U��\\"�Y�끮lZ�{�]Y�ŗ�a���6U~ּQ{��c�r�l ,s\`3k�����M_���A��
QB+F��m�\\\\���ip,�Dذ����˾��m�2ka�D, '�f�P�8�n�@#_B����o\\\\eb�6A��(�E�i�-g��_m�a���d�\\\\1����B}�Η覼��VӢ��]����7m�Kea�ּ%U�kM��~@bL���h�ebc�L�@�X�bS�%?�Z�x
]�G���-���F�)���,Z�]o�̮�h��k���\\"d~#Y�̄*���dn�ej4�ƇY9�> K�\\"K�!l�!�ؘP-r%[�Qry=�j1����nt|3��D<B��j�|@fB����\\"d�	F>���L!p�����\\"��Z�����4���o��f���^��'�E���������%a�&��
'Z�7s���P
ܔ���/�������Є�\\"��!�b�0�	oGyK
b�.	r�N��?���P/u��\\"���(Ȧ\\\\{��U��B����@6��ٝ�A@����@�,aC킆Tl�i���ُ�+�;�A�
נKX�7����_A\\"�啉�Yl��<�GȈ���c�A 7�#d���/b�Ue��o��ѯ�3�>V��$���^���=so�^�卦�]<�[<���UV�;��ŭWW��k�6gs�Ɣ���|%�� I�EA�-2�Q��!�P[�s5�F�VWN��N|�C�?�vcy����}��鷺StO�D~�sc���lU�����&p���3��m\\"\\".�	�fȈ��1 }R���m������iŷf�d>(���֐�����xn�|��aU�����4�+��b�]�4��o��9<�գS��&���n��gU���G�����}L������!���WFo͂��}BG�fd*��N����q(�o:��ݍ��Q�]��I��
>�a�F&=��=4�7&;�O�D�7j��̦�Y
k���.������nZ�����NL�J�.zv&�R�����R��$Q!�kɼ�
\\"�!�\\\\ʜ�.�O��ѡ��2	�L�9\`��.\\"���@�O��3��d�z�;�x�z�k)\\"J�E޹�&;��r,�m-̍�c�|��l�u\`��?��COK�>M��-�����%�p��[�V�cO���(���{A�lV\`&:h���26&c�
5	\`�������w������e����\\"��5��	��y��(�Oȡ�(\\"b ��
�K�0��$p�2�Jn��e��Vҧ�4M�6o�/�������|^������vD��㑎�_ƣiJ���˯�oX}k��1CWv���]�D��^�r�\\\\���Z���_�����|.������J��EL��&PdKs�sׄ�0�s:�+�����^�����ct�l�r��� Ō�Ws8�(�	ߒO�R+�D1�A���B�qRI�Nޕ3dF���\\\\���^�g��
v����%��a�<|�qF%�a�\\\\4�=m���%�\\"��.�$]ΓA�
��:\`}�'����v�nM��K�P�Sq�����;����K�>�D��� X��yt��5�!G5J=-G�I�P�^��� G(SЕ%|��d��(~�����Ͱw|B�m����'l�k:�s�|�(��]Y�q���@�@�$��Ŧ��O6@�aT�L�u��\\\\�m��m����,���^l��M?�J��oV}�?�g�F߇\\"��Mڀ�	=�rq� �[������'���}g	]g��V�r��W�M�����z�_1�t�����R�O���_�h<ʖ���~�d�m=�6�43�u�_fb�T�DDXi�j�1AL�\\"K;�>q�FeH�][��R��B�lGm���'|�:ԋ.�,^�.Łm?^
ԝ���'|��bC����ɟ7c������	�b�gb\\"��я�V�
}����C#u��8$7F��gƏM�T�KZ�<�\\"�E�XO~K�ʤ�����!��d���E�#u��F�r���[晁6�h_:e�d��0S7����/53Mˢ�u�wh��YK��7�g���~����hE�Z�dB$Y4���[ M���G�L|�:�,z�
Y.[��ި��D�[�+G���fHВׁ(�f�0�q�d4ً?<���@�=���zҷ\\"�q�g�c��c�&������A��e�f\\"��� ��	Ć�EH2�Y=��Ŷ	�.��������jM�b�^�����Q�Y��&���i>q��h�'�u˃͛�:���:n!�2���}�\\\\E�����$3���K@�K�*O� �KH�CD�W@T�PAD]�.
�$@ ��(\\"�ʂ��+D�7�L��}��Sun��t�t������_*�tթsN��]�Tݺ� ��I��y~�����G��C�yfޕq�*yF4#d����C�sy�/�^��
 �
��k�� _<�u��.�
*2�ri
�*����р��� 	� HP� �Z�c�����\\"NE�_3�A�g�*��J�N�V�7[o �� O�Y���O-���j��Ԩ���Msn<��z�7bR��{�sD�,Wj��,��N�i�b��wt	������s� [/I���ӼË�z���E��?�z�3��r�p�8�g�$M�'k�cG� Ȱ%�ID������ӏ C?Qd�	uy��'d�2������\`�r��i�bNVs�+���h�&r�>@���s{K]]���6��Ytc�D�w5���\\"����qC�Os�2\\"�Ԡ�
j��@z0*\`����yi�4�}��=��9�S
�# W��T��C��|��<t��<�l@���xi�q����N1\`#�Y�	 �U ��>d��^�vbD��H �۞ �����Ae��,/����A��!+V�gݶ�������扗�H�E�����t�*�mTxi��%�Ҡ�=H��P&\\\\[q�obp5��h�S�\\"@�9���:���DS�ų�=�ё<�wxԤ=�\\"m]�6P��W�>�\\"�Z��dj��v+(gr �._�@{x�WS@�j�7P��z*n$�㔍o�GA�c5��
��P�- �
�e��d�B���3��=�b$B
�Ш���RH_��� /�@��7~ﹷ²!��{��x^�Z�<�ɜ�e��?*�x�Ͽ�	Z+S{#9ʰ'Ե�~�AndH��(X�ow�G��E,��J=_,t^0��
&+����iNyx4�٬�{�N��Y6���G (�������\\" �K�yP\\\\� DK�C�P�GYC�K���h��yx~��6�Qw�' ��ʱ�����?]dCm��J�����7e�%>;�X-O ��°�<��=%[�k@]�Afd�A��*�V�TWY�Y�ps(2�
%�uYj��2��7�Kl���ƣ@� ]w�.��#��U�$���W�����WGs 3MCIͻo�&��΢P98_�kO]O��4�
�����A�����\`�I��K�q˘����ß���T�'���P�a\`J7�[MN�\\"�2�f��U &~�=k�iky��O��<�5�+:k�(
ZPd�R[R�з�Ua��Z��U!@�l/EL����_.�ߜl�j��(5��l Ю<�]E�9�Ŋr6΍���)ax�ɴ��H2Y�����[f\\\\و�
&��E��I��͍(Ξ��\\"\\\\I��i�pW|�@(Ix���]@^ ���PƫL�9l��m]�̰\\\\Ǭ��vL��:���}r��
7��ʡ�eL�Ȥ?��QQ)CX��Xe�X�g��1{
��GD8��
��ܵ���,�~
�m�L���.�k�YmR;)�&�
��|e�i�E�)�2�\`�@�俥��P�-|-}�G�O���'�r�0��OKz[�⩪掞�;6��#�;Ϡ�j�)�{�����y�P\\"}Pr��\\"���-xl�,M��@9S]D]��CXڀg[B]_��%�M�(~�@n9����抮�rlIBoM2O b)�\`y��b�j�
�%Ϡ��8�w(�@
Y�����2ϠEeD�h ��?-���uy�ߖ�}L�����'��R?TgC� i�^ּ����^[�>����]t̒�~�h��j*�k��B���%t����ױ6��K�n�v.33�Z�n{^QRY���fA��B��rH&��sBMM��?��M�%��+ۨ �� �r&��b�e�U
J�m�2� �מ�:,���m�(��4v\\\\�J�Wqbχn,_��v���a�=Q�Gg[O���'ۃ,���Am���R�m]�����1~p�ccאޖ4���Rݟk�C�=�i}�+��~��F���H���x�
 $IxP���
��&I��L���[�<�X�Kt0O���]�z�֖1p?ƴ���ͧ-�;�M�#�4�G�E<���8m�詒��J�(�=Pd �PR���� ^^77�@ŊW�TQ�UY�k�ʏV��7I�ݣ�~W ��Q #���R_M]����#0��G8t.�0H�.�zԒ�����	0ռe��$��feJ6/���c�M������8� @�gK]�y�<�N� �P�#��Zy�!�,(�����x��[�	� 0�y�
�l�
�2����M{�\\"S�����5L?,ɀR�I/���^(�@AgysH�d�@�Ρ�Ef8�1��-Pd�
πg�˳NGV�C<h-y�Oc���#�<�~	&���S�鞍6��ٰ�v<�
2�@�3\\"����NΈ��tS�H�xI4�qE��SKEN(����B*�� BT�_mͤ�y++ ��1�����S\\\\g��TP�*@D�� &��K=ۀ�C7 &>ă6���B#��~��$����m��@F�
^��̫H谼�찍�eDyK�d\\"ZC�}࢝mQ�҇~�2�g�E��6�Cŏ
u������?vj~�!�
ѷ�3���}u��;3YsMU?]�9�5���'o3���xi��0O�\\\\E���� R6K]=��֋��×֤�>��<���hH� �h��	/���d $9�3�[jx� 0a��:�X�
01�9�clu��7P�+�l �_@�W��΀�&>Z�1ȡ@f��B��P�J���b��j 5v+�ŏ��oD�)Y�1�G_|�S����9�{g/�q��������6j��_���1+HuC�q0��M��iu��Y�4LVQ�ܹ����V��!U��Yd��m'e����y���\\"����aҼ �@Hz�D]>�'GP����̓���
\`��D��V��ʏ���g��L{Y�1�B����-�����.oe��u����
�Q�Z�ߍ�7}C?��+���oߘ��/4�.򸓯
��[���KŮ��\\\\�v|JR�Z���ӿ�b�ya0��V���W�p	?(�$'����n^k%��,u�@EI(�b���e��߃��d)mq~^�Q��A���*� �\`H��VK�e�ī=��>YY
���d}��:ᇔU�H�r}��2�4E��8S]D���stA)�O�E<�?���Z��>������6|@2<۳Ե;�?>5�r)�
�� ��k�<��o8��E�\\"����f8�𡿓����k�}�eq:l��3iv��?�1�!U满<�?���H��R���NN2#����vۀ�{�Bm�Emm�q�����[E�~/�œ?�˂@5�̀�+�hImy �/�=���SscvLۈZ9��j�l��9´j\`0��4��9�pD�u��\`
����V@<l	��	�B��\`٧�#p��?y�V�C��Ȕ�@G�{\\\\+g������^:m��1n=�T�g�Y��J�R�LU
PLΘ�@ke�A��qO��|�z������ȳyԷ6�+u�I�[�/���.�:�� �=x�3xPΐߠ��}x��C�_-��ٴ��u�Ky55�Hr�(C�P���S�LeR.�W�VV�1Z̃\\"�a��n_����J�K��6�\\";b�{����?;�q��;�����N|f܊ҫ�\\"}�n�|)���eEs$g �� ��	��д+� >��vB����}��4j���~��/��˫>�V�
d�A�(@�A��HΑR���\\\\��Z޵/lSO�!/�y�'���O�)�Eƀ��V�.�2��6�ЃrK
ȑ^*�jVoyi���q�����Kj|j ��s&��
�fOD˦m\\\\6^��iMZ��Z����e)Ӣ���W�|�8e�i�;v��܈i���P��z��qj*��P�iiC�����[F[��o�u���! ?��\\\\1��! ��Tx� ��1�y��2N[�0�b�Aڏ���Q�hp��u�vh�g���ʈ���^�V���*Ƀ�:[ Eΰ�ت��l��7���7��/O�ew��_�k
�\`��f�o�pͶ$�t\`P,�%etu�0��={�\\\\�O���U=����Qo�O$���֋�ب���й���e�!#���.�w��/�I�0(�Ϯ~���}�~�2������D�\\"��d��a���\\\\ʌ˂��,�Z�P��AJ�J(\\"'<(e�ʀMm#j�� (<(eAK�Wg�f�[��1>�Qm�h�Wӳ+֜A��:�=��؟Ϻ��[[�7\\\\w-Kj���o�[�0]�6����O�Ki��O[��-@E���VDyo�R�����e./���P.e��6./��n��}g���ԅ�
1��7��RK]�� C�0m̖g�����f
0�.���
Vx�F�hk�F�D�z!S#SC.匰��Lݍ(�4�	�
[��o~���ц3�E��T�§#p��?߂����2ZI�Q�^yj��o)\`�S�Ρ�xe�L��!}��oI�O)����Tr�I���������o�b&FP�oT����d�
��a���l Vk��&{�yr���v�ŲXyQw���|�z ���t�����A<\\"pDh\\\\6���F�u[�<�
�tZ����<ʬ�l�d�B�}���2��E�O�#P.������o��;�n<�/�{�\\\\
��&u�Cϐ��Z�4-��/���K--�1�ٔ&���cz��(se�=d��i�O��������8��#�utG��]k��R�:��PAB~
�P�o�Zjx�<�d �К kAI m�
�Ul�&g�Q��]��@д:\`��.�� ��(�^�my9t�r>�c덞��Ş�����.������j}�����f�9��=h(g׬�~��I=�Z�E�}Z�6QߢInY��@����c��O��B�[�TB�|Ԟ��[���4�suy[�J{�%�1���u���Ot�������(]�hC� P��R�*���l�Zs�d �x�J�XV���<��#��>�E�	�t2�J��O�X���m��r�GV� _.#:���j{#�'�>Ռ ����\\\\_J/X�\\"w��8=�ȫx��õ��.[J���i-W��*��>q��N?����}���(2��(x�
�vfz�L��%e.�2���R�����eh[+Sq�鵅I��+ޖ�  ��84ZIR@�'� !ڻy(@V���H[�WM��S�g�#�).��D^(\\"h �P=��h�6)�����K=?��r���*��WV��Z��tu�nR�S�\\\\sԝ��wԨ�A��릻v�kuGp}Œ�5Ko�������
�ڧ�Hڍ���T%I.1�e�,��h�b���C	48�2Ov��T�Z�Ad,e9�%���[�_�������
+))���P^M2HP�������2�J��l�F[�4؞E�����P�/}���r���F|U�v,ʢ-Z��2�s��E�پ52n[�떁����e���fv5_w�/{ie��C��bp�����Z=B�L�jդ��q:�����g�Y;�.��ӅhEG��N��̉JYV{��S&2MQ�
�Teo@S�������/O�M�ߗ_�R��b��/�P��Y�@�w( n���� @eK�e�̶�:ۮz�)���I>s�~�ѳ���$CeQH�yP�̖�P��A���eM[Q #tY�$�yPd��G�TZ}6����k�_B�8�8��?��'|-ǡ:Ղe�����D��'Ѓ�}�w\\\\����A@$<(2�0���@�����mü�d�j}���.�ZI�M�o�:���i%�-\`ūDgE�r)3 �#� ��<t� E��(�u�e�۶\`���� GAʫB�S��r�[yx;,>ZQZ^�EV�C|$ϧ\`)D9�j�%�  @ IDAT���~�O>
��
G�l:f��[f4�/g�q�>�o��y.]���5���9z�v�L�zZ
+:%�y
'Y����WSL�(��]x�su��ԣ)�C	2B��̋2�����r�x����Š�Q� 2o{Z
~x62��@�z���	?��(V�l
�eϬv�,�$*Qሱ=��f�؜�E�Qfo�|���V� �!��ʌ�Ly$���j�2x¾�i����H?�!�D}�uz�7h;v����%s���/��'|]ƥz�U�)�¸����M���8m6N=�jN�������7K].�ᩝ���e��%�U)$����FZ��si��V �)���/�ԫ��8�R9���F�) ]�-Zl�B���̃\\"�I,Y�Ux�A�փ2O~	�0�+���G9��YS���܎W��a}�.)#�NșhN��cH�����!�C��7�1n�)�8�0����>m�=gGӭ�w�� 1��5l�D36��,������ȋ8>r$�C��~X��n���b�i���\`���ðO��}.�2�/��䴀�l�2��ʕ���!�h��J�\`:R��v)�!!����ld��
M�D-uy�!C�P�����x�L�;Z���}�\\\\
g�X0cE���J�I��U��H8 ������{�ڹ���+5�T2[	�\\"�਎�D���-p�u�]=
�Qg�#��>l��[�T�'�mU^-bUG>
�
�R��h�m
�a9�V��smE��z�Q�X G�)�,J�_B\`)��f[��N�f@�(x؎��=�?N��Lpd/),�y
��.Y�Y��������ͶkV�mד�v�O��sS�fB^���ל�	_�⤙�d�B1�b��eQ���EF
��$�; 
=\\\\fur�%�n9���Z����O/�q1=�x���	�
�:���A�#�\\"���� / �r�Ke���py���jͬ�*��e{Ԯ(�>$�̣���k�B5�:P�m?�'�K(�G��x}
�[�ܽ!��༼ƢXTsU?߭�����/4=��ַ�\`-��4}�ol�����{�0O�\\\\ES�PL{�K}5�1�AN2��vn�zӫ+~�~�L|��qR��8���* -�\`�B��4�x5�x_O��w�����\\"�<2��#�0������X�CW��zH�Bv��%ꥬJg#����gʌTM��r�����r��\\\\|�o��7|ږ��e���Ͷl�!:u��tq[M��X�ӗ��.N���%'��b��2��x(�%�Ë,��H�奾�����%�n���%��+�g@����U;K( r��*,�Q@�Z��hQ{ÃR��'(2�S�����e��h����-3��+\`4 �n��nv}��=]s�Ow����<Ɓ��kTW�s������bp>M~Ϸ�h�����9���.k�#S�,�f�Fir�2P��*���Q�I�D�_��W*6\\\\
�X��h�&@~|ɛ���일���_h���2P��$���.O⬇C���w5��B�g��Ԁ6��D���ө�3�T����Y��|�28��Z9d�SI
)g�o�D���z*�!/W�6���ߤ�H:� u��kz�]}��]�\`G-X���5�m�Ͷ�
�%���q�'��LY�./�q�Df��M���� {X�����t2ԀY�X�7�e�h@L�L(d/ k�U����((8���öhq�׶��N�Z���z�W ��@9+���g�⃑Y��9��L��k���p��A��^б����
.j�֑��0ٝN��V����ZFku�kp��tm\\"'�۾��EsOi�./S�[��֋�PW��G�($?1���&�n�x�S�3��(b%�+?��R \\\\\`yP��2ʈ�v� |�2t(}$�z�?�PY���O��R�آ��f��sd�Û��~�5h���FʘǸ��� �8��!&b����,k����� �����Z�������aK��ӷ�8��v�fO�s��oݠm�RgH�J ���l�ʖ)W;�!ʥ�yj+z�e������?�b���ұ1p��4��\`s�h�+H<��T�N�٪�
ޚ��r�ڨ�L\\"�+X�!9c�P\\\\G�s;Pd3bX[;��e;�m���΢�}���O.����t�(9�@z�����o�L�n�#�g֍�,��P�\\\\[�$uͣw��0�q����J��P���1�	�;�9ӝ�J�Q��_�T- :@]��^���D��.�i��F �0#� pP����#9�4![g��Y}�Cj��(RdL�̤Q|�Ѵ#.�J:\`�R�7۫���>dA]�^�i�]��۷�H��
k�z�b1�����>��\`W��Mm]R���:������m��&C�h�{\\"�N�<�7s�p*u\\"_M]��3�E��%�P^�U˧$�?�l��a�l< 'x�-���u���P#g�b�əV�%���-�!�H�lyZ��a��\`��FY֬J)�|�R(�]
j�
��+��R�IQ��N(|�:�xL,
�Z�՗���n+�.�������[����Z�$u��It<~�t*M�s�Mѓ�3�vZNy�zP��ְú�\\\\����<�Y�6���u����H�%��-��|)��k�
�#f����n\\\\0oA����XA�2 2d�V QFTVp��lR�
�Pȡ\\\\(x�:�� km�2pE��2��T�e}��-ώ$>��u��{�:K��Wv�3
���V�#�Lm���
/�o��m��^3Z�gO?��FSb�&B��Lʟh��(�\\\\g���LY3U��*}�nce(��ЮV�v���~U�IEz�� �%���(�2��*5+J��h�� J52\\"�rP�Y?ԛ̫F�Ak� G��1���_E��JzU�{lE���΢�K�c���w�j�ӓ
@�vux�>y������ ]V�,��,V�eE?�KBR���6�gu����f��s;�ֶ�ⴥ�����4�1 9+F? � Q�-H�ă�B++I�V���;��Y� ��l2b��\\"�޷ty����N�xİ��@��;I�Pց>Q��
�%]��-��k�4����Nӽ������d�pm&�Ԣ��ф�����l�x%�'�k��-D�\\"5 ��E|5��H޶����a*�N�R�x�'���h�����v��z� �ਏ Yi
/ 1*�V���'�zq���.�B��^�P��0 ��@���N�M�ȣ��f�L{���%�M�T�f�\\\\�A��[�������\\\\\`N��x�D_��
�4���[����9���7�_�F�Qe��yӎ.M�<�f�4S�H<l��&Y
������[��0@&�RƲb(=��fKt��$��W� ����*o���Vs��)��|5��Xi?���[ a�<��
/�XTj2 
�6��論�)3����� '_{��cܞ�{e���}hu���K�-���?5���Y�G�Z\\\\>�����	c�a���������3� 9-� ���E��ފ�m�}�����O_ ٣k.��J]m��k IP��\\"e\`)2� @*�Pƶ�P�!�2�����<x2�Yx�E���	�Ԍ#�NQn�PM�G�� 
�d�(|u(����F�P{��}�^� -����+�w籫�Z.�A*~2]���n:���8�ԧ�9۽5�}��-;�a��4���2i9$+�, ��H���})M����%Zy=�\`A��գ�WT^X T�Qh�{��a$&P�h+�u�l��
�Y�
�xT�WyD��70+ׂ)���K�� ���B�CxW���X��M�h�֭�+���P�_Z�;im4�ߙ�x�_���S����+��4��>��˗�\\\\o*V�:�>K�K��m�|��n�Bn$}��^�y�mҗ.�l�uu�4C��Yq4�
�zO<GW(�ъ�Rw;6ڪ%�1�p�:<t����*o��r��xc���*���%��a�쇥�[xn��W�
 F��1�A)#�N����'�W�[#䒰��C��ؗ;:
祥/�ӕv�����x��j�7�ҳ�=�e�R��.+��8czo�Ո��i��z������j��DS�m��I;�����mb{�G�R�Nz��voP֗��@\\" ��eUV��:$9��)�� �:K]]y/=m��IU�$����-
�	�|ZsEHM
�����6��-�Yy�m\`۬Z��$�ۤ�V�U��V�~�&I�g.>����8?T���]H�~u<q����GwZ�FS�\\"Lm Y�2�a�+�zKV�U
��Ȉ^�<G��ߵU�OK��1y�>��ez CNAKy���A �$dA)P�~(��U(��CE��2�[�<�����r(���Wꍬ��Q@�k+�O�AtX[�N�Ʌܦ������kÞ�����}���_����&�qM�.�k����Y�k�C:�:X�䙭P�Z �z '\`'�\\"Z3Ӕ��.o�1%�^��a��e�����R����}u�P��c�
�K~G[���z^A�_�� B�5�hIL��)�@'g��P.e���l���@�.M�
�:�Lu\\\\VO�uDS9�aZ���{��t���T�9XaT񴙋U�V��*K��T�Uf����A:K���-ԗBU2��5�6��@��KP�]7�iN�WQ�����tκ�M���R_M���K�?���/� �<�&yE���#0ϫIC]^�
B� ��at��-OK+۟��;,�����@ke*�r�ZmD�x��򬣆���X�-����1,��?�»��l&�%��pp�M�Lz������N6�{T����_U*���J��К�':��O��.o�e uyi>�M����⛫/ҕn�7��̂��\\"�*_j����И\\\\^�R���Pi9: Z��\`�v�u�ha�C�q>K��g��A>r�P�+�%ǭ~X*�c��ݷ�_Z�c���.7菥��K�r�szSO���\\\\jn��4PZϢ����R��Qf�8Lif����.���ˑ��3����eWd�A/[�݊�.~��[���� ��TV������D.��1 o冔q������\\"�2���|E�� �ǡ�i�?-e�r���p�g�n�RV�XPͺvF*~�0��,���p��[x�h}f���*2�ք�ǔ+�@�wܶ.E@X%�E�-c��A]�+k��UY ���6z��| ��z�^�'0� \\\\Tڂ\\"#P�!tء�-P��<H����}�}�mv��h��jy��n�o)FTx��5r�f�	�����3J�ʛ��#]M\\"}�tM=;e����+�A�9�h���}3��9�o�l{b����;�����7�\`V%�ޡL�n�,��2T��r6S�?k@X��2�����H���+|�R��ഢ��˽Ls��zE�!�'\`*[�ؾ5<h#�^B�(<r�F���P(*K�_d� G�
���d�H���Ӹ#C�P��Nh ������wӝ��y�%*5�:|����.�:�����5�FS�T�]%�OK���qN_�۹w<*�זfVA�݈ �r2�2��ͨ�2��[������-�Y=��i/�@9C��w�z�K���x�O��TQ��K\\"A���_
�b,oA�B�\`��exP:
S��� Q�	���\`A*�%����Xjx hE�nP�b��O���l������uC���k��GzI��Yr��4{��q��oj�c?�I�ƴ�9&�t�y���/��mj9���@���NhP��$	J\`'�幭+k�3�/�+\`	Z���?D�Օ!����� pIt��Dq��%��s�\\\\�eDN��s坿N�����	����@+�K
���hd�ɋ=��2�CCtB��]T��t�>?�fpE�F;��VO�R�8�@�g��z��liu���Щ)��O����z���Ĩ?�<��]Lu�e��+�%�%(�(�2b��R>��מ�0o�����JZ�@:�h�I�� ,�� ekV�+��z�,�I A�D��T xP�N@ˌd�<��k��j�U��}������(l�
����\`������5kn�ϒ6�M�eVN�Ҍp���J�O<6�F).9u��K�<�Pql�^=)�9�����ȸ�Ⱥe.o�1Ѣ=��״%:���|��a��E{<W�S�t�P^�a��@H�j��J13�hx���&b]�9 �����-�.�A�mՓr�#�U�l���VZ����
�lV���*Ӗ��OՙO���pz_�.�v$\\\\�_�f��U��tu�R�k��1��}�m��lr���y����\`Q�#��m��K�1![���xEh�;�\\\\>���|����\\\\=��py�w˘oOx��%{�'P����}�6-��@	<Zy���2��M��� ��F�詪gT�����w��yH�V�?ˉ�pM��eUA�ԒOga�p=f&�<2@���ʌ��:��%����qN��=C�fXE�Z��0���|2hc�T(��E��@�����Uףm�S��:��q�#m���<�Ws��.�:���+G�G CA1�!Fa�e�=� �-�=��h ��A]>�Ou�����pW�u�˫�Fc�G�_��&�'�
2���k5[i�ҫ�[r_��n�[��\`��mT:�r# � �P�x�ُ�2j��6.�ԍ�2��-x�'��M�<�r[fr���7��)ڎ=�W�D�YMP�g\`�q)��-�\\"��E��̃Z\`J��B��md�!��T�r��!Ș�2�M���8T>˃zծ�7��1�>�׌�e�ک�g.�+�^J4hF�V�ST�\`n��n�[}���ˆʹH��X���*S�l���-W6��p�������P/e�ŗPmo��/�c��7�=��\`�KV�|_�c
�2�]
��(����%�d�E�f@V���o�ڈ>#ct�m��Z_@��'?y]8v�������2�*�{��׏�o	4�\`\\"Fj���Y�@��7�i�%\\\\}^��ⴀ	��#��h)xNB�\\\\��5�#�/���]�.϶k�S3��J�j�eG��0}�Wc0jx?.C9e^QZ��\\"� �2�\\" ]\\"Ȭ�R��3evD��y�$4͊T����N*kT?ޔ��V7���eￅ�߹3�����z^z5�4�m��-|pMf3�SU����(^�����oE*��2]�M3�����Ѩ�>����sX/͵���Pw5)�i�x��cˋ�1'��?��qU���!��P��4 �����9D g���J-��1b��R?��BH?U��@keR�ve��� ����a���X��WŐ+����.	C����
���KG��k�
3�Ao�*3��ǟ���X���r���o&f~����)��(TdA9�|D]�N=$��+�H�h��2IlOt���\`YGN�3N{���Ң
~�\`���{���D E�s@��2�&x�g�x���ۭhl�Yʓ���IWD����f�*+Wr��U(�^�����޷[�k���\`ڶeՊn���V���:��l�і��|�o��'[�/M�t�>=k���ɥ�|��I��R�r��)f=�Y*@'���]�Z��2���z�v��~�}��}�y<Ā�yi x�es�К�� �6zT�fp�1�j1Р�yR�|���&�G�؞�/�ԛ�\\\\��/�TQ&eK�V�������xN�Z��J�nu��7�|+t�[_��6�*{�����gZ�/}z�E����O�CtY���S�h�If4���2⹭��s$*'jA]^�@��ty��gN�g-K��R�ϓ{z�B��
5�2iEgˤ\\\\(��7��e��䁌�jF� � ���׫9��
^�U$�H�]�
eY���r���w��^F����J�S�-��Ƕ�x�o��o��e��vZl�-u����m�M�զC�����=5�4ᅬ
�����Ḥ���Txnk�_3%[^t�jrR�mT�kGg�� AF��
/�����ZMy� i�p�p���	|�� j�U�./�閁�܏}�L�vF��p��/k5_�睯)�,���2za{�S��%�������q�d1���~�(̥od>�:8[�~�$�h��Lu�i��2���g9![��T?���_�\\"ݰ�����
Z�T��ٚ��S>
K۝�>�<(g����2@bk�n�̓Bk�*ڑ��7�]�i 6� \\\\��eD��}{�l�K��l�Ҫ��%z��0Đ_I6�{Ǭ�g�C�ڦ2���^������mQk�!��z���49n[ ����Z��x�Z톴�9Sc[�mW�u�\`G�G�Yh�ӗ~���	��ƀ� I��L]�(x.��$�zn����FE���HF�x��T䄲oV^쒃�'��uBI>+��}�|G8�����塹����X�TW��#�d�*�ɑV��@ߖ��z�N�������%�3^����u��̈��ɘ���N��	A��2���D^ڊ�a�Y�a���6��6��꼢*<���2� JeD����@��rh�˰�<(g�A)؄2]\\"�ʋ~B��m��>�'�����v$���W�_<���6�?Z� �DRA_6��J�v��l�B�ɨR���M��&c=f�4���Ҙ��N=���W3c�C���\\"^��1�Lfg9Q+[�,oeD�K�ۋ.W&��W�ӧ��n]AѩYz��<ki ?�\`�����)�h��\\"��I�I�uy3�tPjx\\\\�(�.�/�R.�\\"[i/z�ޡ:�b#��NW�u뿗V�������i\\\\��Rߤ�_��o�Џk.?i�Iߦ����t����s��唤��-Rx�ۦ�]Y
ࡎA���	�&�Z���B*���B����)����۰zsL�����%p��Y1u��z,e��U��x�����3���*�	pJ��z:���e�9�n[[�I�me�u�
0�̡#D�gޡ���p�Y�����E�����h��7�еr�a�]ގ��m�cn��?�zZn:Tݑ��P�������}v S.5�܄R��(� �[����)�؆] �P��(J�&B�tڴ�	�aU�� e���P���,!C�a�3X1x�է<�ɡ��	3�:�,_�7�Q{6'+U�z����>�P5�k(��������p���.?K/�_@mK�υ����6s1����T�5�n�o�O�j���ϼpV����#�4d$�ĺ+:�N(�I�V�*��/V��
ʠ ���Sn�}u�|��W�o�!��VlU��@Q��8�\`��1s
�M �z/W�yD��a�V�l��y/KyBs�tS<�׽�-J����\\"�sPh��~��Ū����i+w���*h��Jq.1�:<C��v���7b���J��*�K*���y�S��K}5ue\\\\�Z���a�4��|Ȝ��~I 7��P섚U'��
�,\`��<
��ʡ1��h�LP��� 1��\`��e�2dQKўy�K�y�
ys��m�4��z�.鶻9�b�F? p��g�\\"��oַ\\\\�Z����u���$F�)4'|m�d�e���\\\\)�Λ\\\\&�ԁ\\"��KK��&��2�'/��Ѧ������z�N=����@ �z���������<8BI�D�P���\\"6��}[&����>�d}܎?����=��{{΅k�^f��eҟ4�TW�wÚ��n�l�	�����O֗2�k�N�Y��m�n�Y���Z�b��W��+� VS��'?Z=lA�L�Հ�U���{#�Oݱ�
z��)�>&������ { @F�
�:K�9����W�7[?���z�l����|�d��
>WtLM��.:����C��q��2���SY��\\\\v�*�&�e1�اê��Rܨ(2�h���Kj��':�#e��֋�j��	�μ�}�ӽ���(�� 4�QPΎ)G�xQ.�2�_�^�@�V&�f�iG��i�_\\"���.��2�7����w��YZ�m��o ���1 �R�ttL�j�}��vn�v�n�E_����D�j�[0{�����qޒ��c����u	�U���*�m��R&2e��9�o�H�#�P�2S��J��{.:xC���8��0�xFtϑ�D��#�F���LF��
uW�Q=
	�(Q�8B�u�~��c��\`�х,�����\\\\t����}R�Z����Az��g[��:s���W�TgJ���mR3�雖���7<\\"�W�I;�5,�VA����hNA�&��F H�R�zj�eb��b�����|���������rQ�?![��(Y\\"<�J(�����p� 9K�Wgw��
ؔCF���v�}�F��W��ᤴ���ٖ�2�g��/HK�Z�3��Zu:��c&?�?=��Û{��M�5�/�Xk�9�հ-UR/el	S!����L /����t1c��w�Nז�K�	HO������
�P��?A�Uc�-ʀj��
>�z���5��mXÓb�����O���O��H隽~�miex�H2���@-xe�.�i�t:V�,mwWb���l��J�@�x}��%�@���\`�>n��1Z�j�� �� %�̓:��2�)PxPζL�
)��:\\\\^��e.Փ�	�
Ŏ�S�_���J��4!1A�zJR4�^\\\\�v-�eM�!�m��U(�c�z�:e�] d��gaW�-O^�o�.��@KWO�o|i��U?������ ���[�Ɠ�+:֒��������>���I�H�\`��?����6�V EF��}�r��ބE�GH@�D�-W�2�a�L��@x�܈=�5驿?�B�N5~(X��9��@: �! �\\"��E���P��j�$�Ԉ������23��0�����=�5��6�4��p��߯WꝹ+)���=M�!�cIJ��(N��X�f�M���x������L�F�~�����Y�e��mTC�	��&�Z+C��ڋ�F�E�؂?�A]�\\"}T<�����O[�w�m?r���? B  ��R���]b���� ,�Af4���P�St�#�H��7r�.�d�V��\\"#�A�ŗ�]]��~�Ie���X�gR�Ο����He�Z���	��w\\\\I���涳a�ݿ_,?<�|�0'�ɘ��x>��IEv5u(�Ӿ�r�r�	_W�}*tv�R��@�%Kq@Dt�L��I��52�R����X����E�W��P[��(]7���Ԭ.
P�
JK�jϛ/(�
_���Q�{�;�����l����r���8�qMN��\`�|��r�aM[=�<����[���S%�-�#z0�e)Ӡ�?* B��!��-u۲�Hv�g⤏�ᠧh[�Y��h�2#�(),2z�(�n\\"��ϰ�r�%��J[эr)c�^���j�Y�Bw�����4f�Ǔ�?C���m<f��N�����hѸ�I��.m^����*���Eq�1���C;��X���hz9R��.�����, ���2]T,I�dy\\"<�?��m{�'>���\\\\&������3��
�.2D�D����C��B�����\` ����!�+# �/�'|��j�^�JE���Ϫ����3Q'�1N[���1Ho�/�H�կf]H>�B��m��k��H-Zz/M�W紃�	V�9/�
9K� IN�b:��8��l�P�*�{��c�e�Pa��nP�TQ���h�m�|��D \`��������&f
��7ixl��l��mQZᑬ�3|p!oV��-ݯdfK&\`�3�J��,5[����~(K.]����B�=(9�fY�3��9�! �+��dlF2�j�&�QW�sDWgp�FwYճ�'{�� ��(�T'��9#'Td,u�F��/�x�C���+��y��LǦ
�h��S�2��z�d���b@$�@D����K�-�ˋ������eA)����FxP�4��dZ�j�ڿȒtd��\`��Q�G��V�f�x�Ơ:�M&$\`����\\\\��̎�Ȏ�0�dd��k��
�AȄF �Nk�|�����b���a�֎'Q>t���/��d����� ��5#X5\\"z��  �(mi,�𢏄Y(2�
O�? ޮNA)'�����1�m���
���XiV%�}x��|��8�Sr�2�8O����'?B�ɭ�����m߯=���
�ԯ��t��u�2���PȻ�h��QO��h�ۦ��0����ҘnU�$�I��BQ��2~BQǼ#��G��ٱ�/�W��v�p �v�#i4e���4]�WޛD���1s�/4�#/r���>5�={����|}�
�$������oR��ϒ��W�<D��w����+��/҇΍
A� M���o����v���B'䖬�Z��
��Z>�j�
zx�i��@\\"��?ۨ�*<%�6���Ka0�|��,�	
�|��si(�M]�M
ku�>q�͚l��}|��kn�����v�,�s��p���O��Nx�T{�N]��f�1�\`����3�'�4F�ʽ�س�\\"�'����'<f�ѣO��,����Ƀ7E}�hb�b������������}|8���k���c$�
a�O�w�o��s4�<�{���U?\\\\�=�wnN�v�Ks�7�-��D�ʽo�ݻtN�Ƶq;��a�)�&5nEW�Sp�oӽ�G�c���{�*sN���;�#���u���0E.�ԕ�iūg���'[�4��<\`�AS����OgptY]�O�mJ��^�G�G��\\\\���?ׅ��~&k��򰓚GnE=\`:C��Yvm_����[���t׳>>-��
�ݾ%�.�k��T�(�?����I���:��:��\\"�����j�,}�3�	ۼ>K.{_}����J7�r>�+���>p�����=\`V}բG�P^VU�����W_�Kg|?|���½o;�4�wKڏ8���j��9;�Y�����uO=����b��̗i=S��~����w�G X��<?������'�=��95.x��1�^��kT夨|����c�����H&������5��X�ת�P�)�����i��f�1;�m��c&�W�:��Z�����O�t��>	F��Cn����rnު���{3�1�~�d�K�f�����6�:�Nu�����>v���w���G��x~yy�/vR�-�o��]8�w3>���Y��9�����V����/�7	J:�!�0���G\`\\\\Xp�-ە_-1.%)m���c״�'��ؔ���[0Gg���ɺ��2Z�I=g��2�w�G ��_�o�aN#�
?�ׇ]�H\`3\`��(���?�7�j\\\\4�XF�u����u޻�#��,x׭G��Mm7����tg���\`*�&<\`62tv�3�g#�����a����˜��a�\\"�~E�ߚ~0ӱ��_#��w���
e؀�O}�����}��җ���r���
��h(W�q�W�1�
ΘP�S
n����1����FC��t ����gJN띂���X�|����17��M}�����8C����#n>b��!ͤ)�
�95V�K�9==���	;n�\`8��������g���Ig;]�V��}���c�Z�'�MDT]��0��&�dGT��);{O}��{��V�5��c��V�I�������]k0�;��9ښ]�l�L���d}�6�d�W羅@�\\"0�6\\\\��|�)��r�=�,iS(3o�f�C��y䟁*|��fY/euIV��~�����vbyU�m�v�Я�*�2�$lgզ̱�ܤ-�I��'��4�m�~�������O@�����[Q�V^#��+.9���{,�0�J��1��⮵t���14�J���'���=�Y �g��r�[��
������.�n���k��|k�9��U�.[B�f�5���n��6��An�Ч;�޻4D�}o�8?�_�𡣧�w���+?���9��vO���p<*R�6ԟ����yj�������JK�A]��Db�S�s�݌�s Æ=\`�c��Տ��3�7)n�{���R�w�G �\\\\��O�W�cQ��R<O�9�����Ȭy��:U��xe�jR�^���ۿ=��y�|b�@iݚkB:���D��}�p���i�Ndظ�q�Z�苤��j��\\\\��8-�V�_>����=o�[Z��l�δ�R� ��)��H�1 0����
�K�2�>��z������K�/>�\\"�����UanoCtL-�?�O��/k,0�ӈRj�}��?�=UZ���w�1��G ����ۮ����FM��
�O��լ�
G�fáYP]���ʼmd����-��U�ͪ��o��\\"p�>?}}i��۝�ξ���bU-�~�x�9>��vt�N�f6�(+��3z�N[g�[紐@3(�Y�D��\\\\·Ş�ߏ�gƷ������\\\\^ ������G�
@ߊ�Rt���=�ޤ�@����M��·�j$!�x�dRw����ά�V�4M?��^h��t�c���;�x/|Z����ʼ�/��_���!��&R^��_j޲W�^��-V�uax�����MzF�{2�����/���Mơ\\"�MU�*M�:�?F���_�����ˉ ��/��CW}2_]򽙈X�Οm:�j�����Ы��ȟ�R^��D���1E��.���'�V�:�����!aG�y�1G��o����[����7,t����t����I��
3�aS�����e.�I}�juWP.]���ax�>c����eq^�RJ�>1���F#F���ge�����v�Z��\\\\oʫ���N�Ŧs��Wu\\"p�^��^Z����/���=��:���㈀�qo��j�C�Uf��8 (�������h���>IG 'a�|�ͷ�_.=��bJwL����c�W��f�#˯�[�� ����5)�\\"(mr����[��E߯lG o�	W��]iU9׿�ڹA�����C�=Z��ޯ0c5��VEuV�f�U��I�+{~G�w�/�_�'Yg�u�J��O��9��}�C?�{��Uj�ǩ�\`p���c�׳��ȯ0�0��3k�oi��G̵�ĺ��
^y�~�a��GjQ�����A��Q�g|b� ����m�P��ad������W����՝��h>Q�]u|�����d
�5��M���l�:Y�;2��������/���
�
V�+_����+�+�F@��]'C���O��V�C�������,w=���7m���}�����'=�/��/k]j^X�S�5I��G�G����@��,t�nK	,��/:�B�S4}j8>X
�*9f����lݻb��V�m5���H&M)�������f;������W��v��Ֆ��K���{�j�+�ha�����
�A��*WU�S>���ޔ�#��mdu�C�Ж�W�h2NS:x��t��o{+Πy��F��ݻ��sY�^��:uh�Ԟ#[�ѫ!0GN,U��I����/l鵿	�m�Xb����]�_ؾ�;��D�TwN-\\\\���x��m38�
y�l��.[�����f�-6��W��/+hqT���EཽO��{���zK���ڍ7�8�����z��Y/21��E���V����D��WO�/(O��O\\"�8�=-جs�
��]K�H��:zչ3.�=Ȟ�0���>�L��2?v��'�U{��>c�o����giw��ͳ��)�gN���$��
�	
�Z���d��	���{�����+�-}���B�5ӧ����J)���q|:�8������xO��\\"��\\\\��M���1X3��M���>)��>�On�љ�jz�3��C~����5�	���a�5t՟���Vj0X~�ko�%}����=����{j<T��=)�$4\`0
|dvǭ�K��>��Y��=Ai�m����G\`�ء���{'�_k�v���-\\\\9��#��N��V%0+�H�S�w���:-�
U/+��
�{A��E���e�7�f�U�Z}��;9�>��7�)a�p�ɍ[R�JmV��PP�V�җ�d?u��j���O��']S��Q�UO֧9������x�']��T
ͣ��\`�[F~�z|Q�}����M-Ы��f�	CŞ�ߏ����l���!0c�XT������K�Xۼ�����X��d�<
�w�O۩��=f�
J�L�?����O�)�ȅ�� z>��4S����-wM�
o�G�]�c���vvk�e�;ž�]'���7\\"�e⍀�x�۔v�\`�
ږ�� KEZM���1�x'|�����S�27�թJS6���F���퉀��Ĺq+;�CZe��x��$�n�?A�g�{�>����^�n�=#�|��������r�x�Ð��Y���ү�L����{m��h>9  �IDAT݉��
�$���gnxa��B����Պ��:=��ڴ_aVG$��5��M��kse�O{�L,��p
\\"0��v�-�V�=)W��c����%e�ۭ���|i�>��X�vGt�����h�]o�G exO��6.t$�B�^����� e!���x�L�%��Z�dP(|�����f�ޜ�@*#@Xٳk��m���L��uT*�2�����oڅ�5۾��n|O0����@;#���g���֫�i�#�m�/~��6���\\"���8%\\"��ݷ�ne\`k������Cކ�@v\\"��{z�x���s�K�/�}��v��6�����c��jѲE���m�FW��'z_������
d-[t��f�)���B�������oY��M=\`fb��\\\\r3ƿp���v�'��N�$��z/��b���S�K'���/�i��_<\`�/~mi��Y�� (\\\\��W��WNc���d<=�����տ��
���\`��q��z[���c�Z&O�W橁�
�~���m-����,������8�E}�t�oO�O�����􀙑ASW<�lP��Zwպ\`��[�V���#��t8i��g[������2���|F-_�򀙥�ܡ�: Ժ/캭�
J}[e)�W�$#��I�����t���W\\\\<��Ŷݛd��f�f�FT�?�ߦ<�%.k�L�b߷�D�W�#0�\\"��'^j�c&������Î�@��tW=\`fl�ԵKo\\"�6n���,;zƭ�+��\`ظs�
��y��.N-~���\`+ty�G�f�1n��B�TRZ�b���\`��{���o�#0�#��e�UQ��	C����9�ݯ������^j���پ7F�u�|z�$��-�߾��@j\\"0�0���˗��!<F��挵�o�L<\`&��[��ER��˖6�M0�ٛ����#0�#�ה'��ѩ׏%
�>���u�]ci��$���~\\\\���X��hJ�R+����T/�#�#P3*�{O��5+G(,t�rOO߿� �R�)����i���c&�������7�7nH���5ӻ^ܾwr�|TAG�#�b�]�?�y6#P�ӻY'z�va�'u����߂�ےV��N�g}|���K���ы;l����
�
�>����ps�f}�\\"�W�	��&բ�~J�̛Gչb�=X�%/�#�t^ӱf��{W>�H�Bo��,�T:e<\`�s\\\\��#�����?k��/)h.�^�G����
����t��v�o�7���Kw<\`�{|�N]��R���������ښu��G�G�%�T�o�{	�Ú	?
6��0�f�/�L<\`ff�Fq�����l�sä�m~OP���a��G�G��xǔ��wukk)��S��}ס�3}>e90�<z�������w��-�����鮡A�|≀
��{��j�S��)}GU���ً���Y}�w<�
: t_$�j����sj��3>>�F\`��ӧN�v�T�-^�����R⹬F�?V�Ց��>v۽���M�;
^�����QT'V��G ����]��N��1��d��I�Av���G�O��y�Ղ��U����J,c
�W�#P3}�u�mٳ���	�bO�)5�|a&#�W�����և}t�\`���LR�#K��tG\`��������W-^��g����L�(������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������.��)0sg�    IEND�B\`�",
      "file": "/assets/images/logo.png",
    },
    Object {
      "content": "    @@     (B     (   @   �           @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          'X�  |� qD� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �;� �.� �0�                                                                                                                 T� �9� vC��@�3�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�2�@�3�<�(�1��2� �:�                                                                                                         \\"W� \\"W� Z�FN��}A���@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��@��2�ݳ)�<�)� �*�                                                                                                     )]� #X�  U� \\"W�~%V��bH���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���:���)���(���/�
�-� �1�                                                                                                 #W� \\"W� \\"W�/\\"W��!W��7R��yB���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���?���/���'���'���*�Y�&� ��                                                                                             #Y� #X� #X�\\"W��\\"W��\\"W��\\"W��VK���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���7���(���'���'���(�ɱ,��+� �/�                                                                                         \\"W� \\"W� \\"W�I\\"W��\\"W��\\"W��!W��.T��rD���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���>���,���'���'���'���'���)�x�� �4� �9�                                                                                 #X� \\"W� \\"X�\\"W��\\"W��\\"W��\\"W��\\"W��!W��IN���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���4���'���'���'���'���'���(�߱+�+�*� �-�                                                                             #W� 'Z� !W� \\"W�g\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��(V��hF���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���@���<���*���'���'���'���'���'���'���)���5��/� �7�                                                                         #X� \\"W� \\"W�\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��*V�\`H� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �@� �<� �/�	�)���'���'���'���'���'���'���'��*�D�(� �)�                                                                     ,_� #X� *c� \\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�;'V�  n� �A�                                                                         �B� �'� �,� �+��(�հ'���'���'���'���'���'���(���.�
�,� �1�                                                                 \\"W� \\"W� \\"W�5\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��&Z�#X� &Y�                                                                                 �7� �I� �$� �)�h�'���'���'���'���'���'���'���)�a�%� � o                                                             #X� #X� #X�\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�$\\"W� #X�                                                                                         �0� �,� �-��(���'���'���'���'���'���'���(�б,��+� �/�                                                         \\"V� \\"W� \\"W�P\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�n!W� a� �@� �@� �@� �@� �@� �@� �@� �@� �@�                         �?� �?� �@� �@� �@� �@� �@� �@� �@� �,� �(� �*�J�'��'���'���'���'���'���'���)���4� �*� �S�                                                 #Y� \\"W� \\"W�\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"X�\\"W� �?� �@��@��@��@��@��@��@��@��@�                     �2� vE�  �� �@�
�@�
�@��@��@��@�
�@��?� �.� �2��(���'���'���'���'���'���'���)��5�/�5� �Q�                                             $[� $Z� !V� \\"W�o\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�P\\"W� !V� A� A�6A��A��A��A��A��A��A�9A�                     �8� �8� �5�1�?�A�ƃA�ŃA�ŃA�ŃA�ȃA�h�@� �,� �*� �+�0�(��'���'���'���'���'���:���N���Y��R� �R�                                         #X� \\"W� \\"W�%\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��#X�#X� $Y� {B� {B�GzB��zB��zB��zB��zB��zB��{B�J{B�                 �A �8� �4
�6���@���B���B���B���B���B���B���B� �:� �2� �� �)��'���'���'���&���2���N���Q��Q�F�Q� �Q�                                     #Z� #X� %Z�\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�5\\"W� \\"W�     uC� uC�FuC��uC��uC��uC��uC��uC��vC�IvC�             �Rv �>� �=� �=�l�<���B���C���C���C���C���C���C톋C�     �/� �+� �,��(�ϰ'���'���)���E���R���Q���Q���Q��Q� �R�                                 \\"W� \\"W� \\"W�<\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��5�� #X� %]�     pD� pD�FpD��pD��pD��pD��pD��pD��pD�IpD�             �Rj �Hu �Fx/�Dy�D���E���E���E���E���E���E���E冐D�     �:� � � �%� �)�_�'���&���3���P���Q���Q���Q���Q�d�Q� �X� �b�                         #W� \\"X� #X�
\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�\\"W� \\"X�         kF� kF�FkE��kE��kE��kE��kE��kE��kF�IkF�         �[\` �Rj �Pm
�Mo��Lo��L{��G���F���F���F���F���F���F݆�F�         �2� �,� �.��(���'���>���R���Q���Q���Q���Q�ҵQ��Q� �R�                         !V� \\"W� \\"W�X\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�f\\"W� &[� +��         fG� fG�FfG��fG��fG��fG��fG��fG��fG�IfG�     �gU �Sl �Xb �Wde�Uf��Ue��Tq��I���G���H���H���H���H���HՆ�G�             �)� �(� �*�B�)��E���R���Q���Q���Q���Q���Q���A� �R� �S�                 #X� \\"W� \\"W�\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�\\"W� #X�             aH� aH�FaH��aH��aH��aH��aH��aH��aH�IaH�     �lL �bW �\`Y)�^[��^\\\\��^[��\\\\g��L���I���I���I���I���I���I͆�I�             �6� �/� �*��-���H���R���Q���Q���Q���Q���Q��Q�3�Q� �Q�             ']� $Y� !V� \\"W�w\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�H\\"W� \\"W�                 \\\\I� \\\\I�F\\\\I��\\\\I��\\\\I��\\\\I��\\\\I��\\\\I��\\\\I�I\\\\I� �uA �lL �kN�gQ��fR��fQ��fQ��d]��N���J���J���J���J���J���Jņ�J�                 �-� �6� �7�)�M�ݵQ���Q���Q���Q���Q���Q���Q���R��R� �S�         #W� \\"W� \\"W�*\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��#Y�#X� #Y�                 WJ� WJ�FWJ��WJ��WJ��WJ��WJ��WJ��WJ�IWJ� �[d �rC �qF]�oG��oG��oG��oG��lS��Q���K���L���L���L���L���L���K�                 �:� �c� �A� �Q�q�Q���Q���Q���Q���Q���Q���Q���Q�N�Q� �P�     $X� #X� #X�\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�/\\"W� #X�                     RL� RL�FRL��RK��RK��RK��RK��RL��RL�IQK� �|8 �z;$�x=��w=��x=��w=��x=��sI��S���M���M���M���M���M���M���M�                     �N� �Q� �Q��Q�ĵQ���Q���Q���Q���Q���Q���Q���R��Q� �R� \\"W� \\"W� \\"W�C\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�~U� #X� ']�                     MM� MM�FLM��MM��LM��LM��MM��MM��MM�I\`T� �/߁2�߀3�߀3�߀3�߀3�߀2��{?��U���N���N���O���O���N���O���N�                         �P� �Q� �Q�S�Q���Q���Q���Q���Q���Q���Q���Q�l�Q� �S� #W� #X�
\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W��\\"W�\\"W� #X�                         HN� HN�FGN��GN��GN��GN��GN��GN��HN�I�i� �'V�)��)��)��)��)��(�߃5��Y���Q���R���R���R���R���R���Q�                         �S� �R� �R��Q���Q���Q���Q���Q���Q���Q���Q�صQ�\\"�Q�  q� #T�\`\\"V��\\"V��\\"V��\\"V��\\"V��\\"V��\\"V��\\"W�^\\"W� S� &Y�                         CO� CP�FBO��BO��BO��BO��BO��BO��>M�G�� ���������������+��\`��Z���Z���[���Z���[���[���Z�                             �Q� �Q� �Q�7�Q��Q���Q���Q���Q���Q���Q���P���;���p��l��l��l��l��k��k�� j��#a�#\`� #X�                             =Q� =Q�F=P��=P��=P��=P��=P��=P��GT�M�
����������������)��e���e���e���e���e���e���e���e�                             �U� �N� �H��W���X���X���X���X���X���X���X��]�=�� 
���
���
���
���
���
���
���������� #��                             8R� 9R�F8R��8R��8R��8R��8R��6Q���}~�����
��
��
��
��
��
���ڃG*�on��om��om��om��om��om��om��om                             �� ��  �� ���������������!��6> �� ��g���������������������
��a��  u� C��                         3S� 3S�F3S��3S��3S��3S��3S��5T����O��� ���������������=�sg�yZ��yZ��y[��y[��yZ��y[��y[��yZ                             �� �� ��6����������������������� ��� �� ��
���������������������	������� ��                         .T� .T�F.T��.T��.T��.T��.T��2V����L��� ��������������yY لHلH�ڃH�كH�كH�كH�كH�ڄH�كH                         �� �� ����������������������������$�� �� 	�� ��I������������������������ �� #�� C��                     )U� )U�F)U��)U��)U��)U��)U��-W����L�� ������������� �5�5��5��5��5��5��5��5���5                         �� �� ��Q�����������������������n� �� +�� �� $�����������������������	�����1
�� ��                     $W� $W�F$W��$W��$W��$W��$W��'X����L�� �����������H�� �# �\\"�\\"��\\"��\\"��\\"��\\"��\\"��\\"��\\"                     �� �� ������������������������������ ��     �� �� ��/	������������������������\\"���� )��                  _�  _�F ^�� ^�� ^�� ^�� ^��$\`����K��� ����������� � ����������������                 �� �� � ��o�����������������������P�� �         ;�� $��  �� �������������������������K	�� ��                 j� j�Fj��j��j��j��j��!k����K�� ��������� � � ����������������                 �� �� ��%���������������������������� ��             �� �� ��	���������������������
������� !��             v� v�Fv��v��v��v��v��w����K�� ������R� �      � ����������������             �� �� ����������������������������5�� ��                      �� �� 
��_���������������������
��i �� U�� U��         �� ��F��������������������K�� ������� �     � ����������������             �� �� ��<�������������������������� �� ��	                     $�� �� ��
���������������������	�����!�� ��         �� ��F��������������������K�� �ߵ��$� �         � ����������������         �� �� ��
���������������������������� ��                             �� 
�� ��B����������������������������� ;��     �� ��F��������������������J�� �ݷ]ݶ ۿ �	         � ����������������     �� � �� ��Y�����������������������f�� ��
 ��                             0�� �� -����������������������������7�� ��     �� ��F��������������������J�� �ܸܸ �             ޶ ޶޶�޶�޶�޶�޶�޶�޶�޶     �� �� ������������������������������ ��                                     �� -�� -��(T���f���j���h���]���E���#������ ���� {�� �� ��F��������������������W�� +ٹ  ܷ                 ڹ ڹڹ�ڸ�ڸ�ڸ�ڸ�ڸ�ڸ�ڸ  �� �� � ��x�����������������������H�� ��                                         <�� ��� 0�� }��qz���z���z���{���{���r���S���C��RB�� y�� 	�� 	��=	���	���	���	���	���
���U��f �� ׾ ۽                 ׻  ֻ ֻ �ֻ �ֻ �ֻ �ֻ �ֻ �׻ uֺ  �� �� ��*���������������������������� ��                                             {�� y�� z��y���y���y���y���y���z���z���w���z��y�� �� �������������� ��:�� ػ                     ռ  ռ ռ ռ Լ Լ Լ ռ Լ ռ  �� ����������������������������.�� ��                                                     w�� y�� y��Ry���y���y���y���y���y���y���y��ly�� ��� �� �� �� �� �� �� �� 
�� ��                         ռ  ռ  ռ  ռ  ռ  ռ  ռ  ռ  ռ  � �� ��C�����������������������}� �� ��                                                     {�� z�� z��y���y���y���y���y���y���y���y���y��#y�� y��                                                                                         �� �� ��
���������������������������� ��                                                             y�� y�� y��7y���y���y���y���y���y���y���y���|��z�� z��                                                                                 ��+ Ҕ  �� ��\`�����������������������^�� �                                                                  {�� z�� }��y���y���y���y���y���y���y���y���y��:|�� A�� ս                                                                          ּ  �� � ������������������������������ ��                                                                     y�� y�� y��!y���y���y���y���y���y���y���y���{����M Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  ع  ���������������������������A�� ��                                                                         z�� {�� y�� y��iy���y���y���y���y���y���}�����O�ּ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �غ ���������������������������� ��                                                                             z�� y�� z��y���y���y���y���y���x����ˢ�ѽ�Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �����������������������)�� ��                                                                                     y�� y�� y��Ky���y���y���x���������2�ռ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �ֻ �����������������u� �� ��                                                                                     z�� y�� y��y���y���y���x����ȃ�Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �޶���������������� ��                                                                                             y�� y�� y��1y���x�������ɿ�ռ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �ռ �����������V�� �                                                                                                 �� z�� v�� y���z�����c�ռ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �ڹ��������	�� ��                                                                                                     y�� y�� p���̮�ξ�Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �Լ �����9� ��                                                                                                             n�� ��  ��< ռ 5Լ 4Լ 4Լ 4Լ 4Լ 4Լ 4Լ 4Լ 4Լ 4Լ 4Լ 4Լ 4Լ 4Լ 4Լ 5Լ 5Լ 5Լ 5Լ 5Լ 5Լ 5Լ 5Լ 5Լ 5Լ 5Լ 5Լ 5Լ 5Լ 5׻ )�� ��                                                                                                             z��  �� ��G Լ Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  Լ  غ � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ��������������������������    ?���    ���    ���    ���    ���    ���    ���    ���    ���    �� ��� �� ��� �� ��� �  �  ?�  �  ?�  �  �  �  �    �    � \`  � \`  � �  ��  ���  � �  �  �  �  �  �  �  �  �  �  �  �  �  �  �  �  �  �  �  � ��  ���  �� �   � \`   � \` \` �   \` �   � �  �  �  �  �  �  ?�  �  ?� ��� � ��� �� ��� ���    ���    ���    ���    ���    ���    ���    ���    ���    ���    ?�������������������������",
      "file": "/favicon.ico",
    },
  ],
  "root": "libs/test-web/assets/src",
}
`;

exports[`init generator should run successfully with default options 65`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/auth/data-access",
  "sourceRoot": "libs/test-web/auth/data-access/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/auth/data-access/src/**/*.ts",
          "libs/test-web/auth/data-access/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/auth/data-access/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/auth/data-access",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 66`] = `
Object {
  "root": "libs/test-web/auth/data-access",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/guards/is-admin.guard.ts",
    "/src/lib/guards/is-logged-in.guard.spec.ts",
    "/src/lib/guards/is-logged-in.guard.ts",
    "/src/lib/test-web-auth-data-access.module.ts",
    "/src/lib/test-web-auth-data-access.service.ts",
    "/src/lib/test-web-auth-data-access.store.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 67`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/guards/is-admin.guard'
export * from './lib/guards/is-logged-in.guard'
export * from './lib/test-web-auth-data-access.module'
export * from './lib/test-web-auth-data-access.service'
export * from './lib/test-web-auth-data-access.store'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { CanActivate, CanActivateChild, CanLoad, Router, UrlTree } from '@angular/router'
import { Role } from '@proj/test-web/core/data-access'
import { TestWebUiToastService } from '@proj/test-web/ui/toast'
import { Observable } from 'rxjs'
import { map } from 'rxjs/operators'
import { TestWebAuthStore } from '../test-web-auth-data-access.store'

@Injectable()
export class IsAdminGuard implements CanActivate, CanActivateChild, CanLoad {
  constructor(
    private readonly router: Router,
    private readonly store: TestWebAuthStore,
    private readonly toast: TestWebUiToastService,
  ) {}

  canActivate(): Observable<boolean | UrlTree> {
    return this.isAdmin()
  }

  canActivateChild(): Observable<boolean | UrlTree> {
    return this.isAdmin()
  }

  canLoad(): Observable<boolean | UrlTree> {
    return this.isAdmin()
  }

  private isAdmin(): Observable<boolean | UrlTree> {
    return this.store.user$.pipe(
      map((user) => user?.role === Role.Admin),
      map((isAdmin) => {
        if (!isAdmin) {
          this.toast.error(\`You need to have Admin permissions.\`)
          return this.router.createUrlTree(['/dashboard'])
        }
        return true
      }),
    )
  }
}
",
      "file": "/lib/guards/is-admin.guard.ts",
    },
    Object {
      "content": "import { TestBed } from '@angular/core/testing'
import { RouterTestingModule } from '@angular/router/testing'

import { IsLoggedInGuard } from './is-logged-in.guard'

describe('IsLoggedInGuard', () => {
  let guard: IsLoggedInGuard

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [RouterTestingModule],
      providers: [IsLoggedInGuard]
    })
    guard = TestBed.inject(IsLoggedInGuard)
  })

  it('should be created', () => {
    expect(guard).toBeTruthy()
  })
})
",
      "file": "/lib/guards/is-logged-in.guard.spec.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import {
  ActivatedRouteSnapshot,
  CanActivate,
  CanActivateChild,
  CanLoad,
  Router,
  RouterStateSnapshot,
  UrlTree,
} from '@angular/router'
import { Observable } from 'rxjs'
import { map } from 'rxjs/operators'
import { TestWebAuthStore } from '../test-web-auth-data-access.store'

@Injectable()
export class IsLoggedInGuard implements CanActivate, CanActivateChild, CanLoad {
  constructor(private readonly store: TestWebAuthStore, private readonly router: Router) {}

  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> {
    return this.isAuthenticated(state.url)
  }

  canActivateChild(): Observable<boolean | UrlTree> {
    return this.isAuthenticated()
  }

  canLoad(): Observable<boolean | UrlTree> {
    return this.isAuthenticated()
  }

  private isAuthenticated(url?: string): Observable<boolean | UrlTree> {
    return this.store.loggedIn$.pipe(
      map((loggedIn: boolean) => {
        if (!loggedIn) {
          return this.router.createUrlTree(['/login'], { queryParams: { url } })
        }
        return true
      }),
    )
  }
}
",
      "file": "/lib/guards/is-logged-in.guard.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebAuthDataAccessService } from './test-web-auth-data-access.service'
import { IsAdminGuard } from './guards/is-admin.guard'
import { IsLoggedInGuard } from './guards/is-logged-in.guard'

@NgModule({
  imports: [
    CommonModule,
    RouterModule,
  ],
  providers: [TestWebAuthDataAccessService, IsAdminGuard, IsLoggedInGuard],
})
export class TestWebAuthDataAccessModule {}
",
      "file": "/lib/test-web-auth-data-access.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { TestWebCoreDataAccessService, LoginInput, RegisterInput } from '@proj/test-web/core/data-access'

@Injectable()
export class TestWebAuthDataAccessService {
  constructor(public readonly data: TestWebCoreDataAccessService) {}

  me() {
    return this.data.me()
  }

  login(input: LoginInput) {
    return this.data.login({ input })
  }

  logout() {
    return this.data.logout()
  }

  register(input: RegisterInput) {
    return this.data.register({ input })
  }
}
",
      "file": "/lib/test-web-auth-data-access.service.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { Router } from '@angular/router'
import { TestWebCoreDataAccessService, LoginInput, RegisterInput, User } from '@proj/test-web/core/data-access'
import { ComponentStore, tapResponse } from '@ngrx/component-store'
import { Observable } from 'rxjs'
import { switchMap } from 'rxjs/operators'

interface TestWebAuthDataAccessState {
  errors?: any
  user?: User | null | undefined;
}

@Injectable({ providedIn: 'root' })
export class TestWebAuthStore extends ComponentStore<TestWebAuthDataAccessState> {
  readonly errors$: Observable<any> = this.select((s) => s.errors)

  readonly user$: Observable<User | null | undefined> = this.select((s) => s.user);

  readonly loggedIn$: Observable<boolean> = this.select(this.user$, (user) => !!user)

  readonly vm$ = this.select(this.user$, this.loggedIn$, this.errors$, (user, loggedIn, errors) => ({
    user,
    loggedIn,
    errors,
  }))

  constructor(public readonly data: TestWebCoreDataAccessService, private readonly router: Router) {
    super()
    this.initializeEffect()
  }

  readonly initializeEffect = this.effect(($) =>
    $.pipe(
      switchMap(() =>
        this.data.me().pipe(
          tapResponse(
            (res) => this.setState({ user: res?.data?.me }),
            () => this.setState({ errors: null }),
          ),
        ),
      ),
    ),
  )

  readonly meEffect = this.effect(($) =>
    $.pipe(
      switchMap(() =>
        this.data.me().pipe(
          tapResponse(
            (res) => {
              this.setState({ user: res?.data?.me, errors: res.errors })
              this.router.navigate(['/'])
            },
            (errors) => this.setState({ errors }),
          ),
        ),
      ),
    ),
  )

  readonly loginEffect = this.effect<LoginInput>((input$) =>
    input$.pipe(
      switchMap((input: LoginInput) =>
        this.data.login({ input }).pipe(
          tapResponse(
            () => this.meEffect(),
            (errors) => this.setState({ errors }),
          ),
        ),
      ),
    ),
  )

  readonly logoutEffect = this.effect(($) =>
    $.pipe(
      switchMap(() =>
        this.data.logout().pipe(
          tapResponse(
            () => {
              this.setState({ user: null, errors: null })
              this.router.navigate(['/'])
            },
            (errors) => this.setState({ errors }),
          ),
        ),
      ),
    ),
  )

  readonly registerEffect = this.effect<RegisterInput>((input$) =>
    input$.pipe(
      switchMap((input: RegisterInput) =>
        this.data.register({ input }).pipe(
          tapResponse(
            () => this.meEffect(),
            (errors) => this.setState({ errors }),
          ),
        ),
      ),
    ),
  )
}
",
      "file": "/lib/test-web-auth-data-access.store.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/auth/data-access/src",
}
`;

exports[`init generator should run successfully with default options 68`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/auth/feature",
  "sourceRoot": "libs/test-web/auth/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/auth/feature/src/**/*.ts",
          "libs/test-web/auth/feature/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/auth/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/auth/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 69`] = `
Object {
  "root": "libs/test-web/auth/feature",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/login/login.component.spec.ts",
    "/src/lib/login/login.component.ts",
    "/src/lib/login/login.module.ts",
    "/src/lib/logout/logout.component.spec.ts",
    "/src/lib/logout/logout.component.ts",
    "/src/lib/logout/logout.module.ts",
    "/src/lib/register/register.component.spec.ts",
    "/src/lib/register/register.component.ts",
    "/src/lib/register/register.module.ts",
    "/src/lib/test-web-auth-feature.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 70`] = `
Object {
  "content": Array [
    Object {
      "content": "
        export * from './lib/test-web-auth-feature.module';
        ",
      "file": "/index.ts",
    },
    Object {
      "content": "import { NO_ERRORS_SCHEMA } from '@angular/core'
import { ComponentFixture, TestBed } from '@angular/core/testing'
import { TestWebAuthStore } from '@proj/test-web/auth/data-access'

import { LoginComponent } from './login.component'

describe('LoginComponent', () => {
  let component: LoginComponent
  let fixture: ComponentFixture<LoginComponent>

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [LoginComponent],
      schemas: [NO_ERRORS_SCHEMA],
      providers: [
        { provide: TestWebAuthStore, useValue: {}}
      ],
    }).compileComponents()
  })

  beforeEach(() => {
    fixture = TestBed.createComponent(LoginComponent)
    component = fixture.componentInstance
    fixture.detectChanges()
  })

  it('should create', () => {
    expect(component).toBeTruthy()
  })
})
",
      "file": "/lib/login/login.component.spec.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { TestWebAuthStore } from '@proj/test-web/auth/data-access'
import { LoginInput } from '@proj/test-web/core/data-access'
import { TestWebUiFormField } from '@proj/test-web/ui/form'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <auth-page
        (submitForm)=\\"submit($event)\\"
        [errors]=\\"vm.errors\\"
        [fields]=\\"fields\\"
        buttonTitle=\\"Log in\\"
        linkPath=\\"/register\\"
        linkTitle=\\"Register\\"
        pageTitle=\\"Login\\"
      >
      </auth-page>
    </ng-container>
  \`,
})
export class LoginComponent {
  readonly vm$ = this.store.vm$
  readonly fields = [
    TestWebUiFormField.email('email', { label: 'Email', required: true }),
    TestWebUiFormField.password('password', { label: 'Password', required: true }),
  ]
  constructor(private readonly store: TestWebAuthStore) {}

  submit(input: LoginInput) {
    this.store.loginEffect(input)
  }
}
",
      "file": "/lib/login/login.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { Routes, RouterModule } from '@angular/router'
import { TestWebAuthDataAccessModule } from '@proj/test-web/auth/data-access'
import { TestWebUiFormModule } from '@proj/test-web/ui/form'
import { AuthPageModule } from '@proj/test-web/auth/ui'
import { LoginComponent } from './login.component'

const routes: Routes = [{ path: '', component: LoginComponent }]

@NgModule({
  declarations: [LoginComponent],
  imports: [CommonModule, RouterModule.forChild(routes), TestWebUiFormModule, AuthPageModule, TestWebAuthDataAccessModule],
})
export class LoginModule {}
",
      "file": "/lib/login/login.module.ts",
    },
    Object {
      "content": "import { NO_ERRORS_SCHEMA } from '@angular/core'
import { ComponentFixture, TestBed } from '@angular/core/testing'
import { TestWebAuthStore } from '@proj/test-web/auth/data-access'

import { LogoutComponent } from './logout.component'

describe('LogoutComponent', () => {
  let component: LogoutComponent
  let fixture: ComponentFixture<LogoutComponent>

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [LogoutComponent],
      schemas: [NO_ERRORS_SCHEMA],
      providers: [
        { provide: TestWebAuthStore, useValue: { logoutEffect() {}}}
      ],
    }).compileComponents()
  })

  beforeEach(() => {
    fixture = TestBed.createComponent(LogoutComponent)
    component = fixture.componentInstance
    fixture.detectChanges()
  })

  it('should create', () => {
    expect(component).toBeTruthy()
  })
})
",
      "file": "/lib/logout/logout.component.spec.ts",
    },
    Object {
      "content": "import { Component, OnInit } from '@angular/core'
import { TestWebAuthStore } from '@proj/test-web/auth/data-access'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <auth-page pageTitle=\\"Logging out\\">
        <div class=\\"error\\" *ngIf=\\"vm.errors\\">
          {{ vm.errors }}
        </div>
      </auth-page>
    </ng-container>
  \`,
})
export class LogoutComponent implements OnInit {
  readonly vm$ = this.store.vm$
  constructor(private readonly store: TestWebAuthStore) {}

  ngOnInit(): void {
    this.store.logoutEffect()
  }
}
",
      "file": "/lib/logout/logout.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { Routes, RouterModule } from '@angular/router'
import { TestWebAuthDataAccessModule } from '@proj/test-web/auth/data-access'
import { TestWebUiFormModule } from '@proj/test-web/ui/form'
import { AuthPageModule } from '@proj/test-web/auth/ui'
import { LogoutComponent } from './logout.component'

const routes: Routes = [{ path: '', component: LogoutComponent }]

@NgModule({
  declarations: [LogoutComponent],
  imports: [CommonModule, RouterModule.forChild(routes), TestWebUiFormModule, AuthPageModule, TestWebAuthDataAccessModule],
})
export class LogoutModule {}
",
      "file": "/lib/logout/logout.module.ts",
    },
    Object {
      "content": "import { NO_ERRORS_SCHEMA } from '@angular/core'
import { ComponentFixture, TestBed } from '@angular/core/testing'
import { TestWebAuthStore } from '@proj/test-web/auth/data-access'

import { RegisterComponent } from './register.component'

describe('RegisterComponent', () => {
  let component: RegisterComponent
  let fixture: ComponentFixture<RegisterComponent>

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [RegisterComponent],
      schemas: [NO_ERRORS_SCHEMA],
      providers: [
        { provide: TestWebAuthStore, useValue: {}}
      ],
    }).compileComponents()
  })

  beforeEach(() => {
    fixture = TestBed.createComponent(RegisterComponent)
    component = fixture.componentInstance
    fixture.detectChanges()
  })

  it('should create', () => {
    expect(component).toBeTruthy()
  })
})
",
      "file": "/lib/register/register.component.spec.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { TestWebAuthStore } from '@proj/test-web/auth/data-access'
import { RegisterInput } from '@proj/test-web/core/data-access'
import { TestWebUiFormField } from '@proj/test-web/ui/form'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <auth-page
        (submitForm)=\\"submit($event)\\"
        [errors]=\\"vm.errors\\"
        [fields]=\\"fields\\"
        buttonTitle=\\"Register\\"
        linkPath=\\"/login\\"
        linkTitle=\\"Log in\\"
        pageTitle=\\"Register\\"
      >
      </auth-page>
    </ng-container>
  \`,
})
export class RegisterComponent {
  readonly vm$ = this.store.vm$
  readonly fields = [
    TestWebUiFormField.email('email', { label: 'Email', required: true }),
    TestWebUiFormField.password('password', { label: 'Password', required: true }),
    TestWebUiFormField.input('username', { label: 'Username', required: false }),
    TestWebUiFormField.input('firstName', { label: 'First name', required: false }),
    TestWebUiFormField.input('lastName', { label: 'Last name', required: false }),
  ]

  constructor(private readonly store: TestWebAuthStore) {}

  submit(input: RegisterInput) {
    this.store.registerEffect(input)
  }
}
",
      "file": "/lib/register/register.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { Routes, RouterModule } from '@angular/router'
import { TestWebAuthDataAccessModule } from '@proj/test-web/auth/data-access'
import { AuthPageModule } from '@proj/test-web/auth/ui'
import { RegisterComponent } from './register.component'

const routes: Routes = [{ path: '', component: RegisterComponent }]

@NgModule({
  declarations: [RegisterComponent],
  imports: [CommonModule, RouterModule.forChild(routes), AuthPageModule, TestWebAuthDataAccessModule],
})
export class RegisterModule {}
",
      "file": "/lib/register/register.module.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'

@NgModule({
  imports: [
    CommonModule,
    RouterModule.forChild([
      { path: 'login', loadChildren: () => import('./login/login.module').then((m) => m.LoginModule) },
      { path: 'logout', loadChildren: () => import('./logout/logout.module').then((m) => m.LogoutModule) },
      { path: 'register', loadChildren: () => import('./register/register.module').then((m) => m.RegisterModule) },
    ]),
  ],
})
export class TestWebAuthFeatureModule {}
",
      "file": "/lib/test-web-auth-feature.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/auth/feature/src",
}
`;

exports[`init generator should run successfully with default options 71`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/auth/ui",
  "sourceRoot": "libs/test-web/auth/ui/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/auth/ui/src/**/*.ts",
          "libs/test-web/auth/ui/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/auth/ui/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/auth/ui",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 72`] = `
Object {
  "root": "libs/test-web/auth/ui",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/auth-page/auth-page.component.ts",
    "/src/lib/auth-page/auth-page.module.ts",
    "/src/lib/test-web-auth-ui.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 73`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/auth-page/auth-page.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component, EventEmitter, Input, Output } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { TestWebUiFormField } from '@proj/test-web/ui/form'

@Component({
  selector: 'auth-page',
  template: \`
    <div
      class=\\"min-h-screen bg-gray-50 dark:bg-gray-900 dark:text-gray-300 flex flex-col justify-center py-12 sm:px-6 lg:px-8\\"
    >
      <div class=\\"sm:mx-auto sm:w-full sm:max-w-md\\">
        <img class=\\"mx-auto h-12 w-auto\\" src=\\"assets/images/logo.png\\" alt=\\"App Logo\\" />
        <h2 class=\\"mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-gray-300\\">
          {{ pageTitle }}
        </h2>
      </div>

      <div class=\\"error text-center mt-6 bg-red-300 text-red-800 rounded-md p-4 mx-auto\\" *ngIf=\\"errors\\">
        {{ errors }}
      </div>

      <div class=\\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\\" *ngIf=\\"buttonTitle || (linkTitle && linkPath)\\">
        <div class=\\"bg-white dark:bg-gray-800 py-8 px-4 shadow sm:rounded-lg sm:px-10\\">
          <ui-form [form]=\\"form\\" [fields]=\\"fields\\" [model]=\\"model\\" (submitForm)=\\"submitForm.emit(model)\\">
            <div class=\\"flex flex-col space-y-6 mt-6\\">
              <button
                [disabled]=\\"!form.valid\\"
                type=\\"submit\\"
                class=\\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\\"
              >
                {{ buttonTitle }}
              </button>

              <a
                *ngIf=\\"linkPath && linkTitle\\"
                [routerLink]=\\"linkPath\\"
                class=\\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\\"
              >
                {{ linkTitle }}
              </a>
            </div>
          </ui-form>
        </div>
      </div>
    </div>
  \`,
})
export class AuthPageComponent {
  @Input() buttonTitle?: string;
  @Input() linkPath?: string;
  @Input() linkTitle?: string;
  @Input() errors: any;
  @Input() form = new FormGroup({});
  @Input() fields: TestWebUiFormField[] = [];
  @Input() model = {};
  @Input() pageTitle?: string;
  @Output() submitForm = new EventEmitter();
}
",
      "file": "/lib/auth-page/auth-page.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiFormModule } from '@proj/test-web/ui/form'
import { AuthPageComponent } from './auth-page.component'

@NgModule({
  declarations: [AuthPageComponent],
  imports: [CommonModule, RouterModule, TestWebUiFormModule],
  exports: [AuthPageComponent],
})
export class AuthPageModule {}

",
      "file": "/lib/auth-page/auth-page.module.ts",
    },
    Object {
      "content": "
        import { NgModule } from '@angular/core';
        import { CommonModule } from '@angular/common';
        
        @NgModule({
          imports: [
            CommonModule
          ]
        })
        export class TestWebAuthUiModule { }
        ",
      "file": "/lib/test-web-auth-ui.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/auth/ui/src",
}
`;

exports[`init generator should run successfully with default options 74`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/core/data-access",
  "sourceRoot": "libs/test-web/core/data-access/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/core/data-access/src/**/*.ts",
          "libs/test-web/core/data-access/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/core/data-access/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/core/data-access",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 75`] = `
Object {
  "root": "libs/test-web/core/data-access",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-core-data-access.module.ts",
    "/src/lib/test-web-core-data-access.service.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 76`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-core-data-access.service'
export * from '@proj/shared/util/sdk'
",
      "file": "/index.ts",
    },
    Object {
      "content": "
        import { NgModule } from '@angular/core';
        import { CommonModule } from '@angular/common';
        
        @NgModule({
          imports: [
            CommonModule
          ]
        })
        export class TestWebCoreDataAccessModule { }
        ",
      "file": "/lib/test-web-core-data-access.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { ApolloAngularSDK } from '@proj/shared/util/sdk'

@Injectable({ providedIn: 'root' })
export class TestWebCoreDataAccessService extends ApolloAngularSDK {}
",
      "file": "/lib/test-web-core-data-access.service.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/core/data-access/src",
}
`;

exports[`init generator should run successfully with default options 77`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/core/feature",
  "sourceRoot": "libs/test-web/core/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/core/feature/src/**/*.ts",
          "libs/test-web/core/feature/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/core/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/core/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 78`] = `
Object {
  "root": "libs/test-web/core/feature",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/environments/environment.prod.ts",
    "/src/environments/environment.ts",
    "/src/index.ts",
    "/src/lib/test-web-core-feature-graphql.module.ts",
    "/src/lib/test-web-core-feature.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 79`] = `
Object {
  "content": Array [
    Object {
      "content": "export const environment = {
  api: '/api',
  graphql: '/graphql',
  production: true,
}
",
      "file": "/environments/environment.prod.ts",
    },
    Object {
      "content": "// This file can be replaced during build by using the \`fileReplacements\` array.
// \`ng build --prod\` replaces \`environment.ts\` with \`environment.prod.ts\`.
// The list of file replacements can be found in \`angular.json\`.

export const environment = {
  api: '/api',
  graphql: '/graphql',
  production: false,
}

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as \`zone.run\`, \`zoneDelegate.invokeTask\`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error'  // Included with Angular CLI.
",
      "file": "/environments/environment.ts",
    },
    Object {
      "content": "export * from './environments/environment'
export * from './lib/test-web-core-feature.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { ApolloClientOptions, InMemoryCache, split } from '@apollo/client/core'
import { WebSocketLink } from '@apollo/client/link/ws'
import { getMainDefinition } from '@apollo/client/utilities'
import { APOLLO_OPTIONS } from 'apollo-angular'
import { HttpLink } from 'apollo-angular/http'

import { environment } from '../environments/environment'

function httpToWs(path: string): string {
  return [
    // Replace 'http*' with 'ws*'
    location.protocol.replace('http', 'ws'),
    // Get the current hostname
    \`//\${location.hostname}\`,
    // Get the current port
    \`:\${location.port}\`,
    // Add the path
    path,
  ].join('')
}

export function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {
  const http = httpLink.create({ uri: environment.graphql })
  const ws = new WebSocketLink({
    uri: httpToWs(environment.graphql),
    options: {
      reconnect: true,
    },
  })
  const link = split(
    ({ query }) => {
      const { kind, operation }: any = getMainDefinition(query)
      return kind === 'OperationDefinition' && operation === 'subscription'
    },
    ws,
    http,
  )
  return {
    link,
    cache: new InMemoryCache(),
    defaultOptions: { query: { fetchPolicy: 'no-cache' } },
  }
}

@NgModule({
  providers: [
    {
      provide: APOLLO_OPTIONS,
      useFactory: createApollo,
      deps: [HttpLink],
    },
  ],
})
export class TestWebCoreFeatureGraphQLModule {}
",
      "file": "/lib/test-web-core-feature-graphql.module.ts",
    },
    Object {
      "content": "import { HttpClientModule } from '@angular/common/http'
import { NgModule } from '@angular/core'
import { SvgIconsModule } from '@ngneat/svg-icon'

import { TestWebCoreFeatureGraphQLModule  } from './test-web-core-feature-graphql.module'

@NgModule({
  imports: [HttpClientModule, TestWebCoreFeatureGraphQLModule, SvgIconsModule.forRoot()],
})
export class TestWebCoreFeatureModule {}
",
      "file": "/lib/test-web-core-feature.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/core/feature/src",
}
`;

exports[`init generator should run successfully with default options 80`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/dashboard/feature",
  "sourceRoot": "libs/test-web/dashboard/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/dashboard/feature/src/**/*.ts",
          "libs/test-web/dashboard/feature/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/dashboard/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/dashboard/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 81`] = `
Object {
  "root": "libs/test-web/dashboard/feature",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-dashboard-feature.component.ts",
    "/src/lib/test-web-dashboard-feature.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 82`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-dashboard-feature.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { TestWebCoreDataAccessService } from '@proj/test-web/core/data-access'
import { map } from 'rxjs/operators'

@Component({
  template: \`
    <ui-page headerTitle=\\"Dashboard\\">
      <div class=\\"dark:bg-gray-800 px-6 py-4 mb-3 md:mb-6 rounded-lg shadow\\">
        <ng-container *ngIf=\\"me$ | async as user\\">
          <div class=\\"flex items-center justify-between\\">
            <div class=\\"flex items-center\\">
              <div class=\\"flex-shrink-0 h-20 w-20\\">
                <img class=\\"h-20 w-20 rounded-full\\" [attr.src]=\\"user?.avatarUrl\\" alt=\\"\\" />
              </div>
              <div class=\\"ml-4\\">
                <div class=\\"text-lg font-medium text-gray-900 dark:text-gray-200\\">
                  {{ user?.name }}
                </div>
                <div class=\\"text-lg text-gray-500\\">
                  {{ user?.email }}
                </div>
              </div>
            </div>
            <div class=\\"flex space-x-3\\">
              <ui-button link=\\"/account\\" label=\\"Manage Account\\"></ui-button>
              <ui-button *ngIf=\\"user.role == 'Admin'\\" link=\\"/admin\\" label=\\"Admin\\"></ui-button>
            </div>
          </div>
        </ng-container>
      </div>
    </ui-page>
  \`,
})
export class TestWebDashboardFeatureComponent {
  me$ = this.data.me().pipe(map((res) => res?.data?.me))
  constructor(private readonly data: TestWebCoreDataAccessService) {}
}
",
      "file": "/lib/test-web-dashboard-feature.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'
import { TestWebUiButtonModule } from '@proj/test-web/ui/button'
import { TestWebUiPageModule } from '@proj/test-web/ui/page'
import { TestWebDashboardFeatureComponent } from './test-web-dashboard-feature.component'

@NgModule({
  declarations: [TestWebDashboardFeatureComponent],
  imports: [
    CommonModule,
    RouterModule.forChild([{ path: '', pathMatch: 'full', component: TestWebDashboardFeatureComponent }]),
    TestWebUiButtonModule,
    TestWebUiPageModule,
  ],
})
export class TestWebDashboardFeatureModule {}
",
      "file": "/lib/test-web-dashboard-feature.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/dashboard/feature/src",
}
`;

exports[`init generator should run successfully with default options 83`] = `
Object {
  "implicitDependencies": Array [
    "test-web",
  ],
  "projectType": "application",
  "root": "apps/test-web-e2e",
  "sourceRoot": "apps/test-web-e2e/src",
  "tags": Array [],
  "targets": Object {
    "e2e": Object {
      "configurations": Object {
        "production": Object {
          "devServerTarget": "test-web:serve:production",
        },
      },
      "executor": "@nrwl/cypress:cypress",
      "options": Object {
        "cypressConfig": "apps/test-web-e2e/cypress.json",
        "devServerTarget": "test-web:serve:development",
        "tsConfig": "apps/test-web-e2e/tsconfig.e2e.json",
      },
    },
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "apps/test-web-e2e/**/*.{js,ts}",
        ],
      },
    },
  },
}
`;

exports[`init generator should run successfully with default options 84`] = `
Object {
  "root": "apps/test-web-e2e",
  "tree": Array [
    "/.eslintrc.json",
    "/cypress.json",
    "/src/fixtures/example.json",
    "/src/integration/app.spec.ts",
    "/src/plugins/index.js",
    "/src/support/app.po.ts",
    "/src/support/commands.ts",
    "/src/support/index.ts",
    "/tsconfig.e2e.json",
    "/tsconfig.json",
  ],
}
`;

exports[`init generator should run successfully with default options 85`] = `
Object {
  "content": Array [
    Object {
      "content": "{
  \\"name\\": \\"Using fixtures to represent data\\",
  \\"email\\": \\"hello@cypress.io\\"
}
",
      "file": "/fixtures/example.json",
    },
    Object {
      "content": "import { getGreeting } from '../support/app.po';

describe('test-web', () => {
  beforeEach(() => cy.visit('/'));

  it('should display welcome message', () => {
    // Custom command example, see \`../support/commands.ts\` file
    cy.login('my-email@something.com', 'myPassword');

    // Function helper example, see \`../support/app.po.ts\` file
    getGreeting().contains('Welcome to test-web!');
  });
});
",
      "file": "/integration/app.spec.ts",
    },
    Object {
      "content": "// ***********************************************************
// This example plugins/index.js can be used to load plugins
//
// You can change the location of this file or turn off loading
// the plugins file with the 'pluginsFile' configuration option.
//
// You can read more here:
// https://on.cypress.io/plugins-guide
// ***********************************************************

// This function is called when a project is opened or re-opened (e.g. due to
// the project's config changing)

const { preprocessTypescript } = require('@nrwl/cypress/plugins/preprocessor');

module.exports = (on, config) => {
  // \`on\` is used to hook into various events Cypress emits
  // \`config\` is the resolved Cypress config

  // Preprocess Typescript file using Nx helper
  on('file:preprocessor', preprocessTypescript(config));
};
",
      "file": "/plugins/index.js",
    },
    Object {
      "content": "export const getGreeting = () => cy.get('h1');
",
      "file": "/support/app.po.ts",
    },
    Object {
      "content": "// ***********************************************
// This example commands.js shows you how to
// create various custom commands and overwrite
// existing commands.
//
// For more comprehensive examples of custom
// commands please read more here:
// https://on.cypress.io/custom-commands
// ***********************************************

// eslint-disable-next-line @typescript-eslint/no-namespace
declare namespace Cypress {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  interface Chainable<Subject> {
    login(email: string, password: string): void;
  }
}
//
// -- This is a parent command --
Cypress.Commands.add('login', (email, password) => {
  console.log('Custom command example: Login', email, password);
});
//
// -- This is a child command --
// Cypress.Commands.add(\\"drag\\", { prevSubject: 'element'}, (subject, options) => { ... })
//
//
// -- This is a dual command --
// Cypress.Commands.add(\\"dismiss\\", { prevSubject: 'optional'}, (subject, options) => { ... })
//
//
// -- This will overwrite an existing command --
// Cypress.Commands.overwrite(\\"visit\\", (originalFn, url, options) => { ... })
",
      "file": "/support/commands.ts",
    },
    Object {
      "content": "// ***********************************************************
// This example support/index.js is processed and
// loaded automatically before your test files.
//
// This is a great place to put global configuration and
// behavior that modifies Cypress.
//
// You can change the location of this file or turn off
// automatically serving support files with the
// 'supportFile' configuration option.
//
// You can read more here:
// https://on.cypress.io/configuration
// ***********************************************************

// Import commands.js using ES2015 syntax:
import './commands';
",
      "file": "/support/index.ts",
    },
  ],
  "root": "apps/test-web-e2e/src",
}
`;

exports[`init generator should run successfully with default options 86`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/environments",
  "sourceRoot": "libs/test-web/environments/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/environments/src/**/*.ts",
          "libs/test-web/environments/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/environments/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/environments",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 87`] = `
Object {
  "root": "libs/test-web/environments",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/environments/environment.prod.ts",
    "/src/environments/environment.ts",
    "/src/index.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 88`] = `
Object {
  "content": Array [
    Object {
      "content": "export const environment = {
  api: '/api',
  graphql: '/graphql',
  production: true,
}
",
      "file": "/environments/environment.prod.ts",
    },
    Object {
      "content": "// This file can be replaced during build by using the \`fileReplacements\` array.
// \`ng build --prod\` replaces \`environment.ts\` with \`environment.prod.ts\`.
// The list of file replacements can be found in \`angular.json\`.

export const environment = {
  api: '/api',
  graphql: '/graphql',
  production: false,
}

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as \`zone.run\`, \`zoneDelegate.invokeTask\`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error'  // Included with Angular CLI.
",
      "file": "/environments/environment.ts",
    },
    Object {
      "content": "export * from './environments/environment'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/environments/src",
}
`;

exports[`init generator should run successfully with default options 89`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/layout/feature",
  "sourceRoot": "libs/test-web/layout/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/layout/feature/src/**/*.ts",
          "libs/test-web/layout/feature/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/layout/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/layout/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 90`] = `
Object {
  "root": "libs/test-web/layout/feature",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/components/layout-footer/layout-footer.component.ts",
    "/src/lib/components/layout-footer/layout-footer.module.ts",
    "/src/lib/components/layout-header-links/layout-header-links.component.ts",
    "/src/lib/components/layout-header-links/layout-header-links.module.ts",
    "/src/lib/components/layout-header/layout-header.component.ts",
    "/src/lib/components/layout-header/layout-header.module.ts",
    "/src/lib/test-web-layout-feature.component.ts",
    "/src/lib/test-web-layout-feature.module.ts",
    "/src/lib/test-web-layout-feature.store.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 91`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-layout-feature.module'
export * from './lib/test-web-layout-feature.component'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component, Input } from '@angular/core'

@Component({
  selector: 'layout-footer',
  template: \`
    <footer class=\\"bg-gray-800 text-gray-500 flex justify-center items-center px-4 py-2\\" *ngIf=\\"html\\">
      <small class=\\"text-muted\\" [innerHTML]=\\"html\\"></small>
    </footer>
  \`,
})
export class LayoutFooterComponent {
  @Input() html?: string
}
",
      "file": "/lib/components/layout-footer/layout-footer.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'
import { LayoutHeaderLinksModule } from '../layout-header-links/layout-header-links.module'

import { LayoutFooterComponent } from './layout-footer.component'

@NgModule({
  declarations: [LayoutFooterComponent],
  imports: [CommonModule, RouterModule, LayoutHeaderLinksModule],
  exports: [LayoutFooterComponent],
})
export class LayoutFooterModule {}
",
      "file": "/lib/components/layout-footer/layout-footer.module.ts",
    },
    Object {
      "content": "import { Component, Input } from '@angular/core'

@Component({
  selector: 'layout-header-links',
  template: \`
    <ul class=\\"flex space-x-3 text-gray-500\\">
      <li *ngFor=\\"let link of links\\">
        <a routerLinkActive=\\"text-gray-100\\" [routerLink]=\\"link.route\\">{{ link.label }}</a>
      </li>
    </ul>
  \`,
})
export class LayoutHeaderLinksComponent {
  @Input() links: { label: string; route: string }[] = []
}
",
      "file": "/lib/components/layout-header-links/layout-header-links.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'

import { LayoutHeaderLinksComponent } from './layout-header-links.component'

@NgModule({
  declarations: [LayoutHeaderLinksComponent],
  imports: [CommonModule, RouterModule],
  exports: [LayoutHeaderLinksComponent],
})
export class LayoutHeaderLinksModule {}
",
      "file": "/lib/components/layout-header-links/layout-header-links.module.ts",
    },
    Object {
      "content": "import { User } from '@proj/test-web/core/data-access'
import { Component, Input } from '@angular/core'

@Component({
  selector: 'layout-header',
  template: \`
    <nav class=\\"dark:bg-gray-900\\">
      <div class=\\"max-w-7xl mx-auto sm:px-6 lg:px-8\\">
        <div class=\\"\\">
          <div class=\\"flex items-center justify-between h-16 px-4 sm:px-0\\">
            <div class=\\"flex items-center\\">
              <div class=\\"flex-shrink-0\\">
                <a routerLink=\\"/\\">
                  <img *ngIf=\\"logo\\" [attr.src]=\\"logo\\" [attr.loading]=\\"'lazy'\\" class=\\"h-8 w-8\\" alt=\\"App Logo\\" />
                </a>
              </div>
              <div class=\\"hidden md:block\\">
                <div class=\\"ml-4 flex items-baseline space-x-4 text-gray-400 \\">
                  <ng-container *ngFor=\\"let link of links\\">
                    <a
                      [routerLink]=\\"link.route\\"
                      [routerLinkActive]=\\"['text-white', 'bg-gray-800']\\"
                      class=\\"px-3 py-2 rounded-md text-sm font-medium hover:text-white hover:bg-gray-700 cursor-pointer\\"
                      >{{ link.label }}</a
                    >
                  </ng-container>
                </div>
              </div>
            </div>
            <div class=\\"hidden md:block\\">
              <div class=\\"ml-4 flex items-center md:ml-6\\">
                <a
                  *ngIf=\\"notificationsLink\\"
                  [routerLink]=\\"notificationsLink\\"
                  class=\\"bg-gray-800 p-1 text-gray-400 rounded-full hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\\"
                >
                  <span class=\\"sr-only\\">View notifications</span>
                  <!-- Heroicon name: bell -->
                  <svg
                    class=\\"h-6 w-6\\"
                    xmlns=\\"http://www.w3.org/2000/svg\\"
                    fill=\\"none\\"
                    viewBox=\\"0 0 24 24\\"
                    stroke=\\"currentColor\\"
                    aria-hidden=\\"true\\"
                  >
                    <path
                      stroke-linecap=\\"round\\"
                      stroke-linejoin=\\"round\\"
                      stroke-width=\\"2\\"
                      d=\\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\\"
                    />
                  </svg>
                </a>

                <!-- Profile dropdown -->
                <div class=\\"ml-3 relative\\">
                  <div>
                    <button
                      (click)=\\"showProfileLinks = !showProfileLinks\\"
                      class=\\"max-w-xs bg-gray-800 rounded-full flex items-center text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\\"
                      id=\\"user-menu\\"
                      aria-haspopup=\\"true\\"
                    >
                      <span class=\\"sr-only\\">Open user menu</span>
                      <img *ngIf=\\"user?.avatarUrl\\" class=\\"h-8 w-8 rounded-full\\" [src]=\\"user?.avatarUrl\\" alt=\\"\\" />
                    </button>
                  </div>
                  <!--
                    Profile dropdown panel, show/hide based on dropdown state.

                    Entering: \\"transition ease-out duration-100\\"
                      From: \\"transform opacity-0 scale-95\\"
                      To: \\"transform opacity-100 scale-100\\"
                    Leaving: \\"transition ease-in duration-75\\"
                      From: \\"transform opacity-100 scale-100\\"
                      To: \\"transform opacity-0 scale-95\\"
                  -->
                  <div
                    class=\\"origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-gray-700 dark:text-gray-300 ring-1 ring-black ring-opacity-5\\"
                    role=\\"menu\\"
                    aria-orientation=\\"vertical\\"
                    aria-labelledby=\\"user-menu\\"
                    [class.block]=\\"showProfileLinks\\"
                    [class.hidden]=\\"!showProfileLinks\\"
                  >
                    <ng-container *ngFor=\\"let link of profileLinks\\">
                      <a
                        [routerLink]=\\"link.route\\"
                        (click)=\\"showProfileLinks = false\\"
                        class=\\"block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\\"
                        role=\\"menuitem\\"
                      >
                        {{ link.label }}
                      </a>
                    </ng-container>
                  </div>
                </div>
              </div>
            </div>
            <div class=\\"-mr-2 flex md:hidden\\">
              <!-- Mobile menu button -->
              <button
                (click)=\\"showMobileMenu = !showMobileMenu\\"
                class=\\"bg-gray-800 inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\\"
              >
                <span class=\\"sr-only\\">Open main menu</span>
                <!--
                  Heroicon name: menu

                  Menu open: \\"hidden\\", Menu closed: \\"block\\"
                -->
                <svg
                  class=\\"h-6 w-6\\"
                  xmlns=\\"http://www.w3.org/2000/svg\\"
                  fill=\\"none\\"
                  viewBox=\\"0 0 24 24\\"
                  stroke=\\"currentColor\\"
                  aria-hidden=\\"true\\"
                  [class]=\\"{ block: !showMobileMenu, hidden: showMobileMenu }\\"
                >
                  <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M4 6h16M4 12h16M4 18h16\\" />
                </svg>
                <!--
                  Heroicon name: x

                  Menu open: \\"block\\", Menu closed: \\"hidden\\"
                -->
                <svg
                  class=\\"h-6 w-6\\"
                  xmlns=\\"http://www.w3.org/2000/svg\\"
                  fill=\\"none\\"
                  viewBox=\\"0 0 24 24\\"
                  stroke=\\"currentColor\\"
                  aria-hidden=\\"true\\"
                  [class]=\\"{ block: showMobileMenu, hidden: !showMobileMenu }\\"
                >
                  <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M6 18L18 6M6 6l12 12\\" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>

      <!--
        Mobile menu, toggle classes based on menu state.

        Open: \\"block\\", closed: \\"hidden\\"
      -->
      <div class=\\"hidden  md:hidden\\" [class.block]=\\"showMobileMenu\\" [class.hidden]=\\"!showMobileMenu\\">
        <div class=\\"px-2 py-3 space-y-1 sm:px-3  text-gray-300\\">
          <ng-container *ngFor=\\"let link of links\\">
            <a
              [routerLink]=\\"link.route\\"
              routerLinkActive=\\" rounded-md text-white bg-gray-900\\"
              (click)=\\"showMobileMenu = false\\"
              class=\\"block px-3 py-2 rounded-md text-base font-medium hover:text-white hover:bg-gray-700\\"
            >
              {{ link.label }}
            </a>
          </ng-container>
        </div>
        <div class=\\"pt-4 pb-3 border-t border-gray-700\\">
          <div class=\\"flex items-center px-5\\">
            <div class=\\"flex-shrink-0\\">
              <img class=\\"h-10 w-10 rounded-full\\" [src]=\\"user?.avatarUrl\\" alt=\\"\\" />
            </div>
            <div class=\\"ml-3\\">
              <div class=\\"text-base font-medium leading-none text-white\\" *ngIf=\\"user?.username\\">
                {{ user?.username }}
              </div>
              <div class=\\"text-sm font-medium leading-none text-gray-400\\" *ngIf=\\"user?.email\\">
                {{ user?.email }}
              </div>
            </div>
            <a
              *ngIf=\\"notificationsLink\\"
              [routerLink]=\\"notificationsLink\\"
              class=\\"ml-auto bg-gray-800 flex-shrink-0 p-1 text-gray-400 rounded-full hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\\"
            >
              <span class=\\"sr-only\\">View notifications</span>
              <!-- Heroicon name: bell -->
              <svg
                class=\\"h-6 w-6\\"
                xmlns=\\"http://www.w3.org/2000/svg\\"
                fill=\\"none\\"
                viewBox=\\"0 0 24 24\\"
                stroke=\\"currentColor\\"
                aria-hidden=\\"true\\"
              >
                <path
                  stroke-linecap=\\"round\\"
                  stroke-linejoin=\\"round\\"
                  stroke-width=\\"2\\"
                  d=\\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\\"
                />
              </svg>
            </a>
          </div>
          <div class=\\"mt-3 px-2 space-y-1\\">
            <ng-container *ngFor=\\"let link of profileLinks\\">
              <a
                [routerLink]=\\"link.route\\"
                (click)=\\"showMobileMenu = false; showProfileLinks = false\\"
                class=\\"block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-gray-700\\"
                role=\\"menuitem\\"
              >
                {{ link.label }}
              </a>
            </ng-container>
          </div>
        </div>
      </div>
    </nav>
  \`,
})
export class LayoutHeaderComponent {
  showProfileLinks = false
  showMobileMenu = false
  @Input() notificationsLink?: string
  @Input() user?: User | null
  @Input() links?: { label: string; route: string }[] = [];
  @Input() profileLinks?: { label: string; route: string }[] = [];
  @Input() logo?: string;
}
",
      "file": "/lib/components/layout-header/layout-header.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'
import { LayoutHeaderLinksModule } from '../layout-header-links/layout-header-links.module'

import { LayoutHeaderComponent } from './layout-header.component'

@NgModule({
  declarations: [LayoutHeaderComponent],
  imports: [CommonModule, RouterModule, LayoutHeaderLinksModule],
  exports: [LayoutHeaderComponent],
})
export class LayoutHeaderModule {}
",
      "file": "/lib/components/layout-header/layout-header.module.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { TestWebLayoutFeatureStore } from './test-web-layout-feature.store'

@Component({
  template: \`
    <ng-container *ngIf=\\"vm$ | async as vm\\">
      <div class=\\"flex flex-col h-full bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-300\\">
        <div>
          <layout-header
            [logo]=\\"vm?.layout?.logo\\"
            [links]=\\"vm?.links?.main\\"
            [user]=\\"vm?.user\\"
            [profileLinks]=\\"vm.links?.profile\\"
          >
          </layout-header>
        </div>
        <main class=\\"flex-1 h-full overflow-auto\\">
          <router-outlet></router-outlet>
        </main>
        <footer class=\\"mt-auto\\">
          <layout-footer [html]=\\"vm?.layout?.footerHtml\\"></layout-footer>
        </footer>
      </div>
    </ng-container>
  \`,
  providers: [TestWebLayoutFeatureStore],
})
export class TestWebLayoutFeatureComponent {
  vm$ = this.layoutStore.vm$

  constructor(private readonly layoutStore: TestWebLayoutFeatureStore) {}
}
",
      "file": "/lib/test-web-layout-feature.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'

import { TestWebLayoutFeatureComponent } from './test-web-layout-feature.component'
import { LayoutFooterModule } from './components/layout-footer/layout-footer.module'
import { LayoutHeaderModule } from './components/layout-header/layout-header.module'

@NgModule({
  declarations: [TestWebLayoutFeatureComponent],
  imports: [CommonModule, RouterModule, LayoutHeaderModule, LayoutFooterModule],
})
export class TestWebLayoutFeatureModule {}
",
      "file": "/lib/test-web-layout-feature.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { TestWebAuthStore } from '@proj/test-web/auth/data-access'
import { Role } from '@proj/test-web/core/data-access'
import { ComponentStore } from '@ngrx/component-store'

export interface TestWebLayoutFeatureLink {
  label: string
  route: string
  role?: Role
}

export interface TestWebLayoutFeatureState {
  theme: 'dark' | 'light'
  logo: string
  footerHtml: string
  links: TestWebLayoutFeatureLink[]
  profileLinks: TestWebLayoutFeatureLink[]
}

@Injectable()
export class TestWebLayoutFeatureStore extends ComponentStore<TestWebLayoutFeatureState> {
  constructor(private readonly authStore: TestWebAuthStore) {
    super({
      theme: 'dark',
      logo: '/assets/images/logo.png',
      footerHtml: \`Copyright &copy; \${new Date().getFullYear()}\`,
      links: [
        { label: 'Dashboard', route: '/dashboard' },
        { label: 'Admin', route: '/admin', role: Role.Admin },
      ],
      profileLinks: [
        { label: 'Dashboard', route: '/dashboard' },
        { label: 'Your Account', route: '/account' },
        { label: 'Admin', route: '/admin', role: Role.Admin },
        { label: 'About', route: '/about' },
        { label: 'Logout', route: '/logout' },
      ],
    })
  }

  readonly user$ = this.authStore.user$
  readonly links$ = this.select(this.authStore.user$, this.state$, (user, state) => ({
    main: state.links.filter((l) => (l.role ? l.role === user?.role : l)),
    profile: state.profileLinks.filter((l) => (l.role ? l.role === user?.role : l)),
  }))

  readonly layout$ = this.select(({ logo, footerHtml, theme }) => ({ logo, footerHtml, theme }))
  readonly vm$ = this.select(this.user$, this.links$, this.layout$, (user, links, layout) => ({
    user,
    links,
    layout,
  }))
}
",
      "file": "/lib/test-web-layout-feature.store.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/layout/feature/src",
}
`;

exports[`init generator should run successfully with default options 92`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/shell/feature",
  "sourceRoot": "libs/test-web/shell/feature/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/shell/feature/src/**/*.ts",
          "libs/test-web/shell/feature/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/shell/feature/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/shell/feature",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 93`] = `
Object {
  "root": "libs/test-web/shell/feature",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/not-found/not-found.component.spec.ts",
    "/src/lib/not-found/not-found.component.ts",
    "/src/lib/not-found/not-found.module.ts",
    "/src/lib/test-web-shell-feature.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 94`] = `
Object {
  "content": Array [
    Object {
      "content": "
        export * from './lib/test-web-shell-feature.module';
        ",
      "file": "/index.ts",
    },
    Object {
      "content": "import { ComponentFixture, TestBed } from '@angular/core/testing'

import { NotFoundComponent } from './not-found.component'

describe('NotFoundComponent', () => {
  let component: NotFoundComponent
  let fixture: ComponentFixture<NotFoundComponent>

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [NotFoundComponent],
    }).compileComponents()
  })

  beforeEach(() => {
    fixture = TestBed.createComponent(NotFoundComponent)
    component = fixture.componentInstance
    fixture.detectChanges()
  })

  it('should create', () => {
    expect(component).toBeTruthy()
  })
})
",
      "file": "/lib/not-found/not-found.component.spec.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'

@Component({
  template: \`
    <div class=\\"d-flex flex-column justify-content-center h-100 align-items-center\\">
      <h3>This page could not be found :(</h3>
    </div>
  \`,
})
export class NotFoundComponent {}
",
      "file": "/lib/not-found/not-found.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'
import { NotFoundComponent } from './not-found.component'

@NgModule({
  declarations: [NotFoundComponent],
  imports: [CommonModule, RouterModule.forChild([{ path: '', component: NotFoundComponent }])],
})
export class NotFoundModule {}
",
      "file": "/lib/not-found/not-found.module.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule, Routes } from '@angular/router'
import { IsAdminGuard, IsLoggedInGuard, TestWebAuthDataAccessModule } from '@proj/test-web/auth/data-access'
import { TestWebCoreFeatureModule } from '@proj/test-web/core/feature'
import { TestWebLayoutFeatureComponent, TestWebLayoutFeatureModule } from '@proj/test-web/layout/feature'

const routes: Routes = [
  {
    path: '',
    component: TestWebLayoutFeatureComponent,
    canActivate: [IsLoggedInGuard],
    children: [
      // Application routes here
      { path: '', pathMatch: 'full', redirectTo: 'dashboard' },
      {
        path: 'about',
        loadChildren: () => import('@proj/test-web/about/feature').then((m) => m.TestWebAboutFeatureModule),
      },
      {
        path: 'account',
        loadChildren: () => import('@proj/test-web/account/feature').then((m) => m.TestWebAccountFeatureModule),
      },
      {
        path: 'admin',
        canActivate: [IsAdminGuard],
        loadChildren: () => import('@proj/test-web/admin/feature').then((m) => m.TestWebAdminFeatureModule),
      },
      {
        path: 'dashboard',
        loadChildren: () => import('@proj/test-web/dashboard/feature').then((m) => m.TestWebDashboardFeatureModule),
      },
      { path: 'not-found', loadChildren: () => import('./not-found/not-found.module').then((m) => m.NotFoundModule) },
    ],
  },
  {
    path: '',
    loadChildren: () => import('@proj/test-web/auth/feature').then((m) => m.TestWebAuthFeatureModule),
  },
  { path: '**', redirectTo: '/not-found' },
]

@NgModule({
  exports: [RouterModule],
  imports: [
    CommonModule,
    RouterModule.forRoot(routes, { paramsInheritanceStrategy: 'always' }),
    TestWebAuthDataAccessModule,
    TestWebCoreFeatureModule,
    TestWebLayoutFeatureModule,
  ],
})
export class TestWebShellFeatureModule {}
",
      "file": "/lib/test-web-shell-feature.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/shell/feature/src",
}
`;

exports[`init generator should run successfully with default options 95`] = `
Object {
  "prefix": "proj",
  "projectType": "library",
  "root": "libs/test-web/style",
  "sourceRoot": "libs/test-web/style/src",
  "tags": Array [],
  "targets": Object {},
}
`;

exports[`init generator should run successfully with default options 96`] = `
Object {
  "root": "libs/test-web/style",
  "tree": Array [
    "/.eslintrc.json",
    "/src/index.css",
  ],
}
`;

exports[`init generator should run successfully with default options 97`] = `
Object {
  "content": Array [
    Object {
      "content": "@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

html, body {
  height: 100vh;
}
",
      "file": "/index.css",
    },
  ],
  "root": "libs/test-web/style/src",
}
`;

exports[`init generator should run successfully with default options 98`] = `
Object {
  "prefix": "ui",
  "projectType": "library",
  "root": "libs/test-web/ui/button",
  "sourceRoot": "libs/test-web/ui/button/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/ui/button/src/**/*.ts",
          "libs/test-web/ui/button/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/ui/button/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/ui/button",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 99`] = `
Object {
  "root": "libs/test-web/ui/button",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-ui-button.component.ts",
    "/src/lib/test-web-ui-button.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 100`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-ui-button.module'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component, EventEmitter, Input, Output } from '@angular/core'

@Component({
  selector: 'ui-button',
  template: \`
    <ng-container *ngIf=\\"link\\">
      <a [routerLink]=\\"link\\" [class]=\\"classes\\">
        {{ label }}
      </a>
    </ng-container>
    <ng-container *ngIf=\\"!link\\">
      <button (click)=\\"handler.emit($event)\\" [class]=\\"classes\\" [disabled]=\\"disabled\\" [type]=\\"type\\">
        {{ label }}
      </button>
    </ng-container>
  \`,
})
export class TestWebUiButtonComponent {
  @Input() link?: string | undefined;
  @Input() disabled?: boolean | undefined;
  @Input() label?: string | undefined;
  @Input() type = 'button'
  @Output() handler = new EventEmitter()

  get classes(): string {
    return 'inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-indigo-300 bg-indigo-900 border-indigo-600 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-indigo-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'
  }
}
",
      "file": "/lib/test-web-ui-button.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiButtonComponent } from './test-web-ui-button.component'

@NgModule({
  declarations: [TestWebUiButtonComponent],
  exports: [TestWebUiButtonComponent],
  imports: [CommonModule, RouterModule],
})
export class TestWebUiButtonModule {}
",
      "file": "/lib/test-web-ui-button.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/ui/button/src",
}
`;

exports[`init generator should run successfully with default options 101`] = `
Object {
  "prefix": "ui",
  "projectType": "library",
  "root": "libs/test-web/ui/form",
  "sourceRoot": "libs/test-web/ui/form/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/ui/form/src/**/*.ts",
          "libs/test-web/ui/form/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/ui/form/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/ui/form",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 102`] = `
Object {
  "root": "libs/test-web/ui/form",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-ui-form.component.ts",
    "/src/lib/test-web-ui-form.field.ts",
    "/src/lib/test-web-ui-form.module.ts",
    "/src/lib/types/checkbox/ui-form-checkbox.component.ts",
    "/src/lib/types/checkbox/ui-form-checkbox.module.ts",
    "/src/lib/types/input/ui-form-input.component.ts",
    "/src/lib/types/input/ui-form-input.module.ts",
    "/src/lib/types/multicheckbox/ui-form-multicheckbox.component.ts",
    "/src/lib/types/multicheckbox/ui-form-multicheckbox.module.ts",
    "/src/lib/types/radio/ui-form-radio.component.ts",
    "/src/lib/types/radio/ui-form-radio.module.ts",
    "/src/lib/types/select/ui-form-select.component.ts",
    "/src/lib/types/select/ui-form-select.module.ts",
    "/src/lib/types/textarea/ui-form-textarea.component.ts",
    "/src/lib/types/textarea/ui-form-textarea.module.ts",
    "/src/lib/validators/index.ts",
    "/src/lib/validators/ui-form-validators.module.ts",
    "/src/lib/wrappers/addons/ui-form-addons.component.css",
    "/src/lib/wrappers/addons/ui-form-addons.component.html",
    "/src/lib/wrappers/addons/ui-form-addons.component.ts",
    "/src/lib/wrappers/addons/ui-form-addons.extension.ts",
    "/src/lib/wrappers/addons/ui-form-addons.module.ts",
    "/src/lib/wrappers/form-field/index.ts",
    "/src/lib/wrappers/form-field/ui-form-field.component.ts",
    "/src/lib/wrappers/form-field/ui-form-field.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 103`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-ui-form.module'
export * from './lib/test-web-ui-form.field'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core'
import { FormGroup } from '@angular/forms'
import { FormlyFieldConfig, FormlyFormBuilder, FormlyFormOptions } from '@ngx-formly/core'

@Component({
  selector: 'ui-form',
  template: \`
    <form [formGroup]=\\"form\\" novalidate (ngSubmit)=\\"submitForm.emit(model)\\">
      <div>
        <formly-form [fields]=\\"fields\\" [form]=\\"form\\" [model]=\\"model\\" [options]=\\"options\\"></formly-form>
        <button type=\\"submit\\" style=\\"display: none;\\" [disabled]=\\"form.touched && !form.valid\\">submit</button>
      </div>
      <ng-content></ng-content>
    </form>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class TestWebUiFormComponent implements OnInit {
  @Input() fields: FormlyFieldConfig[] = []
  @Input() form = new FormGroup({})
  @Input() model?: any = {}
  @Input() options: FormlyFormOptions = {}
  @Output() submitForm = new EventEmitter()

  constructor(private builder: FormlyFormBuilder) {}

  ngOnInit(): void {
    this.builder.buildForm(this.form, this.fields, this.model, this.options)
  }

  submit() {
    this.submitForm.emit(this.model)
  }
}
",
      "file": "/lib/test-web-ui-form.component.ts",
    },
    Object {
      "content": "import { FormlyFieldConfig, FormlyTemplateOptions } from '@ngx-formly/core'

export class TestWebUiFormField implements FormlyFieldConfig {
  static checkbox(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.field(key, 'checkbox', templateOptions, options)
  }

  static date(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.input(key, { ...templateOptions, type: 'date' }, { ...options })
  }

  static datetime(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.input(key, { ...templateOptions, type: 'datetime-local' }, { ...options })
  }

  static email(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    const defaults = {
      type: 'email',
      label: 'Email',
    }
    const defaultOptions = { validators: { validation: ['email'] } }

    return this.input(key, { ...defaults, ...templateOptions }, { ...defaultOptions, ...options })
  }

  static fieldRow(
    fieldGroup: FormlyFieldConfig[] = [],
    fieldGroupClassName: string = 'flex',
    options?: any,
  ): FormlyFieldConfig {
    return {
      fieldGroup,
      fieldGroupClassName,
      ...options,
    }
  }

  static field(
    key: string,
    type?: string,
    templateOptions: FormlyTemplateOptions = {},
    config: FormlyFieldConfig = {},
  ): FormlyFieldConfig {
    return {
      key,
      type,
      templateOptions: {
        ...templateOptions,
      },
      ...config,
    }
  }

  static input(
    key: string,
    templateOptions: FormlyTemplateOptions = {},
    config: FormlyFieldConfig = {},
  ): FormlyFieldConfig {
    return this.field(key, 'input', templateOptions, config)
  }

  static multicheckbox(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.field(key, 'multicheckbox', templateOptions, options)
  }

  static number(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.input(key, { ...templateOptions, type: 'number' }, { ...options })
  }

  static password(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    const defaults = {
      label: 'Password',
      type: 'password',
      minLength: 8,
      required: true,
    }

    return this.input(key, { ...defaults, ...templateOptions }, options)
  }

  static radio(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.field(key, 'radio', templateOptions, options)
  }

  static select(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.field(key, 'select', templateOptions, options)
  }
  static textarea(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    const defaultTemplateOptions = { rows: 5 }

    return this.field(key, 'textarea', { ...defaultTemplateOptions, ...templateOptions }, options)
  }

  static template(template: string): FormlyFieldConfig {
    return { type: 'formly-template', template }
  }

  static time(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {
    return this.input(key, { ...templateOptions, type: 'time' }, { ...options })
  }
}
",
      "file": "/lib/test-web-ui-form.field.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { ReactiveFormsModule } from '@angular/forms'
import { FormlyModule } from '@ngx-formly/core'

// Types
import { UiFormCheckboxModule } from './types/checkbox/ui-form-checkbox.module'
import { UiFormInputModule } from './types/input/ui-form-input.module'
import { UiFormMulticheckboxModule } from './types/multicheckbox/ui-form-multicheckbox.module'
import { UiFormRadioModule } from './types/radio/ui-form-radio.module'
import { UiFormSelectModule } from './types/select/ui-form-select.module'
import { UiFormTextareaModule } from './types/textarea/ui-form-textarea.module'

import { TestWebUiFormComponent } from './test-web-ui-form.component'

// Validators
import { UiFormValidatorsModule } from './validators/ui-form-validators.module'

// Wrappers
import { UiFormAddonsModule } from './wrappers/addons/ui-form-addons.module'
import { UiFormFieldModule } from './wrappers/form-field/ui-form-field.module'

@NgModule({
  declarations: [TestWebUiFormComponent],
  exports: [TestWebUiFormComponent],
  imports: [
    ReactiveFormsModule,
    FormlyModule.forRoot(),
    // Types
    UiFormCheckboxModule,
    UiFormInputModule,
    UiFormMulticheckboxModule,
    UiFormRadioModule,
    UiFormSelectModule,
    UiFormTextareaModule,
    // Validators
    UiFormValidatorsModule,
    // Wrappers
    UiFormAddonsModule,
    UiFormFieldModule,
  ],
})
export class TestWebUiFormModule {}
",
      "file": "/lib/test-web-ui-form.module.ts",
    },
    Object {
      "content": "import { Component, ChangeDetectionStrategy } from '@angular/core'
import { FormControl } from '@angular/forms'
import { FieldType } from '@ngx-formly/core'

@Component({
  template: \`
    <div class=\\"relative flex items-start\\">
      <div class=\\"flex items-center h-5\\">
        <input
          type=\\"checkbox\\"
          class=\\"focus:ring-pink-500 h-4 w-4 text-pink-600 border-gray-300 dark:bg-gray-800 dark:border-gray-600 rounded\\"
          [class.is-invalid]=\\"showError\\"
          [class.static]=\\"to.formCheck === 'nolabel'\\"
          [indeterminate]=\\"to.indeterminate && formControl.value == null\\"
          [formControl]=\\"formControl\\"
          [formlyAttributes]=\\"field\\"
        />
      </div>
      <div class=\\"ml-3 text-sm\\">
        <label *ngIf=\\"to.formCheck !== 'nolabel'\\" class=\\"font-medium text-gray-700 dark:text-gray-300\\" [for]=\\"id\\">
          {{ to.label }}
          <span *ngIf=\\"to.required && to.hideRequiredMarker !== true\\">*</span>
        </label>
      </div>
    </div>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class UiFormCheckboxComponent extends FieldType {
  formControl!: FormControl
  defaultOptions = {
    templateOptions: {
      indeterminate: true,
      hideLabel: true,
      formCheck: 'custom', // 'custom' | 'custom-inline' | 'custom-switch' | 'stacked' | 'inline' | 'nolabel'
    },
  }
}
",
      "file": "/lib/types/checkbox/ui-form-checkbox.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { FormlyModule } from '@ngx-formly/core'
import { ReactiveFormsModule } from '@angular/forms'
import { UiFormFieldModule } from '../../wrappers/form-field/ui-form-field.module'

import { UiFormCheckboxComponent } from './ui-form-checkbox.component'

@NgModule({
  declarations: [UiFormCheckboxComponent],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    UiFormFieldModule,
    FormlyModule.forChild({
      types: [
        {
          name: 'checkbox',
          component: UiFormCheckboxComponent,
          wrappers: ['form-field'],
        },
        {
          name: 'boolean',
          extends: 'checkbox',
        },
      ],
    }),
  ],
})
export class UiFormCheckboxModule {}
",
      "file": "/lib/types/checkbox/ui-form-checkbox.module.ts",
    },
    Object {
      "content": "import { Component } from '@angular/core'
import { FormControl } from '@angular/forms'
import { FieldType } from '@ngx-formly/core'

@Component({
  template: \`
    <input
      *ngIf=\\"type !== 'number'; else numberTmp\\"
      [class]=\\"classes\\"
      [ngClass]=\\"classNames\\"
      [type]=\\"type\\"
      [formControl]=\\"formControl\\"
      [formlyAttributes]=\\"field\\"
      [class.is-invalid]=\\"showError\\"
    />
    <ng-template #numberTmp>
      <input
        [class]=\\"classes\\"
        [ngClass]=\\"classNames\\"
        type=\\"number\\"
        [formControl]=\\"formControl\\"
        [formlyAttributes]=\\"field\\"
        [class.is-invalid]=\\"showError\\"
      />
    </ng-template>
  \`,
})
export class UiFormInputComponent extends FieldType {
  formControl!: FormControl

  get type(): string {
    return this.to.type || 'text'
  }

  get classNames(): string {
    return this.showError
      ? 'border-red-300 text-red-900 placeholder-red-400 focus:outline-none focus:ring-red-500 focus:border-red-500'
      : ''
  }

  get classes(): string {
    return 'shadow-sm dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:ring-pink-500 focus:border-pink-500 border-gray-300 rounded-md block w-full sm:text-sm'
  }
}
",
      "file": "/lib/types/input/ui-form-input.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { ReactiveFormsModule } from '@angular/forms'
import { FormlyModule } from '@ngx-formly/core'
import { UiFormFieldModule } from '../../wrappers/form-field/ui-form-field.module'
import { UiFormInputComponent } from './ui-form-input.component'

@NgModule({
  declarations: [UiFormInputComponent],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    UiFormFieldModule,
    FormlyModule.forChild({
      types: [
        {
          name: 'input',
          component: UiFormInputComponent,
          wrappers: ['form-field'],
        },
        { name: 'string', extends: 'input' },
        {
          name: 'password',
          extends: 'input',
          defaultOptions: {
            templateOptions: { type: 'password' },
          },
        },
        {
          name: 'number',
          extends: 'input',
          defaultOptions: {
            templateOptions: {
              type: 'number',
            },
          },
        },
        {
          name: 'integer',
          extends: 'input',
          defaultOptions: {
            templateOptions: {
              type: 'number',
            },
          },
        },
      ],
    }),
  ],
})
export class UiFormInputModule {}
",
      "file": "/lib/types/input/ui-form-input.module.ts",
    },
    Object {
      "content": "import { ChangeDetectionStrategy, Component } from '@angular/core'
import { FormControl } from '@angular/forms'
import { FieldType } from '@ngx-formly/core'

@Component({
  template: \`
    <div class=\\"mt-4 sm:mt-0 sm:col-span-2\\">
      <div class=\\"max-w-lg space-y-4\\">
        <ng-container *ngFor=\\"let option of to.options | formlySelectOptions: field | async; let i = index\\">
          <div class=\\"relative flex items-start\\">
            <div class=\\"flex items-center h-5\\">
              <input
                type=\\"checkbox\\"
                class=\\"focus:ring-pink-500 h-4 w-4 text-pink-600 border-gray-300 dark:bg-gray-800 dark:border-gray-600 rounded\\"
                [id]=\\"id + '_' + i\\"
                [value]=\\"option.value\\"
                [checked]=\\"isChecked(option)\\"
                [formlyAttributes]=\\"field\\"
                (change)=\\"onChange(option.value, $event.target)\\"
              />
            </div>
            <div class=\\"ml-3 text-sm\\">
              <label class=\\"font-medium text-gray-700 dark:text-gray-300\\" [for]=\\"id + '_' + i\\">
                {{ option.label }}
              </label>
            </div>
          </div>
        </ng-container>
      </div>
    </div>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class UiFormMulticheckboxComponent extends FieldType {
  formControl!: FormControl
  defaultOptions = {
    templateOptions: {
      options: [],
    },
  }

  onChange(value: any, target: any): void {
    if (this.to.type === 'array') {
      this.formControl.patchValue(
        target.checked
          ? [...(this.formControl.value || []), value]
          : [...(this.formControl.value || [])].filter((o) => o !== value),
      )
    } else {
      this.formControl.patchValue({ ...this.formControl.value, [value]: target.checked })
    }
    this.formControl.markAsTouched()
  }

  isChecked(option: any): boolean {
    const value = this.formControl.value

    return value && (this.to.type === 'array' ? value.indexOf(option.value) !== -1 : value[option.value])
  }
}
",
      "file": "/lib/types/multicheckbox/ui-form-multicheckbox.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { ReactiveFormsModule } from '@angular/forms'
import { FormlyModule } from '@ngx-formly/core'
import { FormlySelectModule } from '@ngx-formly/core/select'
import { UiFormFieldModule } from '../../wrappers/form-field/ui-form-field.module'

import { UiFormMulticheckboxComponent } from './ui-form-multicheckbox.component'

@NgModule({
  declarations: [UiFormMulticheckboxComponent],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    UiFormFieldModule,
    FormlySelectModule,
    FormlyModule.forChild({
      types: [
        {
          name: 'multicheckbox',
          component: UiFormMulticheckboxComponent,
          wrappers: ['form-field'],
        },
      ],
    }),
  ],
})
export class UiFormMulticheckboxModule {}
",
      "file": "/lib/types/multicheckbox/ui-form-multicheckbox.module.ts",
    },
    Object {
      "content": "import { ChangeDetectionStrategy, Component } from '@angular/core'
import { FormControl } from '@angular/forms'
import { FieldType } from '@ngx-formly/core'

@Component({
  template: \`
    <div class=\\"mt-4 space-y-4\\">
      <ng-container *ngFor=\\"let option of to.options | formlySelectOptions: field | async; let i = index\\">
        <div class=\\"flex items-center\\">
          <input
            type=\\"radio\\"
            class=\\"focus:ring-pink-500 h-4 w-4 text-pink-600 border-gray-300  dark:bg-gray-800 dark:border-gray-600\\"
            [id]=\\"id + '_' + i\\"
            [name]=\\"field.name || id\\"
            [class.is-invalid]=\\"showError\\"
            [attr.value]=\\"option.value\\"
            [value]=\\"option.value\\"
            [formControl]=\\"formControl\\"
            [formlyAttributes]=\\"field\\"
            [attr.disabled]=\\"option.disabled || formControl.disabled ? true : null\\"
          />
          <label class=\\"ml-3 block text-sm font-medium text-gray-700 dark:text-gray-300\\" [for]=\\"id + '_' + i\\">
            {{ option.label }}
          </label>
        </div>
      </ng-container>
    </div>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class UiFormRadioComponent extends FieldType {
  formControl!: FormControl
  defaultOptions = {
    templateOptions: {
      options: [],
    },
  }
}
",
      "file": "/lib/types/radio/ui-form-radio.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { FormlyModule } from '@ngx-formly/core'
import { ReactiveFormsModule } from '@angular/forms'
import { FormlySelectModule } from '@ngx-formly/core/select'
import { UiFormFieldModule } from '../../wrappers/form-field/ui-form-field.module'

import { UiFormRadioComponent } from './ui-form-radio.component'

@NgModule({
  declarations: [UiFormRadioComponent],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    UiFormFieldModule,
    FormlySelectModule,
    FormlyModule.forChild({
      types: [
        {
          name: 'radio',
          component: UiFormRadioComponent,
          wrappers: ['form-field'],
        },
      ],
    }),
  ],
})
export class UiFormRadioModule {}
",
      "file": "/lib/types/radio/ui-form-radio.module.ts",
    },
    Object {
      "content": "import { Component, ChangeDetectionStrategy, ViewChild, NgZone } from '@angular/core'
import { FormControl, SelectControlValueAccessor } from '@angular/forms'
import { FieldType } from '@ngx-formly/core'
import { take } from 'rxjs/operators'

@Component({
  template: \`
    <select
      *ngIf=\\"to.multiple; else singleSelect\\"
      [class]=\\"classNames\\"
      multiple
      [class.custom-select]=\\"to.customSelect\\"
      [formControl]=\\"formControl\\"
      [compareWith]=\\"to.compareWith\\"
      [class.is-invalid]=\\"showError\\"
      [formlyAttributes]=\\"field\\"
    >
      <ng-container *ngIf=\\"to.options | formlySelectOptions: field | async as opts\\">
        <ng-container *ngIf=\\"to._flatOptions; else grouplist\\">
          <ng-container *ngFor=\\"let opt of opts\\">
            <option [ngValue]=\\"opt.value\\" [disabled]=\\"opt.disabled\\">{{ opt.label }}</option>
          </ng-container>
        </ng-container>

        <ng-template #grouplist>
          <ng-container *ngFor=\\"let opt of opts\\">
            <option *ngIf=\\"!opt.group; else optgroup\\" [ngValue]=\\"opt.value\\" [disabled]=\\"opt.disabled\\">
              {{ opt.label }}
            </option>
            <ng-template #optgroup>
              <optgroup [label]=\\"opt.label\\">
                <option *ngFor=\\"let child of opt.group\\" [ngValue]=\\"child.value\\" [disabled]=\\"child.disabled\\">
                  {{ child.label }}
                </option>
              </optgroup>
            </ng-template>
          </ng-container>
        </ng-template>
      </ng-container>
    </select>

    <ng-template #singleSelect>
      <select
        class=\\"pr-10\\"
        [class]=\\"classNames\\"
        [formControl]=\\"formControl\\"
        [compareWith]=\\"to.compareWith\\"
        [class.custom-select]=\\"to.customSelect\\"
        [class.is-invalid]=\\"showError\\"
        [formlyAttributes]=\\"field\\"
      >
        <option *ngIf=\\"to.placeholder\\" [ngValue]=\\"undefined\\">{{ to.placeholder }}</option>
        <ng-container *ngIf=\\"to.options | formlySelectOptions: field | async as opts\\">
          <ng-container *ngIf=\\"to._flatOptions; else grouplist\\">
            <ng-container *ngFor=\\"let opt of opts\\">
              <option [ngValue]=\\"opt.value\\" [disabled]=\\"opt.disabled\\">{{ opt.label }}</option>
            </ng-container>
          </ng-container>

          <ng-template #grouplist>
            <ng-container *ngFor=\\"let opt of opts\\">
              <option *ngIf=\\"!opt.group; else optgroup\\" [ngValue]=\\"opt.value\\" [disabled]=\\"opt.disabled\\">
                {{ opt.label }}
              </option>
              <ng-template #optgroup>
                <optgroup [label]=\\"opt.label\\">
                  <option *ngFor=\\"let child of opt.group\\" [ngValue]=\\"child.value\\" [disabled]=\\"child.disabled\\">
                    {{ child.label }}
                  </option>
                </optgroup>
              </ng-template>
            </ng-container>
          </ng-template>
        </ng-container>
      </select>
    </ng-template>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class UiFormSelectComponent extends FieldType {
  formControl!: FormControl
  defaultOptions = {
    templateOptions: {
      options: [],
      compareWith(o1: any, o2: any): any {
        return o1 === o2
      },
    },
  }

  // workaround for https://github.com/angular/angular/issues/10010
  @ViewChild(SelectControlValueAccessor) set selectAccessor(s: any) {
    if (!s) {
      return
    }

    const writeValue = s.writeValue.bind(s)
    if (s._getOptionId(s.value) === null) {
      writeValue(s.value)
    }

    s.writeValue = (value: any) => {
      const id = s._idCounter
      writeValue(value)
      if (value === null) {
        this.ngZone.onStable
          .asObservable()
          .pipe(take(1))
          .subscribe(() => {
            if (
              id !== s._idCounter &&
              s._getOptionId(value) === null &&
              s._elementRef.nativeElement.selectedIndex !== -1
            ) {
              writeValue(value)
            }
          })
      }
    }
  }

  get classNames(): string {
    return 'mt-1 block w-full pl-3 py-2 text-base dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 border-gray-300 focus:outline-none focus:ring-pink-500 focus:border-pink-500 sm:text-sm rounded-md'
  }

  constructor(private ngZone: NgZone) {
    super()
  }
}
",
      "file": "/lib/types/select/ui-form-select.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { ReactiveFormsModule } from '@angular/forms'
import { FormlyModule } from '@ngx-formly/core'
import { FormlySelectModule } from '@ngx-formly/core/select'
import { UiFormFieldModule } from '../../wrappers/form-field/ui-form-field.module'

import { UiFormSelectComponent } from './ui-form-select.component'

@NgModule({
  declarations: [UiFormSelectComponent],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    UiFormFieldModule,
    FormlySelectModule,
    FormlyModule.forChild({
      types: [
        {
          name: 'select',
          component: UiFormSelectComponent,
          wrappers: ['form-field'],
        },
        { name: 'enum', extends: 'select' },
      ],
    }),
  ],
})
export class UiFormSelectModule {}
",
      "file": "/lib/types/select/ui-form-select.module.ts",
    },
    Object {
      "content": "import { ChangeDetectionStrategy, Component } from '@angular/core'
import { FormControl } from '@angular/forms'
import { FieldType } from '@ngx-formly/core'

@Component({
  template: \`
    <textarea
      [formControl]=\\"formControl\\"
      [cols]=\\"to.cols\\"
      [rows]=\\"to.rows\\"
      class=\\"shadow-sm block w-full dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:ring-pink-500 focus:border-pink-500 sm:text-sm border-gray-300 rounded-md\\"
      [class.is-invalid]=\\"showError\\"
      [formlyAttributes]=\\"field\\"
    >
    </textarea>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class UiFormTextareaComponent extends FieldType {
  formControl!: FormControl
  defaultOptions = {
    templateOptions: {
      cols: 1,
      rows: 1,
    },
  }
}
",
      "file": "/lib/types/textarea/ui-form-textarea.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { ReactiveFormsModule } from '@angular/forms'
import { FormlyModule } from '@ngx-formly/core'
import { UiFormFieldModule } from '../../wrappers/form-field/ui-form-field.module'

import { UiFormTextareaComponent } from './ui-form-textarea.component'

@NgModule({
  declarations: [UiFormTextareaComponent],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    UiFormFieldModule,
    FormlyModule.forChild({
      types: [
        {
          name: 'textarea',
          component: UiFormTextareaComponent,
          wrappers: ['form-field'],
        },
      ],
    }),
  ],
})
export class UiFormTextareaModule {}
",
      "file": "/lib/types/textarea/ui-form-textarea.module.ts",
    },
    Object {
      "content": "import { AbstractControl, ValidationErrors, Validators } from '@angular/forms'
import { FormlyFieldConfig } from '@ngx-formly/core'

export function minlengthValidationMessage(err: any, field: FormlyFieldConfig): string {
  return \`Should have at least \${field.templateOptions?.minLength} characters\`
}

export function maxlengthValidationMessage(err: any, field: FormlyFieldConfig): string {
  return \`This value should be less than \${field.templateOptions?.maxLength} characters\`
}

export function minValidationMessage(err: any, field: FormlyFieldConfig): string {
  return \`This value should be more than \${field.templateOptions?.min}\`
}

export function maxValidationMessage(err: any, field: FormlyFieldConfig): string {
  return \`This value should be less than \${field.templateOptions?.max}\`
}

export function emailValidatorMessage(err: any, field: FormlyFieldConfig): string {
  return \`\\"\${field.formControl?.value}\\" is not a valid email address\`
}

export function emailValidator(control: AbstractControl): ValidationErrors {
  return Validators.email(control) as ValidationErrors
}
",
      "file": "/lib/validators/index.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { ReactiveFormsModule } from '@angular/forms'
import { FormlyModule } from '@ngx-formly/core'

import {
  emailValidator,
  emailValidatorMessage,
  maxlengthValidationMessage,
  maxValidationMessage,
  minlengthValidationMessage,
  minValidationMessage,
} from './index'

@NgModule({
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormlyModule.forChild({
      validationMessages: [
        { name: 'required', message: 'This field is required' },
        { name: 'minlength', message: minlengthValidationMessage },
        { name: 'maxlength', message: maxlengthValidationMessage },
        { name: 'min', message: minValidationMessage },
        { name: 'max', message: maxValidationMessage },
        { name: 'email', message: emailValidatorMessage },
      ],
      validators: [{ name: 'email', validation: emailValidator }],
    }),
  ],
})
export class UiFormValidatorsModule {}
",
      "file": "/lib/validators/ui-form-validators.module.ts",
    },
    Object {
      "content": ":host ::ng-deep .input-group > {
  :not(:first-child) .form-control {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
  :not(:last-child) .form-control {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
  .input-addons {
    position: relative;
    flex: 1 1 auto;
    width: 1%;
    margin-bottom: 0;
  }
}
",
      "file": "/lib/wrappers/addons/ui-form-addons.component.css",
    },
    Object {
      "content": "<div
  class=\\"absolute z-10 inset-y-0 left-0 pl-3 flex items-center justify-center\\"
  *ngIf=\\"to.addonLeft\\"
  [ngStyle]=\\"{ cursor: to.addonLeft.onClick ? 'pointer' : 'inherit' }\\"
  (click)=\\"addonLeftClick($event)\\"
>
  <i class=\\"text-gray-400\\" [ngClass]=\\"to.addonLeft.class\\" *ngIf=\\"to.addonLeft.class\\"></i>
  <span *ngIf=\\"to.addonLeft.text\\" class=\\"text-gray-400\\">{{ to.addonLeft.text }}</span>
</div>

<ng-container #fieldComponent></ng-container>

<div
  class=\\"absolute inset-y-0 right-0 pr-3 flex items-center justify-center\\"
  *ngIf=\\"to.addonRight\\"
  [ngStyle]=\\"{ cursor: to.addonRight.onClick ? 'pointer' : 'inherit' }\\"
  (click)=\\"addonRightClick($event)\\"
>
  <i class=\\"text-gray-400\\" [ngClass]=\\"to.addonRight.class\\" *ngIf=\\"to.addonRight.class\\"></i>
  <span *ngIf=\\"to.addonRight.text\\" class=\\"text-gray-400\\">{{ to.addonRight.text }}</span>
</div>
",
      "file": "/lib/wrappers/addons/ui-form-addons.component.html",
    },
    Object {
      "content": "import { Component, ChangeDetectionStrategy } from '@angular/core'
import { FieldWrapper } from '@ngx-formly/core'

@Component({
  templateUrl: './ui-form-addons.component.html',
  styleUrls: ['./ui-form-addons.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class UiFormAddonsComponent extends FieldWrapper {
  addonRightClick($event: any): void {
    if (this.to.addonRight.onClick) {
      this.to.addonRight.onClick(this.to, this, $event)
    }
  }

  addonLeftClick($event: any): void {
    if (this.to.addonLeft.onClick) {
      this.to.addonLeft.onClick(this.to, this, $event)
    }
  }
}
",
      "file": "/lib/wrappers/addons/ui-form-addons.component.ts",
    },
    Object {
      "content": "import { FormlyFieldConfig } from '@ngx-formly/core'

export function addonsExtension(field: FormlyFieldConfig): any {
  if (!field.templateOptions || (field.wrappers && field.wrappers.indexOf('addons') !== -1)) {
    return
  }

  if (field.templateOptions.addonLeft || field.templateOptions.addonRight) {
    field.wrappers = [...(field.wrappers || []), 'addons']
    field.templateOptions.attributes = {
      ...(field.templateOptions?.attributes || {}),
      style: 'padding-left: 2.5rem;',
    }
  }
}
",
      "file": "/lib/wrappers/addons/ui-form-addons.extension.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { FormlyModule } from '@ngx-formly/core'
import { ReactiveFormsModule } from '@angular/forms'

import { UiFormAddonsComponent } from './ui-form-addons.component'
import { addonsExtension } from './ui-form-addons.extension'

@NgModule({
  declarations: [UiFormAddonsComponent],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormlyModule.forChild({
      wrappers: [{ name: 'addons', component: UiFormAddonsComponent }],
      extensions: [{ name: 'addons', extension: { postPopulate: addonsExtension } }],
    }),
  ],
})
export class UiFormAddonsModule {}
",
      "file": "/lib/wrappers/addons/ui-form-addons.module.ts",
    },
    Object {
      "content": "export { FormlyPlainFormFieldModule } from './ui-form-field.module'
",
      "file": "/lib/wrappers/form-field/index.ts",
    },
    Object {
      "content": "import { ChangeDetectionStrategy, Component } from '@angular/core'
import { FieldWrapper } from '@ngx-formly/core'

@Component({
  template: \`
    <div [class.has-error]=\\"showError\\" class=\\"mb-3\\">
      <label
        *ngIf=\\"to.label && to.hideLabel !== true\\"
        [attr.for]=\\"id\\"
        class=\\"block text-sm font-medium text-gray-700 dark:text-gray-300\\"
      >
        {{ to.label }}
        <span *ngIf=\\"to.required && to.hideRequiredMarker !== true\\">*</span>
      </label>

      <div class=\\"mt-1 relative\\">
        <ng-template #fieldComponent></ng-template>

        <div class=\\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\\" *ngIf=\\"showError\\">
          <!-- Heroicon name: exclamation-circle -->
          <svg
            class=\\"h-5 w-5 text-red-500\\"
            xmlns=\\"http://www.w3.org/2000/svg\\"
            viewBox=\\"0 0 20 20\\"
            fill=\\"currentColor\\"
            aria-hidden=\\"true\\"
          >
            <path
              fill-rule=\\"evenodd\\"
              d=\\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\\"
              clip-rule=\\"evenodd\\"
            />
          </svg>
        </div>
      </div>

      <div *ngIf=\\"showError\\" class=\\"mt-2 text-sm text-red-600\\" [style.display]=\\"'block'\\">
        <formly-validation-message [field]=\\"field\\"></formly-validation-message>
      </div>

      <small *ngIf=\\"to.description\\" class=\\"mt-2 text-sm text-gray-500\\">{{ to.description }}</small>
    </div>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class UiFormFieldComponent extends FieldWrapper {}
",
      "file": "/lib/wrappers/form-field/ui-form-field.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { ReactiveFormsModule } from '@angular/forms'
import { FormlyModule } from '@ngx-formly/core'
import { UiFormFieldComponent } from './ui-form-field.component'

@NgModule({
  declarations: [UiFormFieldComponent],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormlyModule.forChild({
      wrappers: [
        {
          name: 'form-field',
          component: UiFormFieldComponent,
        },
      ],
    }),
  ],
})
export class UiFormFieldModule {}
",
      "file": "/lib/wrappers/form-field/ui-form-field.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/ui/form/src",
}
`;

exports[`init generator should run successfully with default options 104`] = `
Object {
  "prefix": "ui",
  "projectType": "library",
  "root": "libs/test-web/ui/icon",
  "sourceRoot": "libs/test-web/ui/icon/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/ui/icon/src/**/*.ts",
          "libs/test-web/ui/icon/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/ui/icon/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/ui/icon",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 105`] = `
Object {
  "root": "libs/test-web/ui/icon",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/constants/ui-icon.map.ts",
    "/src/lib/enums/ui-icon.enum.ts",
    "/src/lib/test-web-ui-icon.component.html",
    "/src/lib/test-web-ui-icon.component.spec.ts",
    "/src/lib/test-web-ui-icon.component.ts",
    "/src/lib/test-web-ui-icon.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 106`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-ui-icon.module'
export * from './lib/constants/ui-icon.map'
export * from './lib/enums/ui-icon.enum'
",
      "file": "/index.ts",
    },
    Object {
      "content": "import { UiIcon } from '../enums/ui-icon.enum'

export const uiIconMap: Map<UiIcon, string> = new Map<UiIcon, string>()
  .set(
    UiIcon.at,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"currentColor\\">
  <path d=\\"M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10c1.466 0 2.961-.371 4.442-1.104l-.885-1.793C14.353 19.698 13.156 20 12 20c-4.411 0-8-3.589-8-8s3.589-8 8-8s8 3.589 8 8v1c0 .692-.313 2-1.5 2c-1.396 0-1.494-1.819-1.5-2V8h-2v.025A4.954 4.954 0 0 0 12 7c-2.757 0-5 2.243-5 5s2.243 5 5 5c1.45 0 2.748-.631 3.662-1.621c.524.89 1.408 1.621 2.838 1.621c2.273 0 3.5-2.061 3.5-4v-1c0-5.514-4.486-10-10-10zm0 13c-1.654 0-3-1.346-3-3s1.346-3 3-3s3 1.346 3 3s-1.346 3-3 3z\\"/>
</svg>\`,
  )
  .set(
    UiIcon.check,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\" fill=\\"currentColor\\" >
  <path d=\\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\\" />
</svg>\`,
  )
  .set(
    UiIcon.dollar,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"currentColor\\">
  <path d=\\"M15.999 8.5h2c0-2.837-2.755-4.131-5-4.429V2h-2v2.071c-2.245.298-5 1.592-5 4.429c0 2.706 2.666 4.113 5 4.43v4.97c-1.448-.251-3-1.024-3-2.4h-2c0 2.589 2.425 4.119 5 4.436V22h2v-2.07c2.245-.298 5-1.593 5-4.43s-2.755-4.131-5-4.429V6.1c1.33.239 3 .941 3 2.4zm-8 0c0-1.459 1.67-2.161 3-2.4v4.799c-1.371-.253-3-1.002-3-2.399zm8 7c0 1.459-1.67 2.161-3 2.4v-4.8c1.33.239 3 .941 3 2.4z\\"/>
</svg>\`,
  )
  .set(
    UiIcon.euro,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"currentColor\\" >
  <path d=\\"M13.464 6c1.43 0 2.779.613 3.799 1.726l1.475-1.352C17.334 4.843 15.461 4 13.464 4c-1.998 0-3.87.843-5.272 2.375A8.034 8.034 0 0 0 6.589 9H4v2h2.114c-.038.33-.064.663-.064 1s.026.67.064 1H4v2h2.589c.362.97.901 1.861 1.603 2.626C9.594 19.157 11.466 20 13.464 20c1.997 0 3.87-.843 5.273-2.374l-1.475-1.352C16.243 17.387 14.894 18 13.464 18s-2.778-.612-3.798-1.726A5.937 5.937 0 0 1 8.801 15H13v-2H8.139c-.05-.328-.089-.66-.089-1s.039-.672.089-1H13V9H8.801c.24-.457.516-.893.865-1.274C10.686 6.613 12.034 6 13.464 6z\\" />
</svg>\`,
  )
  .set(
    UiIcon.github,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"currentColor\\">
  <path d=\\"M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33c.85 0 1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2z\\"/>
</svg>\`,
  )
  .set(
    UiIcon.key,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"currentColor\\">
  <path d=\\"M7 17a5.007 5.007 0 0 0 4.898-4H14v2h2v-2h2v3h2v-3h1v-2h-9.102A5.007 5.007 0 0 0 7 7c-2.757 0-5 2.243-5 5s2.243 5 5 5zm0-8c1.654 0 3 1.346 3 3s-1.346 3-3 3s-3-1.346-3-3s1.346-3 3-3z\\"/>
</svg>\`,
  )
  .set(
    UiIcon.minusCircle,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 20 20\\" fill=\\"currentColor\\">
  <path fill-rule=\\"evenodd\\" d=\\"M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2h6a1 1 0 100-2H7z\\" clip-rule=\\"evenodd\\" />
</svg>\`,
  )
  .set(
    UiIcon.moon,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\">
  <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\\" />
</svg>\`,
  )
  .set(
    UiIcon.plusCircle,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 20 20\\" fill=\\"currentColor\\">
  <path fill-rule=\\"evenodd\\" d=\\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z\\" clip-rule=\\"evenodd\\" />
</svg>\`,
  )
  .set(
    UiIcon.spinner,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\" fill=\\"currentColor\\" >
  <path d=\\"M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z\\" />
</svg>\`,
  )
  .set(
    UiIcon.sun,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\">
  <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\\" />
</svg>\`,
  )
  .set(
    UiIcon.trash,
    \`<svg xmlns=\\"http://www.w3.org/2000/svg\\" fill=\\"none\\" viewBox=\\"0 0 24 24\\" stroke=\\"currentColor\\">
  <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\\" />
</svg>\`,
  )
",
      "file": "/lib/constants/ui-icon.map.ts",
    },
    Object {
      "content": "export enum UiIcon {
  at = 'at',
  check = 'check',
  dollar = 'dollar',
  euro = 'euro',
  github = 'github',
  key = 'key',
  'minusCircle' = 'minusCircle',
  moon = 'moon',
  'plusCircle' = 'plusCircle',
  spinner = 'spinner',
  sun = 'sun',
  trash = 'trash',
}
",
      "file": "/lib/enums/ui-icon.enum.ts",
    },
    Object {
      "content": "<div class=\\"flex items-center\\">
  <svg-icon [key]=\\"icon\\" [size]=\\"size\\"></svg-icon>
</div>
",
      "file": "/lib/test-web-ui-icon.component.html",
    },
    Object {
      "content": "import { createComponentFactory, Spectator } from '@ngneat/spectator/jest'
import { SvgIconComponent, SvgIconsModule } from '@ngneat/svg-icon'

import { TestWebUiIconComponent } from './test-web-ui-icon.component'

describe('TestWebUiIconComponent', () => {
  let spectator: Spectator<TestWebUiIconComponent>

  const createComponent = createComponentFactory({
    component: TestWebUiIconComponent,
    imports: [SvgIconsModule.forRoot({ icons: { data: '<svg>foo</svg>', name: 'foo' } })],
  })

  beforeEach(() => {
    spectator = createComponent({
      props: {
        icon: 'foo',
      },
    })
  })

  it('should create', () => {
    expect(spectator.component).toBeTruthy()
    expect(spectator.query(SvgIconComponent)?.key).toEqual('foo')
  })
})
",
      "file": "/lib/test-web-ui-icon.component.spec.ts",
    },
    Object {
      "content": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core'
import { UiIcon } from './enums/ui-icon.enum'

@Component({
  selector: 'ui-icon',
  templateUrl: './test-web-ui-icon.component.html',
  styles: [
    \`
      :host {
        display: block;
      }
    \`,
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class TestWebUiIconComponent {
  @Input() icon!: UiIcon | string
  @Input() size: 'lg' | 'md' | 'sm' | 'xs' = 'md'
}
",
      "file": "/lib/test-web-ui-icon.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { SvgIconRegistry, SvgIconsModule } from '@ngneat/svg-icon'
import { uiIconMap } from './constants/ui-icon.map'
import { TestWebUiIconComponent } from './test-web-ui-icon.component'

@NgModule({
  imports: [SvgIconsModule.forRoot()],
  declarations: [TestWebUiIconComponent],
  exports: [TestWebUiIconComponent],
})
export class TestWebUiIconModule {
  constructor(readonly registry: SvgIconRegistry) {
    uiIconMap.forEach((data, name) => this.registry.register({ name, data }))
  }
}
",
      "file": "/lib/test-web-ui-icon.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/ui/icon/src",
}
`;

exports[`init generator should run successfully with default options 107`] = `
Object {
  "prefix": "ui",
  "projectType": "library",
  "root": "libs/test-web/ui/loader",
  "sourceRoot": "libs/test-web/ui/loader/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/ui/loader/src/**/*.ts",
          "libs/test-web/ui/loader/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/ui/loader/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/ui/loader",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 108`] = `
Object {
  "root": "libs/test-web/ui/loader",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-ui-loader.component.ts",
    "/src/lib/test-web-ui-loader.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 109`] = `
Object {
  "content": Array [
    Object {
      "content": "
        export * from './lib/test-web-ui-loader.module';
        ",
      "file": "/index.ts",
    },
    Object {
      "content": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core'

@Component({
  selector: 'ui-loader',
  template: \`
    <div class=\\"flex items-center justify-center p-4 rounded\\" *ngIf=\\"loading\\">
      <div class=\\"flex space-x-3 animate-pulse\\">
        <div class=\\"w-2 h-2 bg-gray-500 rounded-full\\"></div>
        <div class=\\"w-2 h-2 bg-gray-500 rounded-full\\"></div>
        <div class=\\"w-2 h-2 bg-gray-500 rounded-full\\"></div>
      </div>
    </div>
  \`,
  styles: [
    \`
      :host {
        display: block;
      }
    \`,
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class TestWebUiLoaderComponent {
  @Input() loading = true
}
",
      "file": "/lib/test-web-ui-loader.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'
import { TestWebUiLoaderComponent } from './test-web-ui-loader.component'

@NgModule({
  declarations: [TestWebUiLoaderComponent],
  exports: [TestWebUiLoaderComponent],
  imports: [CommonModule],
})
export class TestWebUiLoaderModule {}
",
      "file": "/lib/test-web-ui-loader.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/ui/loader/src",
}
`;

exports[`init generator should run successfully with default options 110`] = `
Object {
  "prefix": "ui",
  "projectType": "library",
  "root": "libs/test-web/ui/page",
  "sourceRoot": "libs/test-web/ui/page/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/ui/page/src/**/*.ts",
          "libs/test-web/ui/page/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/ui/page/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/ui/page",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 111`] = `
Object {
  "root": "libs/test-web/ui/page",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-ui-page.component.ts",
    "/src/lib/test-web-ui-page.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 112`] = `
Object {
  "content": Array [
    Object {
      "content": "
        export * from './lib/test-web-ui-page.module';
        ",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component, Input } from '@angular/core'

@Component({
  selector: 'ui-page',
  template: \`
    <div class=\\"h-full flex flex-col justify-between\\">
      <header class=\\"bg-gray-800 text-gray-300 shadow\\" *ngIf=\\"headerTitle\\">
        <div class=\\"max-w-7xl mx-auto py-4 sm:py-6 px-4 sm:px-6 lg:px-8 flex justify-between items-center\\">
          <h1 class=\\"text-2xl md:text-3xl font-bold leading-tight \\">
            {{ headerTitle }}
          </h1>
          <div class=\\"mt-0\\">
            <ng-content select=\\"ui-page-header\\"></ng-content>
          </div>
        </div>
      </header>
      <div class=\\"flex-grow h-full\\">
        <div class=\\"max-w-7xl mx-auto py-3 md:py-6 lg:py-12 px-3 md:px-6 lg:px-8 h-full\\">
          <ng-content></ng-content>
        </div>
      </div>
    </div>
  \`,
})
export class TestWebUiPageComponent {
  @Input() headerTitle?: string
}
",
      "file": "/lib/test-web-ui-page.component.ts",
    },
    Object {
      "content": "import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { RouterModule } from '@angular/router'
import { TestWebUiPageComponent } from './test-web-ui-page.component'

@NgModule({
  declarations: [TestWebUiPageComponent],
  exports: [TestWebUiPageComponent],
  imports: [CommonModule, RouterModule],
})
export class TestWebUiPageModule {}
",
      "file": "/lib/test-web-ui-page.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/ui/page/src",
}
`;

exports[`init generator should run successfully with default options 113`] = `
Object {
  "prefix": "ui",
  "projectType": "library",
  "root": "libs/test-web/ui/page-header",
  "sourceRoot": "libs/test-web/ui/page-header/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/ui/page-header/src/**/*.ts",
          "libs/test-web/ui/page-header/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/ui/page-header/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/ui/page-header",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 114`] = `
Object {
  "root": "libs/test-web/ui/page-header",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-ui-page-header.component.ts",
    "/src/lib/test-web-ui-page-header.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 115`] = `
Object {
  "content": Array [
    Object {
      "content": "
        export * from './lib/test-web-ui-page-header.module';
        ",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component, Input } from '@angular/core'

@Component({
  selector: 'ui-page-header',
  template: \`
    <div class=\\"flex justify-between items-center  px-6 py-3 mb-3 md:mb-6 bg-gray-800 text-gray-300 shadow rounded-md\\">
      <div class=\\"text-lg font-semibold\\">
        {{ title }}
      </div>
      <ui-button [label]=\\"linkTitle\\" [link]=\\"linkPath\\"></ui-button>
    </div>
  \`
})
export class TestWebUiPageHeaderComponent {
  @Input() title?:  string | undefined;
  @Input() linkPath?:  string | undefined;
  @Input() linkTitle?:  string | undefined;
}
",
      "file": "/lib/test-web-ui-page-header.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiButtonModule } from '@proj/test-web/ui/button'
import { TestWebUiPageHeaderComponent } from './test-web-ui-page-header.component'

@NgModule({
  declarations: [TestWebUiPageHeaderComponent],
  imports: [CommonModule, RouterModule, TestWebUiButtonModule],
  exports: [TestWebUiPageHeaderComponent],
})
export class TestWebUiPageHeaderModule {}
",
      "file": "/lib/test-web-ui-page-header.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/ui/page-header/src",
}
`;

exports[`init generator should run successfully with default options 116`] = `
Object {
  "prefix": "ui",
  "projectType": "library",
  "root": "libs/test-web/ui/sidebar-page",
  "sourceRoot": "libs/test-web/ui/sidebar-page/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/ui/sidebar-page/src/**/*.ts",
          "libs/test-web/ui/sidebar-page/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/ui/sidebar-page/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/ui/sidebar-page",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 117`] = `
Object {
  "root": "libs/test-web/ui/sidebar-page",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-ui-sidebar-page.component.ts",
    "/src/lib/test-web-ui-sidebar-page.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 118`] = `
Object {
  "content": Array [
    Object {
      "content": "
        export * from './lib/test-web-ui-sidebar-page.module';
        ",
      "file": "/index.ts",
    },
    Object {
      "content": "import { Component, Input } from '@angular/core'

export interface TestWebUiSidebarPageLink {
  label: string
  icon: string
  path: string
}

@Component({
  selector: 'ui-sidebar-page',
  template: \`
    <ui-page [headerTitle]=\\"headerTitle\\">
      <div class=\\"lg:grid lg:grid-cols-12 lg:gap-x-5\\">
        <aside class=\\"py-3 md:py-6 md:px-2 lg:py-0 lg:px-0 lg:col-span-3\\">
          <nav class=\\"space-y-1 md:space-y-3\\">
            <ng-container *ngFor=\\"let link of links\\">
              <a
                routerLinkActive=\\"bg-gray-50 dark:bg-gray-700 text-pink-600 dark:text-pink-600 hover:bg-white\\"
                [routerLink]=\\"link.path\\"
                class=\\"dark:bg-gray-800 dark:text-gray-400 text-gray-900 hover:text-gray-900 hover:bg-gray-50 group rounded-md px-3 py-2 flex items-center text-sm font-medium\\"
              >
                <i class=\\"mr-2 text-gray-900 fa fa-fw {{ link.icon || 'fa-cube ' }}\\"></i>
                <span class=\\"truncate\\">
                  {{ link.label }}
                </span>
              </a>
            </ng-container>
          </nav>
        </aside>

        <div class=\\"md:px-2 lg:px-0 lg:col-span-9\\">
          <ng-content></ng-content>
        </div>
      </div>
    </ui-page>
  \`,
})
export class TestWebUiSidebarPageComponent {
  @Input() headerTitle: string | undefined;
  @Input() links: TestWebUiSidebarPageLink[] = []
}
",
      "file": "/lib/test-web-ui-sidebar-page.component.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { TestWebUiPageModule } from '@proj/test-web/ui/page'
import { TestWebUiSidebarPageComponent } from './test-web-ui-sidebar-page.component'

@NgModule({
  declarations: [TestWebUiSidebarPageComponent],
  exports: [TestWebUiSidebarPageComponent],
  imports: [CommonModule, RouterModule, TestWebUiPageModule],
})
export class TestWebUiSidebarPageModule {}
",
      "file": "/lib/test-web-ui-sidebar-page.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/ui/sidebar-page/src",
}
`;

exports[`init generator should run successfully with default options 119`] = `
Object {
  "prefix": "ui",
  "projectType": "library",
  "root": "libs/test-web/ui/table",
  "sourceRoot": "libs/test-web/ui/table/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/ui/table/src/**/*.ts",
          "libs/test-web/ui/table/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/ui/table/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/ui/table",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 120`] = `
Object {
  "root": "libs/test-web/ui/table",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-ui-table.component.css",
    "/src/lib/test-web-ui-table.component.ts",
    "/src/lib/test-web-ui-table.interfaces.ts",
    "/src/lib/test-web-ui-table.module.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 121`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-ui-table.module'
export * from './lib/test-web-ui-table.interfaces'
",
      "file": "/index.ts",
    },
    Object {
      "content": "::ng-deep table.cdk-table {
  @apply w-full divide-y divide-gray-600;
}

::ng-deep .cdk-table thead {
  @apply bg-gray-50 bg-gray-800 text-gray-500;
}

::ng-deep .cdk-table thead th {
  @apply px-2 md:px-4 py-3 text-xs font-medium uppercase tracking-wider text-left;
}

::ng-deep .cdk-table tbody tr:nth-child(even) {
  @apply bg-gray-600 text-gray-300;
}
::ng-deep .cdk-table tbody tr:nth-child(odd) {
  @apply bg-gray-700 text-gray-300;
}

::ng-deep .cdk-table tbody td {
  @apply px-2 md:px-4 py-2 md:py-4 whitespace-nowrap text-sm;
}
",
      "file": "/lib/test-web-ui-table.component.css",
    },
    Object {
      "content": "import { ArrayDataSource } from '@angular/cdk/collections'
import { Component, Input } from '@angular/core'
import { TestWebUiTableColumn } from './test-web-ui-table.interfaces'

@Component({
  selector: 'ui-table',
  template: \`
    <table cdk-table [dataSource]=\\"dataSource\\">
      <ng-container *ngFor=\\"let column of cols\\" [cdkColumnDef]=\\"column.id\\">
        <th cdk-header-cell *cdkHeaderCellDef [class]=\\"column?.headerClassName\\">{{ column.header }}</th>
        <td cdk-cell *cdkCellDef=\\"let row\\" [class]=\\"column?.className\\">
          <ng-container *ngIf=\\"column.routerLink\\">
            <a [routerLink]=\\"column.routerLink(row)\\">{{ column.label(row) }}</a>
          </ng-container>
          <ng-container *ngIf=\\"!column.routerLink\\">
            {{ column.label(row) }}
          </ng-container>
        </td>
      </ng-container>
      <tr cdk-header-row *cdkHeaderRowDef=\\"columns\\"></tr>
      <tr cdk-row *cdkRowDef=\\"let row; columns: columns\\"></tr>
    </table>
  \`,
  styleUrls: ['./test-web-ui-table.component.css'],
})
export class TestWebUiTableComponent {
  @Input() cols: TestWebUiTableColumn[] = []
  @Input() data: any[] = []

  get dataSource(): ArrayDataSource<any> {
    return new ArrayDataSource(this.data || [])
  }

  get columns() {
    return this.cols?.map((c) => c.id)
  }
}
",
      "file": "/lib/test-web-ui-table.component.ts",
    },
    Object {
      "content": "const ucFirst = (s: string) => s.charAt(0).toUpperCase() + s.slice(1)

export class TestWebUiTableColumn {
  id?: string
  label?: (item: any) => string
  className?: string
  header?: string
  headerClassName?: string
}

export class TestWebUiTable {
  static column(id: string, config: Omit<TestWebUiTableColumn, 'id'> = { label: (item) => item[id] }): TestWebUiTableColumn {
    const defaultCell = (item) => item[id]
    return {
      id,
      ...config,
      label: config.label || defaultCell,
      header: config.header || ucFirst(id),
      headerClassName: config.headerClassName || 'text-left',
    }
  }
}
",
      "file": "/lib/test-web-ui-table.interfaces.ts",
    },
    Object {
      "content": "import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { CdkTableModule } from '@angular/cdk/table'
import { TestWebUiTableComponent } from './test-web-ui-table.component'

@NgModule({
  declarations: [TestWebUiTableComponent],
  exports: [TestWebUiTableComponent],
  imports: [CommonModule, RouterModule, CdkTableModule],
})
export class TestWebUiTableModule {}
",
      "file": "/lib/test-web-ui-table.module.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/ui/table/src",
}
`;

exports[`init generator should run successfully with default options 122`] = `
Object {
  "prefix": "ui",
  "projectType": "library",
  "root": "libs/test-web/ui/toast",
  "sourceRoot": "libs/test-web/ui/toast/src",
  "tags": Array [],
  "targets": Object {
    "lint": Object {
      "executor": "@nrwl/linter:eslint",
      "options": Object {
        "lintFilePatterns": Array [
          "libs/test-web/ui/toast/src/**/*.ts",
          "libs/test-web/ui/toast/src/**/*.html",
        ],
      },
    },
    "test": Object {
      "executor": "@nrwl/jest:jest",
      "options": Object {
        "jestConfig": "libs/test-web/ui/toast/jest.config.js",
        "passWithNoTests": true,
      },
      "outputs": Array [
        "coverage/libs/test-web/ui/toast",
      ],
    },
  },
}
`;

exports[`init generator should run successfully with default options 123`] = `
Object {
  "root": "libs/test-web/ui/toast",
  "tree": Array [
    "/.eslintrc.json",
    "/README.md",
    "/jest.config.js",
    "/src/index.ts",
    "/src/lib/test-web-ui-toast.module.ts",
    "/src/lib/test-web-ui-toast.service.ts",
    "/src/test-setup.ts",
    "/tsconfig.json",
    "/tsconfig.lib.json",
    "/tsconfig.spec.json",
  ],
}
`;

exports[`init generator should run successfully with default options 124`] = `
Object {
  "content": Array [
    Object {
      "content": "export * from './lib/test-web-ui-toast.service'
",
      "file": "/index.ts",
    },
    Object {
      "content": "
        import { NgModule } from '@angular/core';
        import { CommonModule } from '@angular/common';
        
        @NgModule({
          imports: [
            CommonModule
          ]
        })
        export class TestWebUiToastModule { }
        ",
      "file": "/lib/test-web-ui-toast.module.ts",
    },
    Object {
      "content": "import { Injectable } from '@angular/core'
import { HotToastService } from '@ngneat/hot-toast'
import { ToastOptions } from '@ngneat/hot-toast/lib/hot-toast.model'
import { Content } from '@ngneat/overview'

@Injectable({ providedIn: 'root' })
export class TestWebUiToastService {
  constructor(private readonly toast: HotToastService) {}

  error<DataType>(message?: Content, options?: ToastOptions<DataType>) {
    return this.toast.error(message, options)
  }

  success<DataType>(message?: Content, options?: ToastOptions<DataType>) {
    return this.toast.success(message, options)
  }

  warning<DataType>(message?: Content, options?: ToastOptions<DataType>) {
    return this.toast.warning(message, options)
  }
}
",
      "file": "/lib/test-web-ui-toast.service.ts",
    },
    Object {
      "content": "import 'jest-preset-angular/setup-jest';
",
      "file": "/test-setup.ts",
    },
  ],
  "root": "libs/test-web/ui/toast/src",
}
`;

exports[`init generator: custom options should run successfully with custom options 1`] = `
Array [
  "src",
  "tsconfig.app.json",
  "tsconfig.json",
  ".eslintrc.json",
  "jest.config.js",
  "tsconfig.spec.json",
]
`;

exports[`init generator: custom options should run successfully with custom options 2`] = `
Array [
  "app",
  "assets",
  "environments",
  "main.ts",
]
`;

exports[`init generator: custom options should run successfully with custom options 3`] = `
Array [
  "app.module.ts",
]
`;

exports[`init generator: custom options should run successfully with custom options 4`] = `
Object {
  "projects": Object {
    "api": Object {
      "name": "server",
      "type": "nest",
    },
    "mobile": Object {
      "name": "native",
      "type": "ionic-angular",
    },
    "web": Object {
      "name": "frontend",
      "type": "angular",
    },
  },
}
`;
